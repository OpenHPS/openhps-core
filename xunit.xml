<testsuite name="Mocha Tests" tests="298" failures="0" errors="0" skipped="0" timestamp="Fri, 29 Jul 2022 11:56:31 GMT" time="93.263">
<testcase classname="DataFrame" name="should be serializable and deserializable" time="0.004"/>
<testcase classname="DataFrame" name="should get specific object types" time="0"/>
<testcase classname="DataFrame" name="should clone added data objects" time="0.001"/>
<testcase classname="DataFrame" name="should copy a data frame in the constructor" time="0"/>
<testcase classname="DataObject" name="should have a uuidv4 uid" time="0.001"/>
<testcase classname="DataObject" name="should be serializable and deserializable" time="0.001"/>
<testcase classname="DataObject" name="should deserialize undefined relative positions" time="0"/>
<testcase classname="DataObject" name="should deserialize relative positions wihout a type" time="0"/>
<testcase classname="DataObject" name="should clone" time="0.001"/>
<testcase classname="DataObject" name="should support listeners" time="0.004"/>
<testcase classname="DataObject" name="should support conversion to sql" time="0"/>
<testcase classname="DataObject" name="should support multiple positions" time="0"/>
<testcase classname="DataObject augmentation" name="should support property augmentation" time="0"/>
<testcase classname="DataObject augmentation" name="should support function augmentation" time="0"/>
<testcase classname="DataObject augmentation" name="should support applying decorators externally" time="0"/>
<testcase classname="DataObject binding" name="should support saving" time="0.001"/>
<testcase classname="DataObject binding" name="should support saving with changes" time="0.001"/>
<testcase classname="DataObject binding sensor object" name="should be serializable and deserializable" time="0"/>
<testcase classname="data reference space" name="should be able to retrieve a transformation matrix" time="0"/>
<testcase classname="data reference space translation" name="should shift position" time="0.001"/>
<testcase classname="data reference space translation" name="should translate with a 2d position" time="0"/>
<testcase classname="data reference space scaling" name="should scale up" time="0.001"/>
<testcase classname="data reference space scaling" name="should scale down" time="0"/>
<testcase classname="data reference space scaling" name="should scale linear velocity" time="0"/>
<testcase classname="data reference space rotation" name="should rotate on X axis" time="0"/>
<testcase classname="data reference space rotation" name="should rotate the orientation from 0 (yaw)" time="0"/>
<testcase classname="data reference space rotation" name="should rotate the orientation from 90 (yaw)" time="0"/>
<testcase classname="data reference space rotation" name="should rotate the orientation (roll)" time="0.001"/>
<testcase classname="data reference space rotation" name="should transform a perspective" time="0.001"/>
<testcase classname="data reference space positioning model" name="should translate the origin offset" time="0.002"/>
<testcase classname="data reference space positioning model" name="should inverse the orientation" time="0.003"/>
<testcase classname="data reference space conversion" name="should convert translation to the first parent" time="0.001"/>
<testcase classname="data reference space conversion" name="should support changes to the parent reference space" time="0"/>
<testcase classname="data reference space conversion" name="should support changes to the parent reference space with pass by reference" time="0.001"/>
<testcase classname="DataSerializer" name="should register and unregister serializable objects" time="0"/>
<testcase classname="DataSerializer serializing" name="should correctly serialize an extended object without decorators" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize a proxied object" time="0"/>
<testcase classname="DataSerializer serializing" name="should support extracting meta info" time="0"/>
<testcase classname="DataSerializer serializing" name="should not crash on null or undefined objects in an array" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize functions" time="0.001"/>
<testcase classname="DataSerializer serializing" name="should serialize global types directly" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize global types with constructor" time="0.001"/>
<testcase classname="DataSerializer serializing" name="should serialize global types indirectly" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize map members" time="0"/>
<testcase classname="DataSerializer serializing" name="should return undefined when serialized data is null" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize arrays" time="0"/>
<testcase classname="DataSerializer serializing" name="should serialize unregistered types" time="0"/>
<testcase classname="DataSerializer serializing" name="should throw an error when serializing fails" time="0"/>
<testcase classname="DataSerializer deserializing" name="should return undefined when deserialized data is null" time="0"/>
<testcase classname="DataSerializer deserializing" name="should deserialize arrays" time="0"/>
<testcase classname="DataSerializer deserializing" name="should throw an error when deserializing fails" time="0"/>
<testcase classname="SerializableMember augmentation" name="should be able to inject additional options" time="0.001"/>
<testcase classname="SerializableMember augmentation" name="should be able to merge injected options" time="0"/>
<testcase classname="SerializableObject registration" name="should be possible to update the options" time="0"/>
<testcase classname="SerializableObject augmentation" name="should be able to inject additional options" time="0"/>
<testcase classname="SerializableObject augmentation" name="should be able to deep merge options" time="0.001"/>
<testcase classname="dataset liwste2017 (reverse beacons) trilateration raw" name="should trilaterate a location based on three relative distances" time="0.005"/>
<testcase classname="dataset liwste2017 (reverse beacons) trilateration raw" name="should perform multiple trilaterations" time="0.436"/>
<testcase classname="dataset liwste2017 trilateration calibration" name="should contain calibration data for beacon A" time="0.001"/>
<testcase classname="dataset liwste2017 trilateration calibration" name="should contain calibration data for beacon B" time="0"/>
<testcase classname="dataset liwste2017 trilateration calibration" name="should contain calibration data for beacon C" time="0.001"/>
<testcase classname="dataset liwste2017 trilateration raw" name="should trilaterate a location based on three relative distances" time="0.001"/>
<testcase classname="dataset liwste2017 trilateration raw" name="should perform multiple trilaterations" time="0.172"/>
<testcase classname="Model serializer" name="should serialize a model" time="0.001"/>
<testcase classname="Model service" name="should be possible to get the datatype of a proxied service" time="0.001"/>
<testcase classname="Model service" name="should be able to find services by class" time="0.001"/>
<testcase classname="Model service" name="should be able to find data services by class" time="0.001"/>
<testcase classname="Model service find data services" name="should be able to find by data type" time="0.001"/>
<testcase classname="Model service find data services" name="should be able to find by data type sorted by specificity" time="0.001"/>
<testcase classname="Model service find data services" name="should be able to find by data type" time="0"/>
<testcase classname="Model service find data services" name="should determine instanceof with priority" time="0"/>
<testcase classname="Model builder" name="should support pushing without building" time="0.001"/>
<testcase classname="Model builder" name="should support graphs as nodes" time="0.001"/>
<testcase classname="Model builder" name="should support graphbuilders as nodes" time="0.001"/>
<testcase classname="Model builder" name="should support loggers" time="0.001"/>
<testcase classname="Model builder" name="should have an input and output by default" time="0"/>
<testcase classname="Model builder" name="should be able to push chunks of frames" time="0.001"/>
<testcase classname="Model builder" name="should be able to broadcast to multiple nodes" time="0"/>
<testcase classname="Model builder" name="should reject building when node rejects build" time="0"/>
<testcase classname="Model builder" name="should be able to take names in from, via and to" time="0.001"/>
<testcase classname="Model builder" name="should be able to take names from other shapes" time="0.001"/>
<testcase classname="Model builder" name="should be able to take names in other shapes" time="0.002"/>
<testcase classname="Model builder" name="should be able to use string shapes as placeholder without being defined" time="0"/>
<testcase classname="Model builder" name="should be able to take graph shapes" time="0"/>
<testcase classname="Model builder" name="should be able to take unbuild model shapes" time="0.001"/>
<testcase classname="Model builder" name="should be able to take build model shapes" time="0.001"/>
<testcase classname="Model builder" name="should support multiple services" time="0"/>
<testcase classname="Model graph builder" name="should support adding nodes and edges manually" time="0.001"/>
<testcase classname="Model pushing" name="should support pushing to placeholders" time="0.002"/>
<testcase classname="Model pushing" name="should support multiple shape pushing" time="0.002"/>
<testcase classname="Model pushing" name="should store the source in the options" time="0.001"/>
<testcase classname="Model pushing" name="should throw an exception when a sink node throws an error" time="0.009"/>
<testcase classname="Model pushing" name="should throw an exception when a graph shape node throws an error" time="0.002"/>
<testcase classname="Model pushing" name="should throw an exception when a processing node throws an error" time="0.001"/>
<testcase classname="Model pushing" name="should throw an exception when a processing node rejects" time="0.001"/>
<testcase classname="Model pushing" name="should resolve a push after being processed by the first node in line" time="1.013"/>
<testcase classname="Model pulling" name="should pull multiple frames through the options" time="0.001"/>
<testcase classname="Model model builder events" name="should support a &#x22;postbuild&#x22; event" time="0"/>
<testcase classname="Model model builder events" name="should support a &#x22;prebuild&#x22; event" time="0"/>
<testcase classname="Model onceCompleted()" name="should support a completed event" time="0.001"/>
<testcase classname="Model onceCompleted()" name="should support a completed event on a graph shape" time="0"/>
<testcase classname="node basic kalman filter" name="should filter values in a data frame" time="0.006"/>
<testcase classname="node high-pass filter" name="should filter values in a data frame" time="0.003"/>
<testcase classname="node low-pass filter" name="should filter values in a data frame" time="0.003"/>
<testcase classname="SMAFilterNode" name="should filter values in a data frame" time="0.004"/>
<testcase classname="AccuracyModifierNode" name="should modify the accuracy" time="0.001"/>
<testcase classname="node cell identification" name="should calculate a location based on three angles" time="0.001"/>
<testcase classname="node history source" name="should load source objects from memory" time="0.001"/>
<testcase classname="list source layer" name="should pop items from the list" time="0.001"/>
<testcase classname="list source layer" name="should add a merge node internally" time="0.001"/>
<testcase classname="MultilaterationNode" name="should not crash on 0 reference positions" time="0"/>
<testcase classname="MultilaterationNode" name="should work with 1 reference position (2d)" time="0"/>
<testcase classname="MultilaterationNode" name="should work with 2 reference positions (2d)" time="0"/>
<testcase classname="MultilaterationNode" name="should work with 2 reference positions with two distances (2d)" time="0"/>
<testcase classname="MultilaterationNode" name="should work with 2 reference positions (geographical)" time="0.002"/>
<testcase classname="MultilaterationNode" name="should work with 3 reference positions (2d)" time="0.001"/>
<testcase classname="MultilaterationNode" name="should work with 3 reference positions with distances (2d)" time="0"/>
<testcase classname="MultilaterationNode" name="should work with 3 reference positions with short distances (2d)" time="0"/>
<testcase classname="MultilaterationNode" name="should work with &#x3E;3 reference positions (2d)" time="0.001"/>
<testcase classname="MultilaterationNode" name="should work with 3 reference positions (3d)" time="0.001"/>
<testcase classname="ProcessingNode getNodeData()" name="should load node data with default" time="0.001"/>
<testcase classname="node referenceconversion" name="should convert from and to the reference space" time="0.001"/>
<testcase classname="node referenceconversion" name="should work with stored reference spaces" time="0.001"/>
<testcase classname="node source" name="should support pulling a specific source node" time="0"/>
<testcase classname="node source" name="should initialize with a source object" time="0"/>
<testcase classname="node source" name="should be able to update velocity without resetting the position" time="0.002"/>
<testcase classname="Node uid" name="should not be null" time="0"/>
<testcase classname="Node uid" name="should be changeable" time="0"/>
<testcase classname="Node serialization" name="should return all subclasses" time="0"/>
<testcase classname="Node pull" name="should trigger exception" time="0"/>
<testcase classname="Node push" name="should not accept null frames" time="0"/>
<testcase classname="Node push" name="should trigger exception" time="0"/>
<testcase classname="Node push" name="should be available when not busy" time="0"/>
<testcase classname="Node updating" name="should support updating options" time="0"/>
<testcase classname="node triangulation" name="should calculate a location based on three angles" time="0.002"/>
<testcase classname="WorkerNode" name="should take 30ms with 1 worker" time="3.834"/>
<testcase classname="WorkerNode" name="should take 20ms with 2 workers" time="7.829"/>
<testcase classname="WorkerNode" name="should be able to access data services" time="4.114"/>
<testcase classname="WorkerNode" name="should be able to access node data services" time="4.098"/>
<testcase classname="WorkerNode" name="should support error events" time="4.153"/>
<testcase classname="WorkerNode" name="should support completed events" time="4.005"/>
<testcase classname="WorkerNode" name="should support node workerserialization" time="4.431"/>
<testcase classname="worker graph" name="should build a graph or node from a file" time="10.387"/>
<testcase classname="worker graph" name="should build a model from a file using a main service" time="11.955"/>
<testcase classname="worker graph" name="should build a model from a file using a worker service" time="3.917"/>
<testcase classname="node balance" name="should take 30ms to execute with one time consuming layer" time="0.001"/>
<testcase classname="node balance" name="should take 10ms to execute with 3 time consuming layers" time="0.001"/>
<testcase classname="node balance" name="should take 20ms to execute with 2 time consuming layers" time="0.001"/>
<testcase classname="node frame chunk" name="should chunk data frames in frames of 3" time="0.002"/>
<testcase classname="node frame chunk" name="should chunk data frames in frames of 3 unless a timeout happens" time="0.01"/>
<testcase classname="node frame delay" name="should delay data frames" time="0.331"/>
<testcase classname="node frame debounce" name="should debounce data frames" time="0.11"/>
<testcase classname="node frame filter" name="should filter data frames" time="0.002"/>
<testcase classname="node frame flatten" name="should flatten data frames that are chunked" time="0.001"/>
<testcase classname="node frame clone node" name="should clone the frame for each output node" time="0.002"/>
<testcase classname="FrameMergeNode" name="should support merging from same source" time="0.002"/>
<testcase classname="FrameMergeNode" name="should support merging with one inlet" time="2.01"/>
<testcase classname="FrameMergeNode" name="should support merging relative positions with one inlet" time="2.015"/>
<testcase classname="FrameMergeNode" name="should support merging of a position" time="0.009"/>
<testcase classname="FrameMergeNode" name="should support merging one frame from multiple inlets" time="0.114"/>
<testcase classname="FrameMergeNode" name="should merge from multiple sources with same parent" time="0.001"/>
<testcase classname="FrameMergeNode" name="should merge from multiple sources with same uid" time="0.002"/>
<testcase classname="FrameMergeNode" name="should merge from many multiple sources with same uid" time="0.004"/>
<testcase classname="FrameMergeNode" name="should merge relative positions of the same object" time="1.016"/>
<testcase classname="node frame memory buffer" name="should buffer pushed frames" time="0.002"/>
<testcase classname="node source merge" name="should merge data object from the same source uid" time="0.001"/>
<testcase classname="node object filter" name="should filter data objects" time="0.002"/>
<testcase classname="node object merge node" name="should merge from multiple sources with same uid" time="0.002"/>
<testcase classname="node object merge node" name="should merge from multiple sources with same uid and different accuracies" time="0.002"/>
<testcase classname="node throttle" name="should throttle data frames" time="0.218"/>
<testcase classname="node timed pull" name="should automatically pull" time="0.109"/>
<testcase classname="node timed pull" name="should reset the timer when a frame is pushed" time="1.013"/>
<testcase classname="node time sync" name="should synchronize data frames" time="0.002"/>
<testcase classname="AbsolutePosition serialization" name="should serialize a position indirectly" time="0"/>
<testcase classname="AbsolutePosition serialization" name="should serialize a position without orientation" time="0"/>
<testcase classname="AbsolutePosition serialization" name="should serialize a position with orientation" time="0.001"/>
<testcase classname="AbsolutePosition serialization" name="should serialize a position with orientation and accuracy" time="0.001"/>
<testcase classname="AbsolutePosition serialization" name="should serialize a position with all components" time="0.001"/>
<testcase classname="Accuracy Accuracy2D" name="should be directly serializable" time="0"/>
<testcase classname="Accuracy Accuracy2D" name="should be indirectly serializable" time="0"/>
<testcase classname="Accuracy Accuracy3D" name="should be directly serializable" time="0"/>
<testcase classname="Orientation" name="should be serializable" time="0.001"/>
<testcase classname="Orientation" name="should be serializable within a class" time="0"/>
<testcase classname="Pose" name="should be created from a position and orientation" time="0.001"/>
<testcase classname="Pose" name="should be serializable" time="0"/>
<testcase classname="GeographicalPosition" name="should convert latitude and latittude to XYZ coordinates" time="0"/>
<testcase classname="GeographicalPosition" name="should clone" time="0.001"/>
<testcase classname="GeographicalPosition" name="should calculate the distance between two points" time="0"/>
<testcase classname="GeographicalPosition" name="should calculate the bearing between two points" time="0"/>
<testcase classname="GeographicalPosition" name="should calculate the destination from a point in a direction" time="0"/>
<testcase classname="GeographicalPosition" name="should convert the geographic position to EPSG3857" time="0.001"/>
<testcase classname="GeographicalPosition" name="should convert the geographical position to a vector in meters" time="0"/>
<testcase classname="GeographicalPosition" name="should convert the geographic position to ECEF when requesting in meters" time="0"/>
<testcase classname="position relative velocity" name="should be serializable" time="0"/>
<testcase classname="RemoteService service" name="should forward methods" time="0.001"/>
<testcase classname="RemoteService source and sink" name="should create additional nodes for inlet and outlets" time="0"/>
<testcase classname="RemoteService source and sink" name="should link a sink to a remote source" time="0.001"/>
<testcase classname="RemoteService processing node" name="should create additional nodes for inlet and outlets" time="0"/>
<testcase classname="RemoteService processing node" name="should implement a processing node" time="0.001"/>
<testcase classname="RemoteService error forwarding" name="should forward an error" time="0.001"/>
<testcase classname="query syntax" name="should support explicit classes" time="0"/>
<testcase classname="query syntax" name="should support extended classes" time="0"/>
<testcase classname="query evaluator" name="should evaluate single keys" time="0"/>
<testcase classname="query evaluator" name="should evaluate multiple keys" time="0"/>
<testcase classname="query evaluator" name="should evaluate $and" time="0"/>
<testcase classname="query evaluator" name="should evaluate $or" time="0"/>
<testcase classname="query evaluator" name="should evaluate nested keys" time="0.001"/>
<testcase classname="query evaluator" name="should evaluate regular expressions" time="0"/>
<testcase classname="query evaluator comparison" name="should evaluate $gt" time="0"/>
<testcase classname="query evaluator comparison" name="should evaluate $gte" time="0.001"/>
<testcase classname="query evaluator comparison" name="should evaluate $lt" time="0"/>
<testcase classname="query evaluator comparison" name="should evaluate $lte" time="0"/>
<testcase classname="query evaluator array query" name="should evaluate $elemMatch" time="0.001"/>
<testcase classname="DataFrameService" name="should support finding frames by object" time="0.001"/>
<testcase classname="DataObjectService" name="should support sorting in descending order" time="0"/>
<testcase classname="DataObjectService" name="should support sorting in ascending order" time="0.001"/>
<testcase classname="DataObjectService" name="should find data objects before a certain date" time="0.001"/>
<testcase classname="DataObjectService" name="should find data objects after a certain date" time="0.001"/>
<testcase classname="DataObjectService" name="should find a object by 2d position" time="0.001"/>
<testcase classname="DataObjectService" name="should find a object by 3d position" time="0.001"/>
<testcase classname="DataObjectService" name="should store objects" time="0"/>
<testcase classname="DataObjectService" name="should throw an error when quering non existing objects" time="0"/>
<testcase classname="DataObjectService" name="should find all items" time="0.002"/>
<testcase classname="DataObjectService" name="should find by display name" time="0.001"/>
<testcase classname="DataObjectService source node" name="should load unknown objects" time="0.001"/>
<testcase classname="DataObjectService source node" name="should emit events" time="0"/>
<testcase classname="DataObjectService source node" name="should delete all objects based on a query" time="0.001"/>
<testcase classname="DataObjectService source node" name="should delete all objects" time="0"/>
<testcase classname="DataObjectService source node driver" name="should have access to the model" time="0"/>
<testcase classname="DataObjectService source node driver" name="should have access to the logger" time="0"/>
<testcase classname="DataObjectService sink node" name="should store objects at the sink node" time="0"/>
<testcase classname="DataObjectService sink node" name="should store unknown data objects at the sink node" time="0.001"/>
<testcase classname="DataObjectService sink node" name="should resolve the promise after stored" time="0.001"/>
<testcase classname="DataObjectService sink node without persistence" name="should not store objects at the sink node" time="0"/>
<testcase classname="DataObjectService slow driver" name="should wait for the driver to be ready" time="2.005"/>
<testcase classname="LocationBasedService getCurrentPosition" name="should return the current position without maxage" time="0.001"/>
<testcase classname="LocationBasedService getCurrentPosition" name="should return the current position with maxage" time="0.001"/>
<testcase classname="LocationBasedService getCurrentPosition" name="should forcefully return a position" time="0.002"/>
<testcase classname="LocationBasedService watchPosition" name="should watch for changes" time="0.167"/>
<testcase classname="LocationBasedService watchPosition" name="should forcefully watch for changes" time="0.08"/>
<testcase classname="node data service" name="should store node data" time="0.001"/>
<testcase classname="proxy data object service" name="should be able to proxy name requests" time="0"/>
<testcase classname="proxy data object service" name="should be able to proxy function calls" time="0"/>
<testcase classname="TrajectoryService" name="should store multiple positions of the same object" time="6.357"/>
<testcase classname="TrajectoryService" name="should find the last known trajectory" time="0.409"/>
<testcase classname="TrajectoryService" name="should find a trajectory" time="0.412"/>
<testcase classname="TrajectoryService" name="should find a trajectory from start to end date or time" time="0.413"/>
<testcase classname="TrajectoryService" name="should support a practical example with a sink and autobind=true" time="5.673"/>
<testcase classname="TrajectoryService" name="should support a practical example with a sink and autobind=false" time="0.617"/>
<testcase classname="TrajectoryService" name="should support a practical example with a custom sink and autobind=false" time="6.786"/>
<testcase classname="math euler rotation order XYZ" name="should load from X" time="0"/>
<testcase classname="math euler rotation order XYZ" name="should load from Y" time="0"/>
<testcase classname="math euler rotation order XYZ" name="should load from Z" time="0"/>
<testcase classname="quaternion axis rotation" name="convert from instance" time="0"/>
<testcase classname="quaternion axis rotation" name="convert from object" time="0"/>
<testcase classname="quaternion axis rotation" name="convert from array" time="0"/>
<testcase classname="quaternion axis rotation" name="convert to axis angle" time="0"/>
<testcase classname="quaternion euler rotation" name="convert from instance" time="0.001"/>
<testcase classname="quaternion euler rotation" name="convert from vector3" time="0"/>
<testcase classname="quaternion euler rotation" name="convert from xyz object" time="0"/>
<testcase classname="quaternion euler rotation" name="convert from number array" time="0"/>
<testcase classname="Unit registration" name="should register units upon creation" time="0.001"/>
<testcase classname="Unit serializing" name="should serialize a base unit" time="0.001"/>
<testcase classname="Unit serializing" name="should serialize a unit and definitions" time="0.001"/>
<testcase classname="Unit serializing" name="should not deserialize an unknown unit" time="0.001"/>
<testcase classname="Unit serializing" name="should deserialize a derived unit" time="0.001"/>
<testcase classname="Unit parsing" name="should find units by their full base unit name" time="0"/>
<testcase classname="Unit parsing" name="should find units by their alias name and base name" time="0.001"/>
<testcase classname="Unit parsing" name="should find units by their alias name" time="0"/>
<testcase classname="Unit parsing" name="should find units by their prefix name" time="0"/>
<testcase classname="Unit parsing" name="should find units by their prefix alias" time="0.001"/>
<testcase classname="Unit converting" name="should convert from unit instance to another unit instance" time="0"/>
<testcase classname="Unit converting" name="should convert from unit name to another unit name" time="0"/>
<testcase classname="Unit length" name="should convert from mm to cm" time="0"/>
<testcase classname="Unit length" name="should convert from mm to m" time="0"/>
<testcase classname="Unit length" name="should convert from cm to km" time="0"/>
<testcase classname="Unit length" name="should convert from m to m" time="0"/>
<testcase classname="Unit length" name="should convert from nm to m" time="0.001"/>
<testcase classname="Unit length" name="should convert from miles to m" time="0"/>
<testcase classname="Unit length" name="should handle small numbers" time="0"/>
<testcase classname="Unit length" name="should handle large numbers" time="0"/>
<testcase classname="Unit angle" name="should convert from degrees to radians" time="0"/>
<testcase classname="Unit angle" name="should convert from radians to degrees" time="0"/>
<testcase classname="Unit derived units" name="should convert deg/s to rad/s" time="0"/>
<testcase classname="Unit derived units" name="should convert rad/s to rad/min" time="0"/>
<testcase classname="Unit derived units" name="should convert deg/min to rad/s" time="0"/>
<testcase classname="Unit unit value" name="should convert" time="0"/>
<testcase classname="Unit unit value" name="should be serializable" time="0.001"/>
<testcase classname="Unit definition order" name="should convert celcius to fahrenheit" time="0"/>
<testcase classname="Unit definition order" name="should convert fahrenheit to celcius" time="0.001"/>
<testcase classname="Unit definition order" name="should convert kelvin to fahrenheit" time="0"/>
<testcase classname="Unit definition order" name="should convert fahrenheit to kelvin" time="0"/>
<testcase classname="Unit definition order" name="should convert rankine to celcius" time="0.001"/>
<testcase classname="Unit definition order" name="should convert kelvin to rankine" time="0"/>
<testcase classname="Unit definition order" name="should convert celcius to rankine" time="0"/>
<testcase classname="Unit definition order" name="should convert rankine to fahrenheit" time="0"/>
<testcase classname="Unit definition order" name="should convert fahrenheit to rankine" time="0"/>
<testcase classname="Unit gcs" name="should convert WGS84 to ECEF" time="0"/>
</testsuite>
