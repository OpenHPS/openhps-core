<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1488px" preserveAspectRatio="none" style="width:4396px;height:1488px;background:#00000000;" version="1.1" viewBox="0 0 4396 1488" width="4396px" zoomAndPan="magnify"><defs><filter height="300%" id="f1synpxrpcc16l" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[9ac6b26c9c0951042fc71ef94bb46580]
class ObjectProcessingNode<InOut>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="444.9453" id="ObjectProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1806" y="486"/><ellipse cx="2048.25" cy="502" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2048.3594,497.3438 L2047.2031,502.4219 L2049.5313,502.4219 L2048.3594,497.3438 Z M2046.875,495.1094 L2049.8594,495.1094 L2053.2188,507.5 L2050.7656,507.5 L2050,504.4375 L2046.7188,504.4375 L2045.9688,507.5 L2043.5313,507.5 L2046.875,495.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="191" x="2068.75" y="506.1543">ObjectProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1807" x2="2489" y1="518" y2="518"/><ellipse cx="1817" cy="529" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1826" y="532.2104">captureRejections : boolean</text><ellipse cx="1817" cy="541.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1826" y="545.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1817" cy="554.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1826" y="557.8198">defaultMaxListeners : number</text><ellipse cx="1817" cy="567.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1826" y="570.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1817,575.2188,1821,579.2188,1817,583.2188,1813,579.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1826" y="583.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1807" x2="2489" y1="590.0234" y2="590.0234"/><ellipse cx="1817" cy="601.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="527" x="1826" y="604.2339">addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="613.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1826" y="617.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1817" cy="626.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1826" y="629.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1817" cy="639.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1826" y="642.6479">getMaxListeners() : number</text><ellipse cx="1817" cy="652.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1826" y="655.4526">getOptions() : NodeOptions</text><ellipse cx="1817" cy="665.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1826" y="668.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1817" cy="677.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1826" y="681.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1817" cy="690.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1826" y="693.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1817" cy="703.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1826" y="706.6714">off(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="716.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1826" y="719.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1817" cy="729.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1826" y="732.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1817" cy="741.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1826" y="745.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1817" cy="754.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="553" x="1826" y="757.8901">prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="767.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="582" x="1826" y="770.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="780.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1826" y="783.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1817" cy="793.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="599" x="1826" y="796.3042">processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise&lt;DataObject&gt;</text><ellipse cx="1817" cy="805.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1826" y="809.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1817" cy="818.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="430" x="1826" y="821.9136">removeAllListeners(event: string | symbol) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="831.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="549" x="1826" y="834.7183">removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="844.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="348" x="1826" y="847.5229">setMaxListeners(n: number) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1817" cy="857.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1826" y="860.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1817" cy="869.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="381" x="1826" y="873.1323">setOptions(options: NodeOptions) : ObjectProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1817,877.7266,1821,881.7266,1817,885.7266,1813,881.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1826" y="885.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1817,890.5313,1821,894.5313,1817,898.5313,1813,894.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1826" y="898.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1817,903.3359,1821,907.3359,1817,911.3359,1813,907.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1826" y="911.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1817,916.1406,1821,920.1406,1817,924.1406,1813,920.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1826" y="924.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[135c2d0e6265299568c7bceea7232ff0]
class ProcessingNode<InOut, InOut>--><rect codeLine="37" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="419.3359" id="ProcessingNode&lt;InOut, InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1806" y="7"/><ellipse cx="2047.25" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2047.3594,18.3438 L2046.2031,23.4219 L2048.5313,23.4219 L2047.3594,18.3438 Z M2045.875,16.1094 L2048.8594,16.1094 L2052.2188,28.5 L2049.7656,28.5 L2049,25.4375 L2045.7188,25.4375 L2044.9688,28.5 L2042.5313,28.5 L2045.875,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="193" x="2067.75" y="27.1543">ProcessingNode&lt;InOut, InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1807" x2="2489" y1="39" y2="39"/><ellipse cx="1817" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1826" y="53.2104">captureRejections : boolean</text><ellipse cx="1817" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1826" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1817" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1826" y="78.8198">defaultMaxListeners : number</text><ellipse cx="1817" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1826" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1817,96.2188,1821,100.2188,1817,104.2188,1813,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="1826" y="104.4292">options : ProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1807" x2="2489" y1="111.0234" y2="111.0234"/><ellipse cx="1817" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="529" x="1826" y="125.2339">addListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1826" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1817" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1826" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1817" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1826" y="163.6479">getMaxListeners() : number</text><ellipse cx="1817" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1826" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="1817" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1826" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1817" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1826" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1817" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1826" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1817" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="477" x="1826" y="227.6714">off(eventName: string | symbol, listener: Function) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1826" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1817" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1826" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1817" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1826" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1817" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="555" x="1826" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="584" x="1826" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="357" x="1826" y="304.4995">process(frame: InOut, options: PushOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1817" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1826" y="317.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1817" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="1826" y="330.1089">removeAllListeners(event: string | symbol) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="551" x="1826" y="342.9136">removeListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="350" x="1826" y="355.7183">setMaxListeners(n: number) : ProcessingNode&lt;InOut, InOut&gt;</text><ellipse cx="1817" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1826" y="368.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1817" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="1826" y="381.3276">setOptions(options: NodeOptions) : ProcessingNode&lt;InOut, InOut&gt;</text><polygon fill="#FFFF44" points="1817,385.9219,1821,389.9219,1817,393.9219,1813,389.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1826" y="394.1323">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1817,398.7266,1821,402.7266,1817,406.7266,1813,402.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1826" y="406.937">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1817,411.5313,1821,415.5313,1817,419.5313,1813,415.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1826" y="419.7417">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[140a748fa744c0524d4307e8be958edd]
class UnitConversionNode<InOut>--><rect codeLine="69" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="444.9453" id="UnitConversionNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="1010"/><ellipse cx="256.75" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M259.7188,1031.6406 Q259.1406,1031.9375 258.5,1032.0781 Q257.8594,1032.2344 257.1563,1032.2344 Q254.6563,1032.2344 253.3281,1030.5938 Q252.0156,1028.9375 252.0156,1025.8125 Q252.0156,1022.6875 253.3281,1021.0313 Q254.6563,1019.375 257.1563,1019.375 Q257.8594,1019.375 258.5,1019.5313 Q259.1563,1019.6875 259.7188,1019.9844 L259.7188,1022.7031 Q259.0938,1022.125 258.5,1021.8594 Q257.9063,1021.5781 257.2813,1021.5781 Q255.9375,1021.5781 255.25,1022.6563 Q254.5625,1023.7188 254.5625,1025.8125 Q254.5625,1027.9063 255.25,1028.9844 Q255.9375,1030.0469 257.2813,1030.0469 Q257.9063,1030.0469 258.5,1029.7813 Q259.0938,1029.5 259.7188,1028.9219 L259.7188,1031.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="180" x="277.25" y="1030.1543">UnitConversionNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1042" y2="1042"/><ellipse cx="20" cy="1053" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="1056.2104">captureRejections : boolean</text><ellipse cx="20" cy="1065.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="1069.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="1078.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="1081.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="1091.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1094.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1099.2188,24,1103.2188,20,1107.2188,16,1103.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="29" y="1107.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1114.0234" y2="1114.0234"/><ellipse cx="20" cy="1125.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="514" x="29" y="1128.2339">addListener(eventName: string | symbol, listener: Function) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1137.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1141.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1150.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1153.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1163.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1166.6479">getMaxListeners() : number</text><ellipse cx="20" cy="1176.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1179.4526">getOptions() : NodeOptions</text><ellipse cx="20" cy="1189.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1192.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1201.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1205.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1214.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1217.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1227.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="29" y="1230.6714">off(eventName: string | symbol, listener: Function) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1240.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1243.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1253.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1256.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1265.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1269.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1278.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="540" x="29" y="1281.8901">prependListener(eventName: string | symbol, listener: Function) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1291.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="569" x="29" y="1294.6948">prependOnceListener(eventName: string | symbol, listener: Function) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1304.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="29" y="1307.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="1317.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="29" y="1320.3042">processObject(object: DataObject) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="1329.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1333.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1342.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="29" y="1345.9136">removeAllListeners(event: string | symbol) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1355.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="536" x="29" y="1358.7183">removeListener(eventName: string | symbol, listener: Function) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1368.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="335" x="29" y="1371.5229">setMaxListeners(n: number) : UnitConversionNode&lt;InOut&gt;</text><ellipse cx="20" cy="1381.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1384.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1393.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="368" x="29" y="1397.1323">setOptions(options: NodeOptions) : UnitConversionNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1401.7266,24,1405.7266,20,1409.7266,16,1405.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="1409.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,1414.5313,24,1418.5313,20,1422.5313,16,1418.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="29" y="1422.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="20,1427.3359,24,1431.3359,20,1435.3359,16,1431.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="1435.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,1440.1406,24,1444.1406,20,1448.1406,16,1444.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="1448.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[2d915069d6bdd913f04324c89537f565]
class ReferenceSpaceConversionNode<InOut>--><rect codeLine="103" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="444.9453" id="ReferenceSpaceConversionNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="728" y="1010"/><ellipse cx="936.75" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M939.7188,1031.6406 Q939.1406,1031.9375 938.5,1032.0781 Q937.8594,1032.2344 937.1563,1032.2344 Q934.6563,1032.2344 933.3281,1030.5938 Q932.0156,1028.9375 932.0156,1025.8125 Q932.0156,1022.6875 933.3281,1021.0313 Q934.6563,1019.375 937.1563,1019.375 Q937.8594,1019.375 938.5,1019.5313 Q939.1563,1019.6875 939.7188,1019.9844 L939.7188,1022.7031 Q939.0938,1022.125 938.5,1021.8594 Q937.9063,1021.5781 937.2813,1021.5781 Q935.9375,1021.5781 935.25,1022.6563 Q934.5625,1023.7188 934.5625,1025.8125 Q934.5625,1027.9063 935.25,1028.9844 Q935.9375,1030.0469 937.2813,1030.0469 Q937.9063,1030.0469 938.5,1029.7813 Q939.0938,1029.5 939.7188,1028.9219 L939.7188,1031.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="258" x="957.25" y="1030.1543">ReferenceSpaceConversionNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1042" y2="1042"/><ellipse cx="739" cy="1053" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="748" y="1056.2104">captureRejections : boolean</text><ellipse cx="739" cy="1065.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="748" y="1069.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="739" cy="1078.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="748" y="1081.8198">defaultMaxListeners : number</text><ellipse cx="739" cy="1091.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="748" y="1094.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="739,1099.2188,743,1103.2188,739,1107.2188,735,1103.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="197" x="748" y="1107.4292">options : SpaceConversionOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1114.0234" y2="1114.0234"/><ellipse cx="739" cy="1125.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="584" x="748" y="1128.2339">addListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1137.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="748" y="1141.0386">eventNames() : (string | symbol)[]</text><ellipse cx="739" cy="1150.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="748" y="1153.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="739" cy="1163.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="748" y="1166.6479">getMaxListeners() : number</text><ellipse cx="739" cy="1176.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="748" y="1179.4526">getOptions() : NodeOptions</text><ellipse cx="739" cy="1189.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="748" y="1192.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="739" cy="1201.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="748" y="1205.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="739" cy="1214.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="748" y="1217.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1227.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="532" x="748" y="1230.6714">off(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1240.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="748" y="1243.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="739" cy="1253.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="748" y="1256.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1265.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="748" y="1269.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1278.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="610" x="748" y="1281.8901">prependListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1291.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="639" x="748" y="1294.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1304.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="748" y="1307.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="739" cy="1317.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="748" y="1320.3042">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="739" cy="1329.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="748" y="1333.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1342.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="487" x="748" y="1345.9136">removeAllListeners(event: string | symbol) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1355.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="606" x="748" y="1358.7183">removeListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1368.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="748" y="1371.5229">setMaxListeners(n: number) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><ellipse cx="739" cy="1381.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="748" y="1384.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="739" cy="1393.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="438" x="748" y="1397.1323">setOptions(options: NodeOptions) : ReferenceSpaceConversionNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1401.7266,743,1405.7266,739,1409.7266,735,1405.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="748" y="1409.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="739,1414.5313,743,1418.5313,739,1422.5313,735,1418.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="748" y="1422.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="739,1427.3359,743,1431.3359,739,1435.3359,735,1431.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="748" y="1435.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="739,1440.1406,743,1444.1406,739,1448.1406,735,1444.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="748" y="1448.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[9083499a8eeacf3b1700cfe65c31ab7c]
class FilterProcessingNode<InOut>--><rect codeLine="137" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="470.5547" id="FilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1447" y="997"/><ellipse cx="1693.25" cy="1013" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1693.3594,1008.3438 L1692.2031,1013.4219 L1694.5313,1013.4219 L1693.3594,1008.3438 Z M1691.875,1006.1094 L1694.8594,1006.1094 L1698.2188,1018.5 L1695.7656,1018.5 L1695,1015.4375 L1691.7188,1015.4375 L1690.9688,1018.5 L1688.5313,1018.5 L1691.875,1006.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="183" x="1713.75" y="1017.1543">FilterProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="1029" y2="1029"/><ellipse cx="1458" cy="1040" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1467" y="1043.2104">captureRejections : boolean</text><ellipse cx="1458" cy="1052.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1467" y="1056.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1458" cy="1065.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1467" y="1068.8198">defaultMaxListeners : number</text><ellipse cx="1458" cy="1078.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1467" y="1081.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1458,1086.2188,1462,1090.2188,1458,1094.2188,1454,1090.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="189" x="1467" y="1094.4292">options : FilterProcessingOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="1101.0234" y2="1101.0234"/><ellipse cx="1458" cy="1112.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="519" x="1467" y="1115.2339">addListener(eventName: string | symbol, listener: Function) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1124.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1467" y="1128.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1458" cy="1137.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="608" x="1467" y="1140.8433">filter(object: DataObject, frame: InOut, filter: any, options: FilterProcessingOptions) : Promise&lt;DataObject&gt;</text><ellipse cx="1458" cy="1150.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1467" y="1153.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1458" cy="1163.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1467" y="1166.4526">getMaxListeners() : number</text><ellipse cx="1458" cy="1176.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1467" y="1179.2573">getOptions() : NodeOptions</text><ellipse cx="1458" cy="1188.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="523" x="1467" y="1192.062">initFilter(object: DataObject, frame: InOut, options: FilterProcessingOptions) : Promise&lt;any&gt;</text><ellipse cx="1458" cy="1201.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1467" y="1204.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1458" cy="1214.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1467" y="1217.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1458" cy="1227.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1467" y="1230.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1240.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="1467" y="1243.2808">off(eventName: string | symbol, listener: Function) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1252.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1467" y="1256.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1458" cy="1265.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1467" y="1268.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1278.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1467" y="1281.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1291.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="545" x="1467" y="1294.4995">prependListener(eventName: string | symbol, listener: Function) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1304.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="574" x="1467" y="1307.3042">prependOnceListener(eventName: string | symbol, listener: Function) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1316.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1467" y="1320.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1458" cy="1329.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="1467" y="1332.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1458" cy="1342.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1467" y="1345.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1355.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="1358.5229">removeAllListeners(event: string | symbol) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1368.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="541" x="1467" y="1371.3276">removeListener(eventName: string | symbol, listener: Function) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1380.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="340" x="1467" y="1384.1323">setMaxListeners(n: number) : FilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1393.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1467" y="1396.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1458" cy="1406.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="373" x="1467" y="1409.7417">setOptions(options: NodeOptions) : FilterProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1458,1414.3359,1462,1418.3359,1458,1422.3359,1454,1418.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1467" y="1422.5464">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1458,1427.1406,1462,1431.1406,1458,1435.1406,1454,1431.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1467" y="1435.3511">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1458,1439.9453,1462,1443.9453,1458,1447.9453,1454,1443.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="1448.1558">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1458,1452.75,1462,1456.75,1458,1460.75,1454,1456.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1467" y="1460.9604">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[5c1e6fce4365e56468cf60e0107291cc]
class PropertyFilterProcessingNode<InOut>--><rect codeLine="173" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="483.3594" id="PropertyFilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="2166" y="991"/><ellipse cx="2385.75" cy="1007" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2385.8594,1002.3438 L2384.7031,1007.4219 L2387.0313,1007.4219 L2385.8594,1002.3438 Z M2384.375,1000.1094 L2387.3594,1000.1094 L2390.7188,1012.5 L2388.2656,1012.5 L2387.5,1009.4375 L2384.2188,1009.4375 L2383.4688,1012.5 L2381.0313,1012.5 L2384.375,1000.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="236" x="2406.25" y="1011.1543">PropertyFilterProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="1023" y2="1023"/><ellipse cx="2177" cy="1034" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="2186" y="1037.2104">captureRejections : boolean</text><ellipse cx="2177" cy="1046.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="2186" y="1050.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="2177" cy="1059.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="2186" y="1062.8198">defaultMaxListeners : number</text><ellipse cx="2177" cy="1072.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2186" y="1075.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="2177,1080.2188,2181,1084.2188,2177,1088.2188,2173,1084.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2186" y="1088.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="1095.0234" y2="1095.0234"/><ellipse cx="2177" cy="1106.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="567" x="2186" y="1109.2339">addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1118.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="2186" y="1122.0386">eventNames() : (string | symbol)[]</text><ellipse cx="2177" cy="1131.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="552" x="2186" y="1134.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise&lt;T&gt;</text><ellipse cx="2177" cy="1144.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="2186" y="1147.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="2177" cy="1157.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2186" y="1160.4526">getMaxListeners() : number</text><ellipse cx="2177" cy="1170.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="2186" y="1173.2573">getOptions() : NodeOptions</text><ellipse cx="2177" cy="1182.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="522" x="2186" y="1186.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: FilterProcessingOptions) : Promise&lt;any&gt;</text><ellipse cx="2177" cy="1195.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2186" y="1198.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="2177" cy="1208.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="2186" y="1211.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="2177" cy="1221.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2186" y="1224.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1234.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="515" x="2186" y="1237.2808">off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1246.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="2186" y="1250.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="2177" cy="1259.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="2186" y="1262.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1272.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="2186" y="1275.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1285.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="593" x="2186" y="1288.4995">prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1298.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="622" x="2186" y="1301.3042">prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1310.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="2186" y="1314.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="2177" cy="1323.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="2186" y="1326.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="2177" cy="1336.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2186" y="1339.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1349.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="470" x="2186" y="1352.5229">removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1362.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="589" x="2186" y="1365.3276">removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1374.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="2186" y="1378.1323">setMaxListeners(n: number) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1387.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2186" y="1390.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="2177" cy="1400.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="421" x="2186" y="1403.7417">setOptions(options: NodeOptions) : PropertyFilterProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="2177,1408.3359,2181,1412.3359,2177,1416.3359,2173,1412.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="2186" y="1416.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="2177,1421.1406,2181,1425.1406,2177,1429.1406,2173,1425.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2186" y="1429.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="2177,1433.9453,2181,1437.9453,2177,1441.9453,2173,1437.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="2186" y="1442.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="2177,1446.75,2181,1450.75,2177,1454.75,2173,1450.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="2186" y="1454.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="2177,1459.5547,2181,1463.5547,2177,1467.5547,2173,1463.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="2186" y="1467.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[7ffd5ac383842b25700f3e4bbd162597]
class RelativePositionProcessing<InOut, R>--><rect codeLine="210" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="457.75" id="RelativePositionProcessing&lt;InOut, R&gt;" style="stroke:#A80036;stroke-width:1.5;" width="778" x="2885" y="1003.5"/><ellipse cx="3153.75" cy="1019.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3153.8594,1014.8438 L3152.7031,1019.9219 L3155.0313,1019.9219 L3153.8594,1014.8438 Z M3152.375,1012.6094 L3155.3594,1012.6094 L3158.7188,1025 L3156.2656,1025 L3155.5,1021.9375 L3152.2188,1021.9375 L3151.4688,1025 L3149.0313,1025 L3152.375,1012.6094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="232" x="3174.25" y="1023.6543">RelativePositionProcessing&lt;InOut, R&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2886" x2="3662" y1="1035.5" y2="1035.5"/><ellipse cx="2896" cy="1046.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="2905" y="1049.7104">captureRejections : boolean</text><ellipse cx="2896" cy="1059.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="2905" y="1062.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="2896" cy="1072.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="2905" y="1075.3198">defaultMaxListeners : number</text><ellipse cx="2896" cy="1084.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2905" y="1088.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="2896,1092.7188,2900,1096.7188,2896,1100.7188,2892,1096.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2905" y="1100.9292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2886" x2="3662" y1="1107.5234" y2="1107.5234"/><ellipse cx="2896" cy="1118.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="566" x="2905" y="1121.7339">addListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1131.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="2905" y="1134.5386">eventNames() : (string | symbol)[]</text><ellipse cx="2896" cy="1144.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="2905" y="1147.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="2896" cy="1156.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2905" y="1160.1479">getMaxListeners() : number</text><ellipse cx="2896" cy="1169.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="2905" y="1172.9526">getOptions() : NodeOptions</text><ellipse cx="2896" cy="1182.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2905" y="1185.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="2896" cy="1195.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="2905" y="1198.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="2896" cy="1208.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2905" y="1211.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="2896" cy="1220.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="514" x="2905" y="1224.1714">off(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1233.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="2905" y="1236.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="2896" cy="1246.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="2905" y="1249.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2896" cy="1259.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="2905" y="1262.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2896" cy="1272.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="592" x="2905" y="1275.3901">prependListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1284.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="621" x="2905" y="1288.1948">prependOnceListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1297.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="2905" y="1300.9995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="2896" cy="1310.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="2905" y="1313.8042">processObject(dataObject: DataObject, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="2896" cy="1323.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="752" x="2905" y="1326.6089">processRelativePositions(dataObject: DataObject, relativePositions: Map&lt;R, DataObject&gt;, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="2896" cy="1336.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2905" y="1339.4136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="2896" cy="1349.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="469" x="2905" y="1352.2183">removeAllListeners(event: string | symbol) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1361.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="588" x="2905" y="1365.0229">removeListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1374.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="387" x="2905" y="1377.8276">setMaxListeners(n: number) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="2896" cy="1387.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2905" y="1390.6323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="2896" cy="1400.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="2905" y="1403.437">setOptions(options: NodeOptions) : RelativePositionProcessing&lt;InOut, R&gt;</text><polygon fill="#FFFF44" points="2896,1408.0313,2900,1412.0313,2896,1416.0313,2892,1412.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2905" y="1416.2417">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="2896,1420.8359,2900,1424.8359,2896,1428.8359,2892,1424.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="2905" y="1429.0464">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="2896,1433.6406,2900,1437.6406,2896,1441.6406,2892,1437.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="2905" y="1441.8511">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="2896,1446.4453,2900,1450.4453,2896,1454.4453,2892,1450.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="2905" y="1454.6558">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[6eac2bc4dcfbbc374adacf5949f54a2d]
class AccuracyModifierNode<InOut>--><rect codeLine="245" fill="#FEFECE" filter="url(#f1synpxrpcc16l)" height="444.9453" id="AccuracyModifierNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="3698" y="1010"/><ellipse cx="3940.25" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3943.2188,1031.6406 Q3942.6406,1031.9375 3942,1032.0781 Q3941.3594,1032.2344 3940.6563,1032.2344 Q3938.1563,1032.2344 3936.8281,1030.5938 Q3935.5156,1028.9375 3935.5156,1025.8125 Q3935.5156,1022.6875 3936.8281,1021.0313 Q3938.1563,1019.375 3940.6563,1019.375 Q3941.3594,1019.375 3942,1019.5313 Q3942.6563,1019.6875 3943.2188,1019.9844 L3943.2188,1022.7031 Q3942.5938,1022.125 3942,1021.8594 Q3941.4063,1021.5781 3940.7813,1021.5781 Q3939.4375,1021.5781 3938.75,1022.6563 Q3938.0625,1023.7188 3938.0625,1025.8125 Q3938.0625,1027.9063 3938.75,1028.9844 Q3939.4375,1030.0469 3940.7813,1030.0469 Q3941.4063,1030.0469 3942,1029.7813 Q3942.5938,1029.5 3943.2188,1028.9219 L3943.2188,1031.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="191" x="3960.75" y="1030.1543">AccuracyModifierNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3699" x2="4381" y1="1042" y2="1042"/><ellipse cx="3709" cy="1053" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="3718" y="1056.2104">captureRejections : boolean</text><ellipse cx="3709" cy="1065.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="3718" y="1069.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="3709" cy="1078.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="3718" y="1081.8198">defaultMaxListeners : number</text><ellipse cx="3709" cy="1091.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="3718" y="1094.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="3709,1099.2188,3713,1103.2188,3709,1107.2188,3705,1103.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="3718" y="1107.4292">options : AccuracyModifierOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3699" x2="4381" y1="1114.0234" y2="1114.0234"/><ellipse cx="3709" cy="1125.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="3718" y="1128.2339">addListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1137.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="3718" y="1141.0386">eventNames() : (string | symbol)[]</text><ellipse cx="3709" cy="1150.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="3718" y="1153.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="3709" cy="1163.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="3718" y="1166.6479">getMaxListeners() : number</text><ellipse cx="3709" cy="1176.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="3718" y="1179.4526">getOptions() : NodeOptions</text><ellipse cx="3709" cy="1189.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="3718" y="1192.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="3709" cy="1201.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="3718" y="1205.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="3709" cy="1214.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="3718" y="1217.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="3709" cy="1227.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="471" x="3718" y="1230.6714">off(eventName: string | symbol, listener: Function) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1240.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="3718" y="1243.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="3709" cy="1253.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="3718" y="1256.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="3709" cy="1265.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="3718" y="1269.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="3709" cy="1278.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="549" x="3718" y="1281.8901">prependListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1291.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="578" x="3718" y="1294.6948">prependOnceListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1304.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="3718" y="1307.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="3709" cy="1317.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="3718" y="1320.3042">processObject(object: DataObject) : Promise&lt;DataObject&gt;</text><ellipse cx="3709" cy="1329.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="3718" y="1333.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="3709" cy="1342.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="426" x="3718" y="1345.9136">removeAllListeners(event: string | symbol) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1355.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="545" x="3718" y="1358.7183">removeListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1368.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="344" x="3718" y="1371.5229">setMaxListeners(n: number) : AccuracyModifierNode&lt;InOut&gt;</text><ellipse cx="3709" cy="1381.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="3718" y="1384.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="3709" cy="1393.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="377" x="3718" y="1397.1323">setOptions(options: NodeOptions) : AccuracyModifierNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="3709,1401.7266,3713,1405.7266,3709,1409.7266,3705,1405.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="3718" y="1409.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="3709,1414.5313,3713,1418.5313,3709,1422.5313,3705,1418.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="3718" y="1422.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="3709,1427.3359,3713,1431.3359,3709,1435.3359,3705,1431.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="3718" y="1435.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="3709,1440.1406,3713,1444.1406,3709,1448.1406,3705,1444.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="3718" y="1448.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[4c4a53d8b06e436718514565576bfa94]
reverse link ProcessingNode<InOut, InOut> to ObjectProcessingNode<InOut>--><path codeLine="68" d="M2148,446.06 C2148,459.31 2148,472.62 2148,485.85 " fill="none" id="ProcessingNode&lt;InOut, InOut&gt;-backto-ObjectProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2141,446.01,2148,426.01,2155,446.01,2141,446.01" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2b06040b95469858fef9fbad2b9e9a0c]
reverse link ObjectProcessingNode<InOut> to UnitConversionNode<InOut>--><path codeLine="102" d="M1785.92,740.31 C1488.03,774.98 1059.52,846.6 710,991 C696.05,996.76 682.07,1003.11 668.15,1009.91 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-UnitConversionNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1785.12,733.35,1805.79,738.03,1786.72,747.26,1785.12,733.35" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8fabb7b6149639930fca0430565f7fd1]
reverse link ObjectProcessingNode<InOut> to ReferenceSpaceConversionNode<InOut>--><path codeLine="136" d="M1786.69,833.38 C1670.13,877.95 1541.93,931.96 1429,991 C1417.45,997.04 1405.81,1003.37 1394.15,1009.91 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-ReferenceSpaceConversionNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1784.49,826.73,1805.67,826.17,1789.46,839.82,1784.49,826.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7ad719a2cfa2312d5dae3d5f8e32a1d7]
reverse link ObjectProcessingNode<InOut> to FilterProcessingNode<InOut>--><path codeLine="172" d="M1984.1,947.81 C1972.91,964.08 1961.64,980.47 1950.47,996.72 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-FilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1978.39,943.77,1995.49,931.25,1989.93,951.7,1978.39,943.77" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a2bfc0801b07b258266f079173d6a1a0]
reverse link ObjectProcessingNode<InOut> to PropertyFilterProcessingNode<InOut>--><path codeLine="209" d="M2312.45,947.95 C2322.29,962.22 2332.19,976.58 2342.04,990.85 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-PropertyFilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2306.53,951.69,2300.93,931.25,2318.05,943.74,2306.53,951.69" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[20102bd41880321f3b990d95b08f0268]
reverse link ObjectProcessingNode<InOut> to RelativePositionProcessing<InOut, R>--><path codeLine="244" d="M2509.23,837.58 C2625.5,882.27 2753.75,935.28 2868,991 C2876.28,995.04 2884.62,999.19 2893,1003.43 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-RelativePositionProcessing&lt;InOut, R&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2506.49,844.02,2490.31,830.33,2511.49,830.94,2506.49,844.02" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[38e05d7f8e35851813ae9bcf291c8b17]
reverse link ObjectProcessingNode<InOut> to AccuracyModifierNode<InOut>--><path codeLine="278" d="M2510.54,734.25 C2828.74,765.64 3299.05,835.81 3681,991 C3695.16,996.75 3709.34,1003.11 3723.45,1009.95 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-AccuracyModifierNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2509.51,741.18,2490.28,732.28,2510.86,727.25,2509.51,741.18" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[469bda23443101c2a3afde880cbf97a5]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
abstract class "ObjectProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    {abstract} +processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ObjectProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +setMaxListeners(n: number) : ObjectProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ObjectProcessingNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
abstract class "ProcessingNode<InOut, InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ProcessingNode<InOut, InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ProcessingNode<InOut, InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ProcessingNode<InOut, InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode<InOut, InOut>
    {abstract} +process(frame: InOut, options: PushOptions) : Promise<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ProcessingNode<InOut, InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ProcessingNode<InOut, InOut>
    +setMaxListeners(n: number) : ProcessingNode<InOut, InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ProcessingNode<InOut, InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ProcessingNode<InOut, InOut>" <|- - "ObjectProcessingNode<InOut>"
class "UnitConversionNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : UnitConversionNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : UnitConversionNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : UnitConversionNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : UnitConversionNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : UnitConversionNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : UnitConversionNode<InOut>
    +setMaxListeners(n: number) : UnitConversionNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : UnitConversionNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "UnitConversionNode<InOut>"
class "ReferenceSpaceConversionNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SpaceConversionOptions
    +addListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ReferenceSpaceConversionNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ReferenceSpaceConversionNode<InOut>
    +setMaxListeners(n: number) : ReferenceSpaceConversionNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ReferenceSpaceConversionNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "ReferenceSpaceConversionNode<InOut>"
abstract class "FilterProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : FilterProcessingOptions
    +addListener(eventName: string | symbol, listener: Function) : FilterProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {abstract} +filter(object: DataObject, frame: InOut, filter: any, options: FilterProcessingOptions) : Promise<DataObject>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    {abstract} +initFilter(object: DataObject, frame: InOut, options: FilterProcessingOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FilterProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FilterProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FilterProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FilterProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FilterProcessingNode<InOut>
    +setMaxListeners(n: number) : FilterProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FilterProcessingNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "FilterProcessingNode<InOut>"
abstract class "PropertyFilterProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {abstract} +filter<T>(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    {abstract} +initFilter<T>(object: DataObject, value: T, options: FilterProcessingOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +setMaxListeners(n: number) : PropertyFilterProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : PropertyFilterProcessingNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "PropertyFilterProcessingNode<InOut>"
abstract class "RelativePositionProcessing<InOut, R>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +prependOnceListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(dataObject: DataObject, dataFrame: InOut) : Promise<DataObject>
    {abstract} +processRelativePositions(dataObject: DataObject, relativePositions: Map<R, DataObject>, dataFrame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : RelativePositionProcessing<InOut, R>
    +removeListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +setMaxListeners(n: number) : RelativePositionProcessing<InOut, R>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : RelativePositionProcessing<InOut, R>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "RelativePositionProcessing<InOut, R>"
class "AccuracyModifierNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : AccuracyModifierOptions
    +addListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : AccuracyModifierNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : AccuracyModifierNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : AccuracyModifierNode<InOut>
    +setMaxListeners(n: number) : AccuracyModifierNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : AccuracyModifierNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "AccuracyModifierNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>