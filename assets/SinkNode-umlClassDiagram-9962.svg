<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1335px" preserveAspectRatio="none" style="width:1426px;height:1335px;background:#00000000;" version="1.1" viewBox="0 0 1426 1335" width="1426px" zoomAndPan="magnify"><defs><filter height="300%" id="fzo8qbgeo1czm" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[58268fbb8c2ac4a465cb59c4a34e4a3d]
class SinkNode<In>--><rect codeLine="4" fill="#FEFECE" filter="url(#fzo8qbgeo1czm)" height="406.5313" id="SinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="368" y="435"/><ellipse cx="660.25" cy="451" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M660.3594,446.3438 L659.2031,451.4219 L661.5313,451.4219 L660.3594,446.3438 Z M658.875,444.1094 L661.8594,444.1094 L665.2188,456.5 L662.7656,456.5 L662,453.4375 L658.7188,453.4375 L657.9688,456.5 L655.5313,456.5 L658.875,444.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="91" x="680.75" y="455.1543">SinkNode&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="467" y2="467"/><ellipse cx="379" cy="478" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="388" y="481.2104">captureRejections : boolean</text><ellipse cx="379" cy="490.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="388" y="494.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="379" cy="503.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="388" y="506.8198">defaultMaxListeners : number</text><ellipse cx="379" cy="516.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="388" y="519.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="379,524.2188,383,528.2188,379,532.2188,375,528.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="388" y="532.4292">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="539.0234" y2="539.0234"/><ellipse cx="379" cy="550.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="388" y="553.2339">addListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="562.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="388" y="566.0386">eventNames() : (string | symbol)[]</text><ellipse cx="379" cy="575.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="388" y="578.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="379" cy="588.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="388" y="591.6479">getMaxListeners() : number</text><ellipse cx="379" cy="601.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="388" y="604.4526">getOptions() : NodeOptions</text><ellipse cx="379" cy="614.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="388" y="617.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="379" cy="626.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="388" y="630.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="379" cy="639.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="388" y="642.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="652.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="380" x="388" y="655.6714">off(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="665.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="388" y="668.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="379" cy="678.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="388" y="681.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="690.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="388" y="694.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="703.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="358" x="388" y="706.8901">onPush(frame: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="379" cy="716.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="458" x="388" y="719.6948">prependListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="729.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="487" x="388" y="732.4995">prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="742.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="388" y="745.3042">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="379" cy="754.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="388" y="758.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="767.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="335" x="388" y="770.9136">removeAllListeners(event: string | symbol) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="780.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="454" x="388" y="783.7183">removeListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="793.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="253" x="388" y="796.5229">setMaxListeners(n: number) : SinkNode&lt;In&gt;</text><ellipse cx="379" cy="806.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="388" y="809.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="379" cy="818.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="388" y="822.1323">setOptions(options: NodeOptions) : SinkNode&lt;In&gt;</text><polygon fill="#FFFF44" points="379,826.7266,383,830.7266,379,834.7266,375,830.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="388" y="834.937">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[6e1a6464fe74a4a14305340c9a618a11]
class Node<In, In>--><rect codeLine="34" fill="#FEFECE" filter="url(#fzo8qbgeo1czm)" height="368.1172" id="Node&lt;In, In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="368" y="7"/><ellipse cx="664.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M667.2188,28.6406 Q666.6406,28.9375 666,29.0781 Q665.3594,29.2344 664.6563,29.2344 Q662.1563,29.2344 660.8281,27.5938 Q659.5156,25.9375 659.5156,22.8125 Q659.5156,19.6875 660.8281,18.0313 Q662.1563,16.375 664.6563,16.375 Q665.3594,16.375 666,16.5313 Q666.6563,16.6875 667.2188,16.9844 L667.2188,19.7031 Q666.5938,19.125 666,18.8594 Q665.4063,18.5781 664.7813,18.5781 Q663.4375,18.5781 662.75,19.6563 Q662.0625,20.7188 662.0625,22.8125 Q662.0625,24.9063 662.75,25.9844 Q663.4375,27.0469 664.7813,27.0469 Q665.4063,27.0469 666,26.7813 Q666.5938,26.5 667.2188,25.9219 L667.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="83" x="684.75" y="27.1543">Node&lt;In, In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="39" y2="39"/><ellipse cx="379" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="388" y="53.2104">captureRejections : boolean</text><ellipse cx="379" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="388" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="379" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="388" y="78.8198">defaultMaxListeners : number</text><ellipse cx="379" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="388" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="379,96.2188,383,100.2188,379,104.2188,375,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="388" y="104.4292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="111.0234" y2="111.0234"/><ellipse cx="379" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="426" x="388" y="125.2339">addListener(eventName: string | symbol, listener: Function) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="388" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="379" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="388" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="379" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="388" y="163.6479">getMaxListeners() : number</text><ellipse cx="379" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="388" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="379" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="388" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="379" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="388" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="379" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="388" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="374" x="388" y="227.6714">off(eventName: string | symbol, listener: Function) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="388" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="379" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="388" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="388" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="452" x="388" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="481" x="388" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="388" y="304.4995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="388" y="317.3042">removeAllListeners(event: string | symbol) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="448" x="388" y="330.1089">removeListener(eventName: string | symbol, listener: Function) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="247" x="388" y="342.9136">setMaxListeners(n: number) : Node&lt;In, In&gt;</text><ellipse cx="379" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="388" y="355.7183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="379" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="280" x="388" y="368.5229">setOptions(options: NodeOptions) : Node&lt;In, In&gt;</text><!--MD5=[cc12a55b7b1d4c7f3ffb9787ecda070f]
class CallbackSinkNode<In>--><rect codeLine="62" fill="#FEFECE" filter="url(#fzo8qbgeo1czm)" height="419.3359" id="CallbackSinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="902"/><ellipse cx="275.75" cy="918" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M278.7188,923.6406 Q278.1406,923.9375 277.5,924.0781 Q276.8594,924.2344 276.1563,924.2344 Q273.6563,924.2344 272.3281,922.5938 Q271.0156,920.9375 271.0156,917.8125 Q271.0156,914.6875 272.3281,913.0313 Q273.6563,911.375 276.1563,911.375 Q276.8594,911.375 277.5,911.5313 Q278.1563,911.6875 278.7188,911.9844 L278.7188,914.7031 Q278.0938,914.125 277.5,913.8594 Q276.9063,913.5781 276.2813,913.5781 Q274.9375,913.5781 274.25,914.6563 Q273.5625,915.7188 273.5625,917.8125 Q273.5625,919.9063 274.25,920.9844 Q274.9375,922.0469 276.2813,922.0469 Q276.9063,922.0469 277.5,921.7813 Q278.0938,921.5 278.7188,920.9219 L278.7188,923.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="142" x="296.25" y="922.1543">CallbackSinkNode&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="934" y2="934"/><ellipse cx="20" cy="945" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="104" x="29" y="948.2104">callback : Function</text><ellipse cx="20" cy="957.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="961.0151">captureRejections : boolean</text><ellipse cx="20" cy="970.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="973.8198">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="983.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="986.6245">defaultMaxListeners : number</text><ellipse cx="20" cy="996.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="999.4292">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1004.0234,24,1008.0234,20,1012.0234,16,1008.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="29" y="1012.2339">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1018.8281" y2="1018.8281"/><ellipse cx="20" cy="1029.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="479" x="29" y="1033.0386">addListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1042.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1045.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1055.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1058.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1068.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1071.4526">getMaxListeners() : number</text><ellipse cx="20" cy="1081.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1084.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="1093.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1097.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1106.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1109.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1119.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1122.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1132.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="427" x="29" y="1135.4761">off(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1145.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1148.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1157.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1161.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1170.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1173.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1183.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="332" x="29" y="1186.6948">onPush(frame: In, options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1196.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="29" y="1199.4995">prependListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1209.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="29" y="1212.3042">prependOnceListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1221.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="29" y="1225.1089">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1234.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1237.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1247.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="382" x="29" y="1250.7183">removeAllListeners(event: string | symbol) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1260.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="29" y="1263.5229">removeListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1273.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="300" x="29" y="1276.3276">setMaxListeners(n: number) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="1285.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1289.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1298.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="29" y="1301.937">setOptions(options: NodeOptions) : CallbackSinkNode&lt;In&gt;</text><polygon fill="#FFFF44" points="20,1306.5313,24,1310.5313,20,1314.5313,16,1310.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="29" y="1314.7417">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[6f3e9730bf407261842eaba7592e494d]
class RemoteSinkNode<In, S>--><rect codeLine="94" fill="#FEFECE" filter="url(#fzo8qbgeo1czm)" height="419.3359" id="RemoteSinkNode&lt;In, S&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="728" y="902"/><ellipse cx="988.75" cy="918" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M991.7188,923.6406 Q991.1406,923.9375 990.5,924.0781 Q989.8594,924.2344 989.1563,924.2344 Q986.6563,924.2344 985.3281,922.5938 Q984.0156,920.9375 984.0156,917.8125 Q984.0156,914.6875 985.3281,913.0313 Q986.6563,911.375 989.1563,911.375 Q989.8594,911.375 990.5,911.5313 Q991.1563,911.6875 991.7188,911.9844 L991.7188,914.7031 Q991.0938,914.125 990.5,913.8594 Q989.9063,913.5781 989.2813,913.5781 Q987.9375,913.5781 987.25,914.6563 Q986.5625,915.7188 986.5625,917.8125 Q986.5625,919.9063 987.25,920.9844 Q987.9375,922.0469 989.2813,922.0469 Q989.9063,922.0469 990.5,921.7813 Q991.0938,921.5 991.7188,920.9219 L991.7188,923.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="154" x="1009.25" y="922.1543">RemoteSinkNode&lt;In, S&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="934" y2="934"/><ellipse cx="739" cy="945" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="748" y="948.2104">captureRejections : boolean</text><ellipse cx="739" cy="957.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="748" y="961.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="739" cy="970.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="748" y="973.8198">defaultMaxListeners : number</text><ellipse cx="739" cy="983.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="748" y="986.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="739,991.2188,743,995.2188,739,999.2188,735,995.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="748" y="999.4292">options : SinkNodeOptions</text><polygon fill="none" points="739,1004.0234,743,1008.0234,739,1012.0234,735,1008.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="748" y="1012.2339">remoteNode : RemoteNode&lt;In, In, S&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1018.8281" y2="1018.8281"/><ellipse cx="739" cy="1029.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="748" y="1033.0386">addListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1042.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="748" y="1045.8433">eventNames() : (string | symbol)[]</text><ellipse cx="739" cy="1055.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="748" y="1058.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="739" cy="1068.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="748" y="1071.4526">getMaxListeners() : number</text><ellipse cx="739" cy="1081.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="748" y="1084.2573">getOptions() : NodeOptions</text><ellipse cx="739" cy="1093.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="748" y="1097.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="739" cy="1106.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="748" y="1109.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="739" cy="1119.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="748" y="1122.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1132.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="439" x="748" y="1135.4761">off(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1145.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="748" y="1148.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="739" cy="1157.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="748" y="1161.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1170.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="748" y="1173.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1183.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="748" y="1186.6948">onPush(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="739" cy="1196.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="517" x="748" y="1199.4995">prependListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1209.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="546" x="748" y="1212.3042">prependOnceListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1221.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="748" y="1225.1089">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="739" cy="1234.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="748" y="1237.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1247.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="394" x="748" y="1250.7183">removeAllListeners(event: string | symbol) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1260.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="513" x="748" y="1263.5229">removeListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1273.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="312" x="748" y="1276.3276">setMaxListeners(n: number) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="739" cy="1285.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="748" y="1289.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="739" cy="1298.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="345" x="748" y="1301.937">setOptions(options: NodeOptions) : RemoteSinkNode&lt;In, S&gt;</text><polygon fill="#FFFF44" points="739,1306.5313,743,1310.5313,739,1314.5313,735,1310.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="748" y="1314.7417">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[ae1c5a0854a6bebb77a72c909c8f7e19]
reverse link Node<In, In> to SinkNode<In>--><path codeLine="61" d="M710,395.55 C710,408.61 710,421.75 710,434.81 " fill="none" id="Node&lt;In, In&gt;-backto-SinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="703,395.13,710,375.13,717,395.13,703,395.13" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[68f73404ed884f55bb4fede0a1b6c547]
reverse link SinkNode<In> to CallbackSinkNode<In>--><path codeLine="93" d="M543.06,858.53 C532.09,872.92 521.05,887.4 510.12,901.74 " fill="none" id="SinkNode&lt;In&gt;-backto-CallbackSinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="537.72,853.98,555.41,842.32,548.85,862.47,537.72,853.98" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a841a53dbe0368e41115297b4c9f0e8e]
reverse link SinkNode<In> to RemoteSinkNode<In, S>--><path codeLine="125" d="M877.41,858.53 C888.41,872.92 899.47,887.4 910.44,901.74 " fill="none" id="SinkNode&lt;In&gt;-backto-RemoteSinkNode&lt;In, S&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="871.61,862.46,865.02,842.32,882.73,853.96,871.61,862.46" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2e783b6a455db76d466fa2ec1b805984]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
abstract class "SinkNode<In>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : SinkNode<In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    {abstract} +onPush(frame: In | In[], options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : SinkNode<In>
    +removeListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +setMaxListeners(n: number) : SinkNode<In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : SinkNode<In>
    #persistDataObject(frame: In) : Promise<void>
}
class "Node<In, In>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : Node<In, In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Node<In, In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : Node<In, In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Node<In, In>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Node<In, In>
    +removeListener(eventName: string | symbol, listener: Function) : Node<In, In>
    +setMaxListeners(n: number) : Node<In, In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : Node<In, In>
}
"Node<In, In>" <|- - "SinkNode<In>"
class "CallbackSinkNode<In>" {
    +callback : Function
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPush(frame: In, options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : CallbackSinkNode<In>
    +removeListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +setMaxListeners(n: number) : CallbackSinkNode<In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : CallbackSinkNode<In>
    #persistDataObject(frame: In) : Promise<void>
}
"SinkNode<In>" <|- - "CallbackSinkNode<In>"
class "RemoteSinkNode<In, S>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    #remoteNode : RemoteNode<In, In, S>
    +addListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPush(data: In | In[], options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +prependOnceListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : RemoteSinkNode<In, S>
    +removeListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +setMaxListeners(n: number) : RemoteSinkNode<In, S>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : RemoteSinkNode<In, S>
    #persistDataObject(frame: In) : Promise<void>
}
"SinkNode<In>" <|- - "RemoteSinkNode<In, S>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>