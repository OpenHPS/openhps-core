<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="881px" preserveAspectRatio="none" style="width:544px;height:881px;background:#00000000;" version="1.1" viewBox="0 0 544 881" width="544px" zoomAndPan="magnify"><defs><filter height="300%" id="f1hcx98hv9qlpl" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[298a7c550ddd075bd1f568d122c5a1aa]
class Model<In, Out>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1hcx98hv9qlpl)" height="457.75" id="Model&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="521" x="8" y="410"/><ellipse cx="215.25" cy="426" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M211.1719,421.7656 L211.1719,419.6094 L218.5625,419.6094 L218.5625,421.7656 L216.0938,421.7656 L216.0938,429.8438 L218.5625,429.8438 L218.5625,432 L211.1719,432 L211.1719,429.8438 L213.6406,429.8438 L213.6406,421.7656 L211.1719,421.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="98" x="235.75" y="430.1543">Model&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9" x2="528" y1="442" y2="442"/><ellipse cx="19" cy="453" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="28" y="456.2104">edges : Edge&lt;any&gt;[]</text><ellipse cx="19" cy="465.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="28" y="469.0151">internalSink : GraphNode&lt;any, any&gt;</text><ellipse cx="19" cy="478.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="28" y="481.8198">internalSource : GraphNode&lt;any, any&gt;</text><ellipse cx="19" cy="491.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="28" y="494.6245">nodes : GraphNode&lt;any, any&gt;[]</text><ellipse cx="19" cy="504.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="28" y="507.4292">referenceSpace : TransformationSpace</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9" x2="528" y1="514.0234" y2="514.0234"/><ellipse cx="19" cy="525.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="28" y="528.2339">addEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="19" cy="537.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="440" x="28" y="541.0386">addListener(eventName: string | symbol, listener: Function) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="550.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="28" y="553.8433">addNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="19" cy="563.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="28" y="566.6479">deleteEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="19" cy="576.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="28" y="579.4526">deleteNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="19" cy="589.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="28" y="592.2573">destroy() : Promise&lt;boolean&gt;</text><ellipse cx="19" cy="601.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="28" y="605.062">eventNames() : (string | symbol)[]</text><ellipse cx="19" cy="614.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="336" x="28" y="617.8667">findAllDataServices&lt;T, S&gt;(dataType: Serializable&lt;T&gt;) : S[]</text><ellipse cx="19" cy="627.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="28" y="630.6714">findAllServices</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="150" x="111" y="630.6714">(serviceClass: Serializable</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="32" x="261" y="630.6714">) : S[]</text><ellipse cx="19" cy="640.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="213" x="28" y="643.4761">findDataService&lt;D, F&gt;(uid: string) : F</text><ellipse cx="19" cy="653.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="306" x="28" y="656.2808">findDataService&lt;D, F&gt;(dataType: Serializable&lt;D&gt;) : F</text><ellipse cx="19" cy="665.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="28" y="669.0854">findDataService&lt;D, F&gt;(object: D) : F</text><ellipse cx="19" cy="678.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="28" y="681.8901">findEdge(inlet: string, outlet: string) : Edge&lt;any&gt;</text><ellipse cx="19" cy="691.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="28" y="694.6948">findNodeByName(name: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="19" cy="704.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="28" y="707.4995">findNodeByUID(uid: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="19" cy="717.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="63" x="28" y="720.3042">findService</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="86" x="91" y="720.3042">(uid: string) : S</text><ellipse cx="19" cy="729.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="63" x="28" y="733.1089">findService</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="150" x="91" y="733.1089">(serviceClass: Serializable</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="24" x="241" y="733.1089">) : S</text><ellipse cx="19" cy="742.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="28" y="745.9136">getMaxListeners() : number</text><ellipse cx="19" cy="755.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="28" y="758.7183">listenerCount(eventName: string | symbol) : number</text><ellipse cx="19" cy="768.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="28" y="771.5229">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="19" cy="781.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="28" y="784.3276">off(eventName: string | symbol, listener: Function) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="793.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="466" x="28" y="797.1323">prependListener(eventName: string | symbol, listener: Function) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="806.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="495" x="28" y="809.937">prependOnceListener(eventName: string | symbol, listener: Function) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="819.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="28" y="822.7417">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="19" cy="832.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="28" y="835.5464">removeAllListeners(event: string | symbol) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="845.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="28" y="848.3511">removeListener(eventName: string | symbol, listener: Function) : Model&lt;In, Out&gt;</text><ellipse cx="19" cy="857.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="28" y="861.1558">setMaxListeners(n: number) : Model&lt;In, Out&gt;</text><!--MD5=[54323c5910643495d668630485ab5d20]
class Graph<In, Out>--><rect codeLine="38" fill="#FEFECE" filter="url(#f1hcx98hv9qlpl)" height="342.5078" id="Graph&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="523" x="7" y="7"/><ellipse cx="214.75" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M210.6719,18.7656 L210.6719,16.6094 L218.0625,16.6094 L218.0625,18.7656 L215.5938,18.7656 L215.5938,26.8438 L218.0625,26.8438 L218.0625,29 L210.6719,29 L210.6719,26.8438 L213.1406,26.8438 L213.1406,18.7656 L210.6719,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="99" x="235.25" y="27.1543">Graph&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="529" y1="39" y2="39"/><ellipse cx="18" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="27" y="53.2104">edges : Edge&lt;any&gt;[]</text><ellipse cx="18" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="27" y="66.0151">internalSink : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="27" y="78.8198">internalSource : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="27" y="91.6245">nodes : GraphNode&lt;any, any&gt;[]</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="529" y1="98.2188" y2="98.2188"/><ellipse cx="18" cy="109.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="27" y="112.4292">addEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="18" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="442" x="27" y="125.2339">addListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="27" y="138.0386">addNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="18" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="27" y="150.8433">deleteEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="18" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="27" y="163.6479">deleteNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="18" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="27" y="176.4526">eventNames() : (string | symbol)[]</text><ellipse cx="18" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="27" y="189.2573">findEdge(inlet: string, outlet: string) : Edge&lt;any&gt;</text><ellipse cx="18" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="27" y="202.062">findNodeByName(name: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="27" y="214.8667">findNodeByUID(uid: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="27" y="227.6714">getMaxListeners() : number</text><ellipse cx="18" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="27" y="240.4761">listenerCount(eventName: string | symbol) : number</text><ellipse cx="18" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="27" y="253.2808">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="390" x="27" y="266.0854">off(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="468" x="27" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="27" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="27" y="304.4995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="345" x="27" y="317.3042">removeAllListeners(event: string | symbol) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="464" x="27" y="330.1089">removeListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="18" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="342.9136">setMaxListeners(n: number) : Graph&lt;In, Out&gt;</text><!--MD5=[be34630ccbc1ea33a6c2991b81ed7bb5]
reverse link Graph<In, Out> to Model<In, Out>--><path codeLine="63" d="M268.5,370.5 C268.5,383.51 268.5,396.69 268.5,409.86 " fill="none" id="Graph&lt;In, Out&gt;-backto-Model&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="261.5,370.23,268.5,350.23,275.5,370.23,261.5,370.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e87c61f11ffe1e801f6a191307017938]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "Model<In, Out>" {
    +edges : Edge<any>[]
    +internalSink : GraphNode<any, any>
    +internalSource : GraphNode<any, any>
    +nodes : GraphNode<any, any>[]
    +referenceSpace : TransformationSpace
    +addEdge(edge: Edge<any>) : void
    +addListener(eventName: string | symbol, listener: Function) : Model<In, Out>
    +addNode(node: GraphNode<any, any>) : void
    +deleteEdge(edge: Edge<any>) : void
    +deleteNode(node: GraphNode<any, any>) : void
    +destroy() : Promise<boolean>
    +eventNames() : (string | symbol)[]
    +findAllDataServices<T, S>(dataType: Serializable<T>) : S[]
    +findAllServices<S>(serviceClass: Serializable<S>) : S[]
    +findDataService<D, F>(uid: string) : F
    +findDataService<D, F>(dataType: Serializable<D>) : F
    +findDataService<D, F>(object: D) : F
    +findEdge(inlet: string, outlet: string) : Edge<any>
    +findNodeByName(name: string) : GraphNode<any, any>
    +findNodeByUID(uid: string) : GraphNode<any, any>
    +findService<S>(uid: string) : S
    +findService<S>(serviceClass: Serializable<S>) : S
    +getMaxListeners() : number
    +listenerCount(eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Model<In, Out>
    +prependListener(eventName: string | symbol, listener: Function) : Model<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Model<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Model<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : Model<In, Out>
    +setMaxListeners(n: number) : Model<In, Out>
}
interface "Graph<In, Out>" {
    +edges : Edge<any>[]
    +internalSink : GraphNode<any, any>
    +internalSource : GraphNode<any, any>
    +nodes : GraphNode<any, any>[]
    +addEdge(edge: Edge<any>) : void
    +addListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +addNode(node: GraphNode<any, any>) : void
    +deleteEdge(edge: Edge<any>) : void
    +deleteNode(node: GraphNode<any, any>) : void
    +eventNames() : (string | symbol)[]
    +findEdge(inlet: string, outlet: string) : Edge<any>
    +findNodeByName(name: string) : GraphNode<any, any>
    +findNodeByUID(uid: string) : GraphNode<any, any>
    +getMaxListeners() : number
    +listenerCount(eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +prependListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Graph<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +setMaxListeners(n: number) : Graph<In, Out>
}
"Graph<In, Out>" <|- - "Model<In, Out>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>