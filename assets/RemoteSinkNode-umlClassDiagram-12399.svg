<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="907px" preserveAspectRatio="none" style="width:707px;height:907px;background:#00000000;" version="1.1" viewBox="0 0 707 907" width="707px" zoomAndPan="magnify"><defs><filter height="300%" id="f445p1l8rn4w4" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[6f3e9730bf407261842eaba7592e494d]
class RemoteSinkNode<In, S>--><rect codeLine="4" fill="#FEFECE" filter="url(#f445p1l8rn4w4)" height="419.3359" id="RemoteSinkNode&lt;In, S&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="474"/><ellipse cx="269.75" cy="490" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M272.7188,495.6406 Q272.1406,495.9375 271.5,496.0781 Q270.8594,496.2344 270.1563,496.2344 Q267.6563,496.2344 266.3281,494.5938 Q265.0156,492.9375 265.0156,489.8125 Q265.0156,486.6875 266.3281,485.0313 Q267.6563,483.375 270.1563,483.375 Q270.8594,483.375 271.5,483.5313 Q272.1563,483.6875 272.7188,483.9844 L272.7188,486.7031 Q272.0938,486.125 271.5,485.8594 Q270.9063,485.5781 270.2813,485.5781 Q268.9375,485.5781 268.25,486.6563 Q267.5625,487.7188 267.5625,489.8125 Q267.5625,491.9063 268.25,492.9844 Q268.9375,494.0469 270.2813,494.0469 Q270.9063,494.0469 271.5,493.7813 Q272.0938,493.5 272.7188,492.9219 L272.7188,495.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="154" x="290.25" y="494.1543">RemoteSinkNode&lt;In, S&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="506" y2="506"/><ellipse cx="20" cy="517" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="520.2104">captureRejections : boolean</text><ellipse cx="20" cy="529.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="533.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="542.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="545.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="555.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="558.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,563.2188,24,567.2188,20,571.2188,16,567.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="29" y="571.4292">options : SinkNodeOptions</text><polygon fill="none" points="20,576.0234,24,580.0234,20,584.0234,16,580.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="29" y="584.2339">remoteNode : RemoteNode&lt;In, In, S&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="590.8281" y2="590.8281"/><ellipse cx="20" cy="601.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="29" y="605.0386">addListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="614.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="617.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="627.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="630.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="640.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="643.4526">getMaxListeners() : number</text><ellipse cx="20" cy="653.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="656.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="665.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="669.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="678.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="681.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="691.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="694.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="704.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="439" x="29" y="707.4761">off(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="717.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="720.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="729.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="733.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="742.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="745.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="755.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="29" y="758.6948">onPush(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="768.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="517" x="29" y="771.4995">prependListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="781.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="546" x="29" y="784.3042">prependOnceListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="793.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="29" y="797.1089">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="806.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="809.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="819.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="394" x="29" y="822.7183">removeAllListeners(event: string | symbol) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="832.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="513" x="29" y="835.5229">removeListener(eventName: string | symbol, listener: Function) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="845.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="312" x="29" y="848.3276">setMaxListeners(n: number) : RemoteSinkNode&lt;In, S&gt;</text><ellipse cx="20" cy="857.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="861.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="870.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="345" x="29" y="873.937">setOptions(options: NodeOptions) : RemoteSinkNode&lt;In, S&gt;</text><polygon fill="#FFFF44" points="20,878.5313,24,882.5313,20,886.5313,16,882.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="29" y="886.7417">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[58268fbb8c2ac4a465cb59c4a34e4a3d]
class SinkNode<In>--><rect codeLine="35" fill="#FEFECE" filter="url(#f445p1l8rn4w4)" height="406.5313" id="SinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="7"/><ellipse cx="301.25" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M301.3594,18.3438 L300.2031,23.4219 L302.5313,23.4219 L301.3594,18.3438 Z M299.875,16.1094 L302.8594,16.1094 L306.2188,28.5 L303.7656,28.5 L303,25.4375 L299.7188,25.4375 L298.9688,28.5 L296.5313,28.5 L299.875,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="91" x="321.75" y="27.1543">SinkNode&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="39" y2="39"/><ellipse cx="20" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="53.2104">captureRejections : boolean</text><ellipse cx="20" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="78.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,96.2188,24,100.2188,20,104.2188,16,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="29" y="104.4292">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="111.0234" y2="111.0234"/><ellipse cx="20" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="29" y="125.2339">addListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="163.6479">getMaxListeners() : number</text><ellipse cx="20" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="20" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="380" x="29" y="227.6714">off(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="358" x="29" y="278.8901">onPush(frame: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="458" x="29" y="291.6948">prependListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="487" x="29" y="304.4995">prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="29" y="317.3042">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="330.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="335" x="29" y="342.9136">removeAllListeners(event: string | symbol) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="454" x="29" y="355.7183">removeListener(eventName: string | symbol, listener: Function) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="253" x="29" y="368.5229">setMaxListeners(n: number) : SinkNode&lt;In&gt;</text><ellipse cx="20" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="381.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="29" y="394.1323">setOptions(options: NodeOptions) : SinkNode&lt;In&gt;</text><polygon fill="#FFFF44" points="20,398.7266,24,402.7266,20,406.7266,16,402.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="29" y="406.937">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[a841a53dbe0368e41115297b4c9f0e8e]
reverse link SinkNode<In> to RemoteSinkNode<In, S>--><path codeLine="65" d="M351,434.71 C351,447.72 351,460.78 351,473.74 " fill="none" id="SinkNode&lt;In&gt;-backto-RemoteSinkNode&lt;In, S&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="344,434.32,351,414.32,358,434.32,344,434.32" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a6d311e11336b2bf2d7f31e3f5d47ca2]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "RemoteSinkNode<In, S>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    #remoteNode : RemoteNode<In, In, S>
    +addListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPush(data: In | In[], options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +prependOnceListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : RemoteSinkNode<In, S>
    +removeListener(eventName: string | symbol, listener: Function) : RemoteSinkNode<In, S>
    +setMaxListeners(n: number) : RemoteSinkNode<In, S>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : RemoteSinkNode<In, S>
    #persistDataObject(frame: In) : Promise<void>
}
abstract class "SinkNode<In>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : SinkNode<In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    {abstract} +onPush(frame: In | In[], options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : SinkNode<In>
    +removeListener(eventName: string | symbol, listener: Function) : SinkNode<In>
    +setMaxListeners(n: number) : SinkNode<In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : SinkNode<In>
    #persistDataObject(frame: In) : Promise<void>
}
"SinkNode<In>" <|- - "RemoteSinkNode<In, S>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>