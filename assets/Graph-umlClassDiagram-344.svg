<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="965px" preserveAspectRatio="none" style="width:636px;height:965px;background:#00000000;" version="1.1" viewBox="0 0 636 965" width="636px" zoomAndPan="magnify"><defs><filter height="300%" id="f1m0k9l9tqsze9" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[54323c5910643495d668630485ab5d20]
class Graph<In, Out>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1m0k9l9tqsze9)" height="342.5078" id="Graph&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="523" x="53" y="91"/><ellipse cx="260.75" cy="107" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M256.6719,102.7656 L256.6719,100.6094 L264.0625,100.6094 L264.0625,102.7656 L261.5938,102.7656 L261.5938,110.8438 L264.0625,110.8438 L264.0625,113 L256.6719,113 L256.6719,110.8438 L259.1406,110.8438 L259.1406,102.7656 L256.6719,102.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="99" x="281.25" y="111.1543">Graph&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="54" x2="575" y1="123" y2="123"/><ellipse cx="64" cy="134" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="73" y="137.2104">edges : Edge&lt;any&gt;[]</text><ellipse cx="64" cy="146.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="73" y="150.0151">internalSink : GraphNode&lt;any, any&gt;</text><ellipse cx="64" cy="159.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="73" y="162.8198">internalSource : GraphNode&lt;any, any&gt;</text><ellipse cx="64" cy="172.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="73" y="175.6245">nodes : GraphNode&lt;any, any&gt;[]</text><line style="stroke:#A80036;stroke-width:1.5;" x1="54" x2="575" y1="182.2188" y2="182.2188"/><ellipse cx="64" cy="193.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="73" y="196.4292">addEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="64" cy="206.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="442" x="73" y="209.2339">addListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="218.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="73" y="222.0386">addNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="64" cy="231.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="73" y="234.8433">deleteEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="64" cy="244.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="73" y="247.6479">deleteNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="64" cy="257.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="73" y="260.4526">eventNames() : (string | symbol)[]</text><ellipse cx="64" cy="270.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="73" y="273.2573">findEdge(inlet: string, outlet: string) : Edge&lt;any&gt;</text><ellipse cx="64" cy="282.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="73" y="286.062">findNodeByName(name: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="64" cy="295.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="73" y="298.8667">findNodeByUID(uid: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="64" cy="308.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="73" y="311.6714">getMaxListeners() : number</text><ellipse cx="64" cy="321.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="73" y="324.4761">listenerCount(eventName: string | symbol) : number</text><ellipse cx="64" cy="334.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="73" y="337.2808">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="64" cy="346.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="390" x="73" y="350.0854">off(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="359.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="468" x="73" y="362.8901">prependListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="372.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="73" y="375.6948">prependOnceListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="385.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="73" y="388.4995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="64" cy="398.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="345" x="73" y="401.3042">removeAllListeners(event: string | symbol) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="410.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="464" x="73" y="414.1089">removeListener(eventName: string | symbol, listener: Function) : Graph&lt;In, Out&gt;</text><ellipse cx="64" cy="423.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="73" y="426.9136">setMaxListeners(n: number) : Graph&lt;In, Out&gt;</text><!--MD5=[170c92654dda4ed4637a63a10e48a1a3]
class GraphNode<In, Out>--><rect codeLine="29" fill="#FEFECE" filter="url(#f1m0k9l9tqsze9)" height="23.9688" id="GraphNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="138" x="245.5" y="7"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="132" x="248.5" y="23.1387">GraphNode&lt;In, Out&gt;</text><!--MD5=[f5b690753bb7c8c8fc1fd310f0e29185]
class Model<DataFrame, DataFrame>--><rect codeLine="32" fill="#FEFECE" filter="url(#f1m0k9l9tqsze9)" height="457.75" id="Model&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="615" x="7" y="494"/><ellipse cx="208.75" cy="510" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M204.6719,505.7656 L204.6719,503.6094 L212.0625,503.6094 L212.0625,505.7656 L209.5938,505.7656 L209.5938,513.8438 L212.0625,513.8438 L212.0625,516 L204.6719,516 L204.6719,513.8438 L207.1406,513.8438 L207.1406,505.7656 L204.6719,505.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="203" x="229.25" y="514.1543">Model&lt;DataFrame, DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="621" y1="526" y2="526"/><ellipse cx="18" cy="537" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="27" y="540.2104">edges : Edge&lt;any&gt;[]</text><ellipse cx="18" cy="549.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="27" y="553.0151">internalSink : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="562.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="27" y="565.8198">internalSource : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="575.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="27" y="578.6245">nodes : GraphNode&lt;any, any&gt;[]</text><ellipse cx="18" cy="588.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="27" y="591.4292">referenceSpace : TransformationSpace</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="621" y1="598.0234" y2="598.0234"/><ellipse cx="18" cy="609.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="27" y="612.2339">addEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="18" cy="621.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="27" y="625.0386">addListener(eventName: string | symbol, listener: Function) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="634.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="27" y="637.8433">addNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="18" cy="647.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="27" y="650.6479">deleteEdge(edge: Edge&lt;any&gt;) : void</text><ellipse cx="18" cy="660.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="27" y="663.4526">deleteNode(node: GraphNode&lt;any, any&gt;) : void</text><ellipse cx="18" cy="673.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="27" y="676.2573">destroy() : Promise&lt;boolean&gt;</text><ellipse cx="18" cy="685.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="27" y="689.062">eventNames() : (string | symbol)[]</text><ellipse cx="18" cy="698.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="336" x="27" y="701.8667">findAllDataServices&lt;T, S&gt;(dataType: Serializable&lt;T&gt;) : S[]</text><ellipse cx="18" cy="711.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="27" y="714.6714">findAllServices</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="150" x="110" y="714.6714">(serviceClass: Serializable</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="32" x="260" y="714.6714">) : S[]</text><ellipse cx="18" cy="724.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="213" x="27" y="727.4761">findDataService&lt;D, F&gt;(uid: string) : F</text><ellipse cx="18" cy="737.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="306" x="27" y="740.2808">findDataService&lt;D, F&gt;(dataType: Serializable&lt;D&gt;) : F</text><ellipse cx="18" cy="749.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="753.0854">findDataService&lt;D, F&gt;(object: D) : F</text><ellipse cx="18" cy="762.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="27" y="765.8901">findEdge(inlet: string, outlet: string) : Edge&lt;any&gt;</text><ellipse cx="18" cy="775.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="27" y="778.6948">findNodeByName(name: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="788.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="27" y="791.4995">findNodeByUID(uid: string) : GraphNode&lt;any, any&gt;</text><ellipse cx="18" cy="801.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="63" x="27" y="804.3042">findService</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="86" x="90" y="804.3042">(uid: string) : S</text><ellipse cx="18" cy="813.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="63" x="27" y="817.1089">findService</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="150" x="90" y="817.1089">(serviceClass: Serializable</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="24" x="240" y="817.1089">) : S</text><ellipse cx="18" cy="826.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="27" y="829.9136">getMaxListeners() : number</text><ellipse cx="18" cy="839.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="27" y="842.7183">listenerCount(eventName: string | symbol) : number</text><ellipse cx="18" cy="852.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="27" y="855.5229">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="865.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="482" x="27" y="868.3276">off(eventName: string | symbol, listener: Function) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="877.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="560" x="27" y="881.1323">prependListener(eventName: string | symbol, listener: Function) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="890.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="589" x="27" y="893.937">prependOnceListener(eventName: string | symbol, listener: Function) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="903.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="27" y="906.7417">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="916.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="437" x="27" y="919.5464">removeAllListeners(event: string | symbol) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="929.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="556" x="27" y="932.3511">removeListener(eventName: string | symbol, listener: Function) : Model&lt;DataFrame, DataFrame&gt;</text><ellipse cx="18" cy="941.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="355" x="27" y="945.1558">setMaxListeners(n: number) : Model&lt;DataFrame, DataFrame&gt;</text><!--MD5=[ea4247e916a756ea5f0a0dff0b98299f]
reverse link GraphNode<In, Out> to Graph<In, Out>--><path codeLine="31" d="M314.5,51.38 C314.5,62.59 314.5,76.14 314.5,90.89 " fill="none" id="GraphNode&lt;In, Out&gt;-backto-Graph&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="307.5,51,314.5,31,321.5,51,307.5,51" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ebb86369bffdf8fcc8e3bb2fb9b7748a]
reverse link Graph<In, Out> to Model<DataFrame, DataFrame>--><path codeLine="66" d="M314.5,454.5 C314.5,467.51 314.5,480.69 314.5,493.86 " fill="none" id="Graph&lt;In, Out&gt;-backto-Model&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="307.5,454.23,314.5,434.23,321.5,454.23,307.5,454.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8024282921c084620ef5d5b236b9af31]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "Graph<In, Out>" {
    +edges : Edge<any>[]
    +internalSink : GraphNode<any, any>
    +internalSource : GraphNode<any, any>
    +nodes : GraphNode<any, any>[]
    +addEdge(edge: Edge<any>) : void
    +addListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +addNode(node: GraphNode<any, any>) : void
    +deleteEdge(edge: Edge<any>) : void
    +deleteNode(node: GraphNode<any, any>) : void
    +eventNames() : (string | symbol)[]
    +findEdge(inlet: string, outlet: string) : Edge<any>
    +findNodeByName(name: string) : GraphNode<any, any>
    +findNodeByUID(uid: string) : GraphNode<any, any>
    +getMaxListeners() : number
    +listenerCount(eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +prependListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Graph<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : Graph<In, Out>
    +setMaxListeners(n: number) : Graph<In, Out>
}
class "GraphNode<In, Out>"
hide "GraphNode<In, Out>" circle
"GraphNode<In, Out>" <|- - "Graph<In, Out>"
interface "Model<DataFrame, DataFrame>" {
    +edges : Edge<any>[]
    +internalSink : GraphNode<any, any>
    +internalSource : GraphNode<any, any>
    +nodes : GraphNode<any, any>[]
    +referenceSpace : TransformationSpace
    +addEdge(edge: Edge<any>) : void
    +addListener(eventName: string | symbol, listener: Function) : Model<DataFrame, DataFrame>
    +addNode(node: GraphNode<any, any>) : void
    +deleteEdge(edge: Edge<any>) : void
    +deleteNode(node: GraphNode<any, any>) : void
    +destroy() : Promise<boolean>
    +eventNames() : (string | symbol)[]
    +findAllDataServices<T, S>(dataType: Serializable<T>) : S[]
    +findAllServices<S>(serviceClass: Serializable<S>) : S[]
    +findDataService<D, F>(uid: string) : F
    +findDataService<D, F>(dataType: Serializable<D>) : F
    +findDataService<D, F>(object: D) : F
    +findEdge(inlet: string, outlet: string) : Edge<any>
    +findNodeByName(name: string) : GraphNode<any, any>
    +findNodeByUID(uid: string) : GraphNode<any, any>
    +findService<S>(uid: string) : S
    +findService<S>(serviceClass: Serializable<S>) : S
    +getMaxListeners() : number
    +listenerCount(eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Model<DataFrame, DataFrame>
    +prependListener(eventName: string | symbol, listener: Function) : Model<DataFrame, DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Model<DataFrame, DataFrame>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Model<DataFrame, DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : Model<DataFrame, DataFrame>
    +setMaxListeners(n: number) : Model<DataFrame, DataFrame>
}
"Graph<In, Out>" <|- - "Model<DataFrame, DataFrame>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>