<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1373px" preserveAspectRatio="none" style="width:707px;height:1373px;background:#00000000;" version="1.1" viewBox="0 0 707 1373" width="707px" zoomAndPan="magnify"><defs><filter height="300%" id="f1h92qpisuy4rw" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[de208f4723c96b89531bbea246460187]
class BufferNode<InOut>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1h92qpisuy4rw)" height="432.1406" id="BufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="435"/><ellipse cx="285.25" cy="451" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M288.2188,456.6406 Q287.6406,456.9375 287,457.0781 Q286.3594,457.2344 285.6563,457.2344 Q283.1563,457.2344 281.8281,455.5938 Q280.5156,453.9375 280.5156,450.8125 Q280.5156,447.6875 281.8281,446.0313 Q283.1563,444.375 285.6563,444.375 Q286.3594,444.375 287,444.5313 Q287.6563,444.6875 288.2188,444.9844 L288.2188,447.7031 Q287.5938,447.125 287,446.8594 Q286.4063,446.5781 285.7813,446.5781 Q284.4375,446.5781 283.75,447.6563 Q283.0625,448.7188 283.0625,450.8125 Q283.0625,452.9063 283.75,453.9844 Q284.4375,455.0469 285.7813,455.0469 Q286.4063,455.0469 287,454.7813 Q287.5938,454.5 288.2188,453.9219 L288.2188,456.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="123" x="305.75" y="455.1543">BufferNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="467" y2="467"/><ellipse cx="20" cy="478" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="481.2104">captureRejections : boolean</text><ellipse cx="20" cy="490.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="494.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="503.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="506.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="516.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="519.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,524.2188,24,528.2188,20,532.2188,16,528.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="29" y="532.4292">options : BufferOptions</text><polygon fill="none" points="20,537.0234,24,541.0234,20,545.0234,16,541.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="29" y="545.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="551.8281" y2="551.8281"/><ellipse cx="20" cy="562.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="463" x="29" y="566.0386">addListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="575.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="578.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="588.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="591.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="601.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="604.4526">getMaxListeners() : number</text><ellipse cx="20" cy="614.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="617.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="626.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="630.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="639.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="642.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="652.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="655.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="665.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="29" y="668.4761">off(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="678.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="681.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="690.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="694.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="703.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="706.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="716.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="29" y="719.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="729.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="29" y="732.4995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="20" cy="742.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="489" x="29" y="745.3042">prependListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="754.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="518" x="29" y="758.1089">prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="767.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="770.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="780.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="366" x="29" y="783.7183">removeAllListeners(event: string | symbol) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="793.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="29" y="796.5229">removeListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="806.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="29" y="809.3276">setMaxListeners(n: number) : BufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="818.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="822.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="831.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="29" y="834.937">setOptions(options: NodeOptions) : BufferNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,839.5313,24,843.5313,20,847.5313,16,843.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="29" y="847.7417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,852.3359,24,856.3359,20,860.3359,16,856.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="29" y="860.5464">shift() : Promise&lt;InOut&gt;</text><!--MD5=[57fab1d92ec96921b1b3362c38eaf008]
class Node<InOut, InOut>--><rect codeLine="36" fill="#FEFECE" filter="url(#f1h92qpisuy4rw)" height="368.1172" id="Node&lt;InOut, InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="7"/><ellipse cx="283.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M286.2188,28.6406 Q285.6406,28.9375 285,29.0781 Q284.3594,29.2344 283.6563,29.2344 Q281.1563,29.2344 279.8281,27.5938 Q278.5156,25.9375 278.5156,22.8125 Q278.5156,19.6875 279.8281,18.0313 Q281.1563,16.375 283.6563,16.375 Q284.3594,16.375 285,16.5313 Q285.6563,16.6875 286.2188,16.9844 L286.2188,19.7031 Q285.5938,19.125 285,18.8594 Q284.4063,18.5781 283.7813,18.5781 Q282.4375,18.5781 281.75,19.6563 Q281.0625,20.7188 281.0625,22.8125 Q281.0625,24.9063 281.75,25.9844 Q282.4375,27.0469 283.7813,27.0469 Q284.4063,27.0469 285,26.7813 Q285.5938,26.5 286.2188,25.9219 L286.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="127" x="303.75" y="27.1543">Node&lt;InOut, InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="39" y2="39"/><ellipse cx="20" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="53.2104">captureRejections : boolean</text><ellipse cx="20" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="78.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,96.2188,24,100.2188,20,104.2188,16,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="29" y="104.4292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="111.0234" y2="111.0234"/><ellipse cx="20" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="466" x="29" y="125.2339">addListener(eventName: string | symbol, listener: Function) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="163.6479">getMaxListeners() : number</text><ellipse cx="20" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="20" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="414" x="29" y="227.6714">off(eventName: string | symbol, listener: Function) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="492" x="29" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="29" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="304.4995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="369" x="29" y="317.3042">removeAllListeners(event: string | symbol) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="488" x="29" y="330.1089">removeListener(eventName: string | symbol, listener: Function) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="287" x="29" y="342.9136">setMaxListeners(n: number) : Node&lt;InOut, InOut&gt;</text><ellipse cx="20" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="355.7183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="29" y="368.5229">setOptions(options: NodeOptions) : Node&lt;InOut, InOut&gt;</text><!--MD5=[cbfe4adf4cb417016e13f6623ce80221]
class MemoryBufferNode<InOut>--><rect codeLine="64" fill="#FEFECE" filter="url(#f1h92qpisuy4rw)" height="432.1406" id="MemoryBufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="927"/><ellipse cx="261.25" cy="943" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M264.2188,948.6406 Q263.6406,948.9375 263,949.0781 Q262.3594,949.2344 261.6563,949.2344 Q259.1563,949.2344 257.8281,947.5938 Q256.5156,945.9375 256.5156,942.8125 Q256.5156,939.6875 257.8281,938.0313 Q259.1563,936.375 261.6563,936.375 Q262.3594,936.375 263,936.5313 Q263.6563,936.6875 264.2188,936.9844 L264.2188,939.7031 Q263.5938,939.125 263,938.8594 Q262.4063,938.5781 261.7813,938.5781 Q260.4375,938.5781 259.75,939.6563 Q259.0625,940.7188 259.0625,942.8125 Q259.0625,944.9063 259.75,945.9844 Q260.4375,947.0469 261.7813,947.0469 Q262.4063,947.0469 263,946.7813 Q263.5938,946.5 264.2188,945.9219 L264.2188,948.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="171" x="281.75" y="947.1543">MemoryBufferNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="959" y2="959"/><ellipse cx="20" cy="970" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="973.2104">captureRejections : boolean</text><ellipse cx="20" cy="982.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="986.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="995.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="998.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="1008.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1011.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1016.2188,24,1020.2188,20,1024.2188,16,1020.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="29" y="1024.4292">options : BufferOptions</text><polygon fill="none" points="20,1029.0234,24,1033.0234,20,1037.0234,16,1033.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="29" y="1037.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1043.8281" y2="1043.8281"/><ellipse cx="20" cy="1054.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="508" x="29" y="1058.0386">addListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1067.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1070.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1080.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1083.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1093.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1096.4526">getMaxListeners() : number</text><ellipse cx="20" cy="1106.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1109.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="1118.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1122.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1131.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1134.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1144.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1147.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1157.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="456" x="29" y="1160.4761">off(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1170.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1173.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1182.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1186.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1195.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1198.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1208.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="29" y="1211.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1221.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="29" y="1224.4995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1234.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="29" y="1237.3042">prependListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1246.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="563" x="29" y="1250.1089">prependOnceListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1259.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1262.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1272.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="29" y="1275.7183">removeAllListeners(event: string | symbol) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1285.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="530" x="29" y="1288.5229">removeListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1298.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="29" y="1301.3276">setMaxListeners(n: number) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="20" cy="1310.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1314.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1323.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="362" x="29" y="1326.937">setOptions(options: NodeOptions) : MemoryBufferNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1331.5313,24,1335.5313,20,1339.5313,16,1335.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="29" y="1339.7417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1344.3359,24,1348.3359,20,1352.3359,16,1348.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="29" y="1352.5464">shift() : Promise&lt;InOut&gt;</text><!--MD5=[3000a85f42cbc2e97598e73c89d33c51]
reverse link Node<InOut, InOut> to BufferNode<InOut>--><path codeLine="63" d="M351,395.62 C351,408.61 351,421.71 351,434.75 " fill="none" id="Node&lt;InOut, InOut&gt;-backto-BufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="344,395.32,351,375.32,358,395.32,344,395.32" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b42b280cf03fc9fd4fcf3fcc0a3c2d34]
reverse link BufferNode<InOut> to MemoryBufferNode<InOut>--><path codeLine="96" d="M351,887.29 C351,900.5 351,913.76 351,926.89 " fill="none" id="BufferNode&lt;InOut&gt;-backto-MemoryBufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="344,887.28,351,867.28,358,887.28,344,887.28" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d0412a5ae574b1b1ba980ccc7084e2f0]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "BufferNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : BufferNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +setMaxListeners(n: number) : BufferNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : BufferNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
class "Node<InOut, InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : Node<InOut, InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Node<InOut, InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : Node<InOut, InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Node<InOut, InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Node<InOut, InOut>
    +removeListener(eventName: string | symbol, listener: Function) : Node<InOut, InOut>
    +setMaxListeners(n: number) : Node<InOut, InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : Node<InOut, InOut>
}
"Node<InOut, InOut>" <|- - "BufferNode<InOut>"
class "MemoryBufferNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : MemoryBufferNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +setMaxListeners(n: number) : MemoryBufferNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : MemoryBufferNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
"BufferNode<InOut>" <|- - "MemoryBufferNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>