<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1047px" preserveAspectRatio="none" style="width:707px;height:1047px;background:#00000000;" version="1.1" viewBox="0 0 707 1047" width="707px" zoomAndPan="magnify"><defs><filter height="300%" id="fkm9tp062k54e" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[e0499c8a5a139b56877d613ac551220a]
class EMAFilterNode<InOut>--><rect codeLine="4" fill="#FEFECE" filter="url(#fkm9tp062k54e)" height="483.3594" id="EMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="550"/><ellipse cx="275.25" cy="566" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M278.2188,571.6406 Q277.6406,571.9375 277,572.0781 Q276.3594,572.2344 275.6563,572.2344 Q273.1563,572.2344 271.8281,570.5938 Q270.5156,568.9375 270.5156,565.8125 Q270.5156,562.6875 271.8281,561.0313 Q273.1563,559.375 275.6563,559.375 Q276.3594,559.375 277,559.5313 Q277.6563,559.6875 278.2188,559.9844 L278.2188,562.7031 Q277.5938,562.125 277,561.8594 Q276.4063,561.5781 275.7813,561.5781 Q274.4375,561.5781 273.75,562.6563 Q273.0625,563.7188 273.0625,565.8125 Q273.0625,567.9063 273.75,568.9844 Q274.4375,570.0469 275.7813,570.0469 Q276.4063,570.0469 277,569.7813 Q277.5938,569.5 278.2188,568.9219 L278.2188,571.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="143" x="295.75" y="570.1543">EMAFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="582" y2="582"/><ellipse cx="20" cy="593" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="596.2104">captureRejections : boolean</text><ellipse cx="20" cy="605.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="609.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="618.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="621.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="631.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="634.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,639.2188,24,643.2188,20,647.2188,16,643.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="29" y="647.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="654.0234" y2="654.0234"/><ellipse cx="20" cy="665.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="479" x="29" y="668.2339">addListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="677.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="681.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="690.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="29" y="693.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: Object) : Promise&lt;T&gt;</text><ellipse cx="20" cy="703.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="706.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="716.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="719.4526">getMaxListeners() : number</text><ellipse cx="20" cy="729.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="732.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="741.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="29" y="745.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: EMAFilterOptions) : Promise&lt;any&gt;</text><ellipse cx="20" cy="754.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="757.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="767.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="770.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="780.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="783.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="793.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="427" x="29" y="796.2808">off(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="805.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="809.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="818.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="821.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="831.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="834.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="844.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="29" y="847.4995">prependListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="857.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="29" y="860.3042">prependOnceListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="869.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="29" y="873.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="882.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="29" y="885.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="895.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="898.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="908.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="382" x="29" y="911.5229">removeAllListeners(event: string | symbol) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="921.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="29" y="924.3276">removeListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="933.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="300" x="29" y="937.1323">setMaxListeners(n: number) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="946.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="949.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="959.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="29" y="962.7417">setOptions(options: NodeOptions) : EMAFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,967.3359,24,971.3359,20,975.3359,16,971.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="29" y="975.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="20,980.1406,24,984.1406,20,988.1406,16,984.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="988.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,992.9453,24,996.9453,20,1000.9453,16,996.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="29" y="1001.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="20,1005.75,24,1009.75,20,1013.75,16,1009.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="1013.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,1018.5547,24,1022.5547,20,1026.5547,16,1022.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="1026.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[5c1e6fce4365e56468cf60e0107291cc]
class PropertyFilterProcessingNode<InOut>--><rect codeLine="40" fill="#FEFECE" filter="url(#fkm9tp062k54e)" height="483.3594" id="PropertyFilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="7"/><ellipse cx="228.75" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M228.8594,18.3438 L227.7031,23.4219 L230.0313,23.4219 L228.8594,18.3438 Z M227.375,16.1094 L230.3594,16.1094 L233.7188,28.5 L231.2656,28.5 L230.5,25.4375 L227.2188,25.4375 L226.4688,28.5 L224.0313,28.5 L227.375,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="236" x="249.25" y="27.1543">PropertyFilterProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="39" y2="39"/><ellipse cx="20" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="53.2104">captureRejections : boolean</text><ellipse cx="20" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="78.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,96.2188,24,100.2188,20,104.2188,16,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="29" y="104.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="111.0234" y2="111.0234"/><ellipse cx="20" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="567" x="29" y="125.2339">addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="552" x="29" y="150.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise&lt;T&gt;</text><ellipse cx="20" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="163.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="176.4526">getMaxListeners() : number</text><ellipse cx="20" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="189.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="522" x="29" y="202.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: FilterProcessingOptions) : Promise&lt;any&gt;</text><ellipse cx="20" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="214.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="227.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="240.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="515" x="29" y="253.2808">off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="266.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="278.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="291.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="593" x="29" y="304.4995">prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="622" x="29" y="317.3042">prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="29" y="330.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="29" y="342.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="355.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="470" x="29" y="368.5229">removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="589" x="29" y="381.3276">removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="29" y="394.1323">setMaxListeners(n: number) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="20" cy="403.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="406.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="416.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="421" x="29" y="419.7417">setOptions(options: NodeOptions) : PropertyFilterProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,424.3359,24,428.3359,20,432.3359,16,428.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="29" y="432.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="20,437.1406,24,441.1406,20,445.1406,16,441.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="445.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,449.9453,24,453.9453,20,457.9453,16,453.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="29" y="458.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="20,462.75,24,466.75,20,470.75,16,466.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="470.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,475.5547,24,479.5547,20,483.5547,16,479.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="483.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[df01c51bd2cbc1d688585763a5ff8bd8]
reverse link PropertyFilterProcessingNode<InOut> to EMAFilterNode<InOut>--><path codeLine="76" d="M351,510.75 C351,523.77 351,536.81 351,549.76 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-EMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="344,510.34,351,490.34,358,510.34,344,510.34" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[19edbbf929a9b09fa1d2d72a1fc2920f]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "EMAFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: Object) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter<T>(object: DataObject, value: T, options: EMAFilterOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : EMAFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +setMaxListeners(n: number) : EMAFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : EMAFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
abstract class "PropertyFilterProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {abstract} +filter<T>(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    {abstract} +initFilter<T>(object: DataObject, value: T, options: FilterProcessingOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +setMaxListeners(n: number) : PropertyFilterProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : PropertyFilterProcessingNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "EMAFilterNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>