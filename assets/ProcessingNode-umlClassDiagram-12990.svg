<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1372px" preserveAspectRatio="none" style="width:2864px;height:1372px;background:#00000000;" version="1.1" viewBox="0 0 2864 1372" width="2864px" zoomAndPan="magnify"><defs><filter height="300%" id="f1ndjrhbjxsji6" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[15552102494ff0486f7e2e9fff52b016]
class ProcessingNode<In, Out>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="419.3359" id="ProcessingNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1087" y="435"/><ellipse cx="1344.75" cy="451" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1344.8594,446.3438 L1343.7031,451.4219 L1346.0313,451.4219 L1344.8594,446.3438 Z M1343.375,444.1094 L1346.3594,444.1094 L1349.7188,456.5 L1347.2656,456.5 L1346.5,453.4375 L1343.2188,453.4375 L1342.4688,456.5 L1340.0313,456.5 L1343.375,444.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="160" x="1365.25" y="455.1543">ProcessingNode&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1088" x2="1770" y1="467" y2="467"/><ellipse cx="1098" cy="478" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1107" y="481.2104">captureRejections : boolean</text><ellipse cx="1098" cy="490.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1107" y="494.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1098" cy="503.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1107" y="506.8198">defaultMaxListeners : number</text><ellipse cx="1098" cy="516.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1107" y="519.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1098,524.2188,1102,528.2188,1098,532.2188,1094,528.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="1107" y="532.4292">options : ProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1088" x2="1770" y1="539.0234" y2="539.0234"/><ellipse cx="1098" cy="550.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="499" x="1107" y="553.2339">addListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="562.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1107" y="566.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1098" cy="575.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1107" y="578.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1098" cy="588.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1107" y="591.6479">getMaxListeners() : number</text><ellipse cx="1098" cy="601.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1107" y="604.4526">getOptions() : NodeOptions</text><ellipse cx="1098" cy="614.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1107" y="617.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1098" cy="626.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1107" y="630.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1098" cy="639.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1107" y="642.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1098" cy="652.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="447" x="1107" y="655.6714">off(eventName: string | symbol, listener: Function) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="665.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1107" y="668.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1098" cy="678.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1107" y="681.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1098" cy="690.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1107" y="694.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1098" cy="703.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="525" x="1107" y="706.8901">prependListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="716.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="554" x="1107" y="719.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="729.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="327" x="1107" y="732.4995">process(frame: In, options: PushOptions) : Promise&lt;Out&gt;</text><ellipse cx="1098" cy="742.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1107" y="745.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1098" cy="754.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="402" x="1107" y="758.1089">removeAllListeners(event: string | symbol) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="767.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="1107" y="770.9136">removeListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="780.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="1107" y="783.7183">setMaxListeners(n: number) : ProcessingNode&lt;In, Out&gt;</text><ellipse cx="1098" cy="793.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1107" y="796.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1098" cy="806.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="1107" y="809.3276">setOptions(options: NodeOptions) : ProcessingNode&lt;In, Out&gt;</text><polygon fill="#FFFF44" points="1098,813.9219,1102,817.9219,1098,821.9219,1094,817.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1107" y="822.1323">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1098,826.7266,1102,830.7266,1098,834.7266,1094,830.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1107" y="834.937">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1098,839.5313,1102,843.5313,1098,847.5313,1094,843.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1107" y="847.7417">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[1f35e560ec16ab5e3b805489929ed19a]
class Node<In, Out>--><rect codeLine="35" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="368.1172" id="Node&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1087" y="7"/><ellipse cx="1377.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1380.7188,28.6406 Q1380.1406,28.9375 1379.5,29.0781 Q1378.8594,29.2344 1378.1563,29.2344 Q1375.6563,29.2344 1374.3281,27.5938 Q1373.0156,25.9375 1373.0156,22.8125 Q1373.0156,19.6875 1374.3281,18.0313 Q1375.6563,16.375 1378.1563,16.375 Q1378.8594,16.375 1379.5,16.5313 Q1380.1563,16.6875 1380.7188,16.9844 L1380.7188,19.7031 Q1380.0938,19.125 1379.5,18.8594 Q1378.9063,18.5781 1378.2813,18.5781 Q1376.9375,18.5781 1376.25,19.6563 Q1375.5625,20.7188 1375.5625,22.8125 Q1375.5625,24.9063 1376.25,25.9844 Q1376.9375,27.0469 1378.2813,27.0469 Q1378.9063,27.0469 1379.5,26.7813 Q1380.0938,26.5 1380.7188,25.9219 L1380.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="94" x="1398.25" y="27.1543">Node&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1088" x2="1770" y1="39" y2="39"/><ellipse cx="1098" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1107" y="53.2104">captureRejections : boolean</text><ellipse cx="1098" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1107" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1098" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1107" y="78.8198">defaultMaxListeners : number</text><ellipse cx="1098" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1107" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1098,96.2188,1102,100.2188,1098,104.2188,1094,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="1107" y="104.4292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1088" x2="1770" y1="111.0234" y2="111.0234"/><ellipse cx="1098" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="436" x="1107" y="125.2339">addListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1107" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1098" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1107" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1098" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1107" y="163.6479">getMaxListeners() : number</text><ellipse cx="1098" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1107" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="1098" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1107" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1098" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1107" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1098" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1107" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1098" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="384" x="1107" y="227.6714">off(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1107" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1098" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1107" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1098" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1107" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1098" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="1107" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="1107" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1107" y="304.4995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1098" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="1107" y="317.3042">removeAllListeners(event: string | symbol) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="458" x="1107" y="330.1089">removeListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="257" x="1107" y="342.9136">setMaxListeners(n: number) : Node&lt;In, Out&gt;</text><ellipse cx="1098" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1107" y="355.7183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1098" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="290" x="1107" y="368.5229">setOptions(options: NodeOptions) : Node&lt;In, Out&gt;</text><!--MD5=[4646f3fb556489f47b0f46b6967dedbe]
class FrameFilterNode<InOut>--><rect codeLine="63" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="432.1406" id="FrameFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="920.5"/><ellipse cx="268.75" cy="936.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M271.7188,942.1406 Q271.1406,942.4375 270.5,942.5781 Q269.8594,942.7344 269.1563,942.7344 Q266.6563,942.7344 265.3281,941.0938 Q264.0156,939.4375 264.0156,936.3125 Q264.0156,933.1875 265.3281,931.5313 Q266.6563,929.875 269.1563,929.875 Q269.8594,929.875 270.5,930.0313 Q271.1563,930.1875 271.7188,930.4844 L271.7188,933.2031 Q271.0938,932.625 270.5,932.3594 Q269.9063,932.0781 269.2813,932.0781 Q267.9375,932.0781 267.25,933.1563 Q266.5625,934.2188 266.5625,936.3125 Q266.5625,938.4063 267.25,939.4844 Q267.9375,940.5469 269.2813,940.5469 Q269.9063,940.5469 270.5,940.2813 Q271.0938,940 271.7188,939.4219 L271.7188,942.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="156" x="289.25" y="940.6543">FrameFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="952.5" y2="952.5"/><ellipse cx="20" cy="963.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="966.7104">captureRejections : boolean</text><ellipse cx="20" cy="976.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="979.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="989.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="992.3198">defaultMaxListeners : number</text><ellipse cx="20" cy="1001.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1005.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1009.7188,24,1013.7188,20,1017.7188,16,1013.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="98" x="29" y="1017.9292">filterFn : Function</text><polygon fill="none" points="20,1022.5234,24,1026.5234,20,1030.5234,16,1026.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="29" y="1030.7339">options : ProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1037.3281" y2="1037.3281"/><ellipse cx="20" cy="1048.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="492" x="29" y="1051.5386">addListener(eventName: string | symbol, listener: Function) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1061.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1064.3433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1073.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1077.1479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1086.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1089.9526">getMaxListeners() : number</text><ellipse cx="20" cy="1099.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1102.7573">getOptions() : NodeOptions</text><ellipse cx="20" cy="1112.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1115.562">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1125.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1128.3667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1137.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1141.1714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1150.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="440" x="29" y="1153.9761">off(eventName: string | symbol, listener: Function) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1163.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1166.7808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1176.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1179.5854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1189.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1192.3901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1201.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="518" x="29" y="1205.1948">prependListener(eventName: string | symbol, listener: Function) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1214.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="547" x="29" y="1217.9995">prependOnceListener(eventName: string | symbol, listener: Function) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1227.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="29" y="1230.8042">process(frame: InOut) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="1240.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1243.6089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1253.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="395" x="29" y="1256.4136">removeAllListeners(event: string | symbol) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1266.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="514" x="29" y="1269.2183">removeListener(eventName: string | symbol, listener: Function) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1278.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="313" x="29" y="1282.0229">setMaxListeners(n: number) : FrameFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1291.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1294.8276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1304.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="346" x="29" y="1307.6323">setOptions(options: NodeOptions) : FrameFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1312.2266,24,1316.2266,20,1320.2266,16,1316.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="1320.437">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,1325.0313,24,1329.0313,20,1333.0313,16,1329.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="1333.2417">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,1337.8359,24,1341.8359,20,1345.8359,16,1341.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="1346.0464">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[4a4367315437d3589fad77aa170f6467]
class MergeShape<InOut>--><rect codeLine="96" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="432.1406" id="MergeShape&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="728" y="920.5"/><ellipse cx="999.75" cy="936.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M999.8594,931.8438 L998.7031,936.9219 L1001.0313,936.9219 L999.8594,931.8438 Z M998.375,929.6094 L1001.3594,929.6094 L1004.7188,942 L1002.2656,942 L1001.5,938.9375 L998.2188,938.9375 L997.4688,942 L995.0313,942 L998.375,929.6094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="132" x="1020.25" y="940.6543">MergeShape&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="952.5" y2="952.5"/><ellipse cx="739" cy="963.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="748" y="966.7104">captureRejections : boolean</text><ellipse cx="739" cy="976.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="748" y="979.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="739" cy="989.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="748" y="992.3198">defaultMaxListeners : number</text><ellipse cx="739" cy="1001.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="748" y="1005.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="739,1009.7188,743,1013.7188,739,1017.7188,735,1013.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="748" y="1017.9292">options : MergeShapeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1024.5234" y2="1024.5234"/><ellipse cx="739" cy="1035.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="470" x="748" y="1038.7339">addListener(eventName: string | symbol, listener: Function) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1048.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="748" y="1051.5386">eventNames() : (string | symbol)[]</text><ellipse cx="739" cy="1061.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="748" y="1064.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="739" cy="1073.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="748" y="1077.1479">getMaxListeners() : number</text><ellipse cx="739" cy="1086.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="748" y="1089.9526">getOptions() : NodeOptions</text><ellipse cx="739" cy="1099.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="748" y="1102.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="739" cy="1112.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="748" y="1115.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="739" cy="1125.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="748" y="1128.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1137.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="241" x="748" y="1141.1714">merge(frames: InOut[], key: string) : InOut</text><ellipse cx="739" cy="1150.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="418" x="748" y="1153.9761">off(eventName: string | symbol, listener: Function) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1163.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="748" y="1166.7808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="739" cy="1176.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="748" y="1179.5854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1189.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="748" y="1192.3901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1201.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="748" y="1205.1948">prependListener(eventName: string | symbol, listener: Function) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1214.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="525" x="748" y="1217.9995">prependOnceListener(eventName: string | symbol, listener: Function) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1227.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="363" x="748" y="1230.8042">process(frame: InOut, options: PushOptions) : Promise&lt;InOut&gt;</text><ellipse cx="739" cy="1240.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="748" y="1243.6089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1253.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="373" x="748" y="1256.4136">removeAllListeners(event: string | symbol) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1266.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="492" x="748" y="1269.2183">removeListener(eventName: string | symbol, listener: Function) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1278.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="748" y="1282.0229">setMaxListeners(n: number) : MergeShape&lt;InOut&gt;</text><ellipse cx="739" cy="1291.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="748" y="1294.8276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="739" cy="1304.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="324" x="748" y="1307.6323">setOptions(options: NodeOptions) : MergeShape&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1312.2266,743,1316.2266,739,1320.2266,735,1316.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="748" y="1320.437">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="739,1325.0313,743,1329.0313,739,1333.0313,735,1329.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="748" y="1333.2417">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="739,1337.8359,743,1341.8359,739,1345.8359,735,1341.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="748" y="1346.0464">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[87757af7630f6a8e22a5a7c1c0bc476c]
class FrameDelayNode<InOut>--><rect codeLine="129" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="419.3359" id="FrameDelayNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1447" y="927"/><ellipse cx="1705.25" cy="943" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1708.2188,948.6406 Q1707.6406,948.9375 1707,949.0781 Q1706.3594,949.2344 1705.6563,949.2344 Q1703.1563,949.2344 1701.8281,947.5938 Q1700.5156,945.9375 1700.5156,942.8125 Q1700.5156,939.6875 1701.8281,938.0313 Q1703.1563,936.375 1705.6563,936.375 Q1706.3594,936.375 1707,936.5313 Q1707.6563,936.6875 1708.2188,936.9844 L1708.2188,939.7031 Q1707.5938,939.125 1707,938.8594 Q1706.4063,938.5781 1705.7813,938.5781 Q1704.4375,938.5781 1703.75,939.6563 Q1703.0625,940.7188 1703.0625,942.8125 Q1703.0625,944.9063 1703.75,945.9844 Q1704.4375,947.0469 1705.7813,947.0469 Q1706.4063,947.0469 1707,946.7813 Q1707.5938,946.5 1708.2188,945.9219 L1708.2188,948.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="159" x="1725.75" y="947.1543">FrameDelayNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="959" y2="959"/><ellipse cx="1458" cy="970" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1467" y="973.2104">captureRejections : boolean</text><ellipse cx="1458" cy="982.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1467" y="986.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1458" cy="995.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1467" y="998.8198">defaultMaxListeners : number</text><ellipse cx="1458" cy="1008.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1467" y="1011.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1458,1016.2188,1462,1020.2188,1458,1024.2188,1454,1020.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="1467" y="1024.4292">options : ProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="1031.0234" y2="1031.0234"/><ellipse cx="1458" cy="1042.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="495" x="1467" y="1045.2339">addListener(eventName: string | symbol, listener: Function) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1054.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1467" y="1058.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1458" cy="1067.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1467" y="1070.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1458" cy="1080.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1467" y="1083.6479">getMaxListeners() : number</text><ellipse cx="1458" cy="1093.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1467" y="1096.4526">getOptions() : NodeOptions</text><ellipse cx="1458" cy="1106.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1467" y="1109.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1458" cy="1118.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1467" y="1122.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1458" cy="1131.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1467" y="1134.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1144.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="443" x="1467" y="1147.6714">off(eventName: string | symbol, listener: Function) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1157.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1467" y="1160.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1458" cy="1170.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1467" y="1173.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1182.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1467" y="1186.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1195.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="1467" y="1198.8901">prependListener(eventName: string | symbol, listener: Function) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1208.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="550" x="1467" y="1211.6948">prependOnceListener(eventName: string | symbol, listener: Function) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1221.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="1467" y="1224.4995">process(frame: InOut) : Promise&lt;InOut&gt;</text><ellipse cx="1458" cy="1234.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1467" y="1237.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1246.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="398" x="1467" y="1250.1089">removeAllListeners(event: string | symbol) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1259.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="517" x="1467" y="1262.9136">removeListener(eventName: string | symbol, listener: Function) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1272.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="316" x="1467" y="1275.7183">setMaxListeners(n: number) : FrameDelayNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1285.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1467" y="1288.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1458" cy="1298.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="1467" y="1301.3276">setOptions(options: NodeOptions) : FrameDelayNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1458,1305.9219,1462,1309.9219,1458,1313.9219,1454,1309.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1467" y="1314.1323">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1458,1318.7266,1462,1322.7266,1458,1326.7266,1454,1322.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="1326.937">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1458,1331.5313,1462,1335.5313,1458,1339.5313,1454,1335.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1467" y="1339.7417">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[c907b791bdca64ff96e109f2e55830fc]
class ObjectProcessingNode<DataFrame>--><rect codeLine="161" fill="#FEFECE" filter="url(#f1ndjrhbjxsji6)" height="444.9453" id="ObjectProcessingNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="2166" y="914"/><ellipse cx="2390.25" cy="930" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2390.3594,925.3438 L2389.2031,930.4219 L2391.5313,930.4219 L2390.3594,925.3438 Z M2388.875,923.1094 L2391.8594,923.1094 L2395.2188,935.5 L2392.7656,935.5 L2392,932.4375 L2388.7188,932.4375 L2387.9688,935.5 L2385.5313,935.5 L2388.875,923.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="227" x="2410.75" y="934.1543">ObjectProcessingNode&lt;DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="946" y2="946"/><ellipse cx="2177" cy="957" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="2186" y="960.2104">captureRejections : boolean</text><ellipse cx="2177" cy="969.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="2186" y="973.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="2177" cy="982.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="2186" y="985.8198">defaultMaxListeners : number</text><ellipse cx="2177" cy="995.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2186" y="998.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="2177,1003.2188,2181,1007.2188,2177,1011.2188,2173,1007.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2186" y="1011.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="1018.0234" y2="1018.0234"/><ellipse cx="2177" cy="1029.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="559" x="2186" y="1032.2339">addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1041.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="2186" y="1045.0386">eventNames() : (string | symbol)[]</text><ellipse cx="2177" cy="1054.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="2186" y="1057.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="2177" cy="1067.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2186" y="1070.6479">getMaxListeners() : number</text><ellipse cx="2177" cy="1080.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="2186" y="1083.4526">getOptions() : NodeOptions</text><ellipse cx="2177" cy="1093.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2186" y="1096.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="2177" cy="1105.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="2186" y="1109.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="2177" cy="1118.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2186" y="1121.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1131.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="507" x="2186" y="1134.6714">off(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1144.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="2186" y="1147.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="2177" cy="1157.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="2186" y="1160.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1169.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="2186" y="1173.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1182.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="585" x="2186" y="1185.8901">prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1195.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="614" x="2186" y="1198.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1208.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="434" x="2186" y="1211.4995">process(frame: DataFrame, options: GraphOptions) : Promise&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1221.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="631" x="2186" y="1224.3042">processObject(dataObject: DataObject, dataFrame: DataFrame, options: GraphOptions) : Promise&lt;DataObject&gt;</text><ellipse cx="2177" cy="1233.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2186" y="1237.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1246.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="2186" y="1249.9136">removeAllListeners(event: string | symbol) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1259.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="581" x="2186" y="1262.7183">removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1272.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="380" x="2186" y="1275.5229">setMaxListeners(n: number) : ObjectProcessingNode&lt;DataFrame&gt;</text><ellipse cx="2177" cy="1285.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2186" y="1288.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="2177" cy="1297.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="2186" y="1301.1323">setOptions(options: NodeOptions) : ObjectProcessingNode&lt;DataFrame&gt;</text><polygon fill="#FFFF44" points="2177,1305.7266,2181,1309.7266,2177,1313.7266,2173,1309.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2186" y="1313.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="2177,1318.5313,2181,1322.5313,2177,1326.5313,2173,1322.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="507" x="2186" y="1326.7417">findObjectByUID(uid: string, dataFrame: DataFrame, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="2177,1331.3359,2181,1335.3359,2177,1339.3359,2173,1335.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="2186" y="1339.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="2177,1344.1406,2181,1348.1406,2177,1352.1406,2173,1348.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="2186" y="1352.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[9026f8ae286f66d03c1db90fdfc1b55c]
reverse link Node<In, Out> to ProcessingNode<In, Out>--><path codeLine="62" d="M1429,395.6 C1429,408.58 1429,421.65 1429,434.65 " fill="none" id="Node&lt;In, Out&gt;-backto-ProcessingNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1422,395.32,1429,375.32,1436,395.32,1422,395.32" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7c6892a39b5e07aee3badcaf9009a90e]
reverse link ProcessingNode<In, Out> to FrameFilterNode<InOut>--><path codeLine="95" d="M1067.82,764.73 C951.55,807.23 823.49,858.46 710,914 C704.41,916.74 698.79,919.53 693.16,922.39 " fill="none" id="ProcessingNode&lt;In, Out&gt;-backto-FrameFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1065.56,758.1,1086.75,757.85,1070.34,771.26,1065.56,758.1" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[4ff6c4ef43955d33856ab0c0abf5880d]
reverse link ProcessingNode<In, Out> to MergeShape<InOut>--><path codeLine="128" d="M1264.35,870.23 C1252.18,886.84 1239.92,903.58 1227.79,920.13 " fill="none" id="ProcessingNode&lt;In, Out&gt;-backto-MergeShape&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1258.76,866.01,1276.23,854.01,1270.06,874.29,1258.76,866.01" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[24975ae3977385db430ad54588ae03e6]
reverse link ProcessingNode<In, Out> to FrameDelayNode<InOut>--><path codeLine="160" d="M1594.06,870.17 C1607.92,889.03 1621.89,908.05 1635.66,926.78 " fill="none" id="ProcessingNode&lt;In, Out&gt;-backto-FrameDelayNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1588.39,874.28,1582.19,854.01,1599.68,865.99,1588.39,874.28" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e66141f1a0809fed661810e37772588b]
reverse link ProcessingNode<In, Out> to ObjectProcessingNode<DataFrame>--><path codeLine="194" d="M1790.25,764.52 C1906.8,807.05 2035.22,858.35 2149,914 C2154.59,916.73 2160.21,919.53 2165.84,922.39 " fill="none" id="ProcessingNode&lt;In, Out&gt;-backto-ObjectProcessingNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1787.69,771.04,1771.28,757.64,1792.47,757.88,1787.69,771.04" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[4aeb64469e5f98a98ecd424e9b70f92d]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
abstract class "ProcessingNode<In, Out>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ProcessingNode<In, Out>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ProcessingNode<In, Out>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ProcessingNode<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode<In, Out>
    {abstract} +process(frame: In, options: PushOptions) : Promise<Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ProcessingNode<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : ProcessingNode<In, Out>
    +setMaxListeners(n: number) : ProcessingNode<In, Out>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ProcessingNode<In, Out>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
class "Node<In, Out>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Node<In, Out>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Node<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +setMaxListeners(n: number) : Node<In, Out>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : Node<In, Out>
}
"Node<In, Out>" <|- - "ProcessingNode<In, Out>"
class "FrameFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #filterFn : Function
    #options : ProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : FrameFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FrameFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FrameFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FrameFilterNode<InOut>
    +process(frame: InOut) : Promise<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FrameFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FrameFilterNode<InOut>
    +setMaxListeners(n: number) : FrameFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FrameFilterNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ProcessingNode<In, Out>" <|- - "FrameFilterNode<InOut>"
abstract class "MergeShape<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : MergeShapeOptions
    +addListener(eventName: string | symbol, listener: Function) : MergeShape<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    {abstract} +merge(frames: InOut[], key: string) : InOut
    +off(eventName: string | symbol, listener: Function) : MergeShape<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : MergeShape<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : MergeShape<InOut>
    +process(frame: InOut, options: PushOptions) : Promise<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : MergeShape<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : MergeShape<InOut>
    +setMaxListeners(n: number) : MergeShape<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : MergeShape<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ProcessingNode<In, Out>" <|- - "MergeShape<InOut>"
class "FrameDelayNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : FrameDelayNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FrameDelayNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FrameDelayNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FrameDelayNode<InOut>
    +process(frame: InOut) : Promise<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FrameDelayNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FrameDelayNode<InOut>
    +setMaxListeners(n: number) : FrameDelayNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FrameDelayNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ProcessingNode<In, Out>" <|- - "FrameDelayNode<InOut>"
abstract class "ObjectProcessingNode<DataFrame>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<DataFrame>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ObjectProcessingNode<DataFrame>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<DataFrame>
    +process(frame: DataFrame, options: GraphOptions) : Promise<DataFrame>
    {abstract} +processObject(dataObject: DataObject, dataFrame: DataFrame, options: GraphOptions) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ObjectProcessingNode<DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<DataFrame>
    +setMaxListeners(n: number) : ObjectProcessingNode<DataFrame>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ObjectProcessingNode<DataFrame>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: DataFrame, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ProcessingNode<In, Out>" <|- - "ObjectProcessingNode<DataFrame>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>