<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1539px" preserveAspectRatio="none" style="width:890px;height:1539px;background:#00000000;" version="1.1" viewBox="0 0 890 1539" width="890px" zoomAndPan="magnify"><defs><filter height="300%" id="f1nws4m7o9gskm" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[4c7b140fed10e9877852f4b8dc88c33d]
class Quaternion--><rect codeLine="58" fill="#FEFECE" filter="url(#f1nws4m7o9gskm)" height="705.8125" id="Quaternion" style="stroke:#A80036;stroke-width:1.5;" width="841" x="7" y="7"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="70" x="392.5" y="23.1387">Quaternion</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="30.9688" y2="30.9688"/><ellipse cx="18" cy="41.9688" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="27" y="45.1792">isQuaternion : true</text><ellipse cx="18" cy="54.7734" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="57.9839">w : number</text><ellipse cx="18" cy="67.5781" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="70.7886">x : number</text><ellipse cx="18" cy="80.3828" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="83.5933">y : number</text><ellipse cx="18" cy="93.1875" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="27" y="96.3979">z : number</text><ellipse cx="18" cy="105.9922" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="27" y="109.2026">_onChangeCallback : Function</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="115.7969" y2="115.7969"/><ellipse cx="18" cy="126.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="130.0073">angleTo(q: Quaternion) : number</text><ellipse cx="18" cy="139.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="27" y="142.812">clone() : Quaternion</text><ellipse cx="18" cy="152.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="155.6167">conjugate() : Quaternion</text><ellipse cx="18" cy="165.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="168.4214">copy(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="178.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="181.2261">dot(v: Quaternion) : number</text><ellipse cx="18" cy="190.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="27" y="194.0308">equals(v: Quaternion) : boolean</text><ellipse cx="18" cy="203.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="27" y="206.8354">fromArray(array: number[] | ArrayLike&lt;number&gt;, offset: number) : Quaternion</text><ellipse cx="18" cy="216.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="27" y="219.6401">fromAxisAngle&lt;T&gt;(this: T, axis: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="229.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="27" y="232.4448">fromAxisAngle&lt;T&gt;(this: T, axis: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="242.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="27" y="245.2495">fromAxisAngle&lt;T&gt;(this: T, axis: AxisAngle) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="254.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="27" y="258.0542">fromEuler&lt;T&gt;(this: T, euler: Vector3) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="267.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="311" x="27" y="270.8589">fromEuler&lt;T&gt;(this: T, euler: Euler) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="280.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="283.6636">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="293.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="296.4683">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="306.0625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="27" y="309.2729">fromEuler&lt;T&gt;(this: T, euler: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="318.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="381" x="27" y="322.0776">fromRotationMatrix&lt;T&gt;(this: T, matrix: Matrix4) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="331.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="27" y="334.8823">fromThreeJS&lt;T&gt;(threeQuaternion: Quaternion) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="344.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="27" y="347.687">identity() : Quaternion</text><ellipse cx="18" cy="357.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="27" y="360.4917">inverse() : Quaternion</text><ellipse cx="18" cy="370.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="27" y="373.2964">invert() : Quaternion</text><ellipse cx="18" cy="382.8906" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="99" x="27" y="386.1011">length() : number</text><ellipse cx="18" cy="395.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="27" y="398.9058">lengthSq() : number</text><ellipse cx="18" cy="408.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="411.7104">multiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="421.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="361" x="27" y="424.5151">multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion</text><ellipse cx="18" cy="434.1094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="27" y="437.3198">multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]</text><ellipse cx="18" cy="446.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="161" x="27" y="450.1245">multiplyVector3(v: any) : any</text><ellipse cx="18" cy="459.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="462.9292">normalize() : Quaternion</text><ellipse cx="18" cy="472.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="27" y="475.7339">premultiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="485.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="27" y="488.5386">random() : Quaternion</text><ellipse cx="18" cy="498.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="27" y="501.3433">rotateTowards(q: Quaternion, step: number) : Quaternion</text><ellipse cx="18" cy="510.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="27" y="514.1479">set(x: number, y: number, z: number, w: number) : Quaternion</text><ellipse cx="18" cy="523.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="27" y="526.9526">setFromAxisAngle(axis: Vector3, angle: number) : Quaternion</text><ellipse cx="18" cy="536.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="27" y="539.7573">setFromEuler(euler: Euler, update: boolean) : Quaternion</text><ellipse cx="18" cy="549.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="270" x="27" y="552.562">setFromRotationMatrix(m: Matrix4) : Quaternion</text><ellipse cx="18" cy="562.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="360" x="27" y="565.3667">setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion</text><ellipse cx="18" cy="574.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="27" y="578.1714">slerp(qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="587.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="27" y="590.9761">slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number</text><ellipse cx="18" cy="600.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="805" x="27" y="603.7808">slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion</text><ellipse cx="18" cy="613.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="27" y="616.5854">slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="626.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="629.3901">toArray(array: number[], offset: number) : number[]</text><ellipse cx="18" cy="638.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="27" y="642.1948">toArray(array: ArrayLike&lt;number&gt;, offset: number) : ArrayLike&lt;number&gt;</text><ellipse cx="18" cy="651.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="27" y="654.9995">toAxisAngle() : AxisAngle</text><ellipse cx="18" cy="664.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="27" y="667.8042">toEuler(order: EulerOrder) : Euler</text><ellipse cx="18" cy="677.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="152" x="27" y="680.6089">toRotationMatrix() : Matrix4</text><ellipse cx="18" cy="690.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="27" y="693.4136">[iterator]() : Generator&lt;number, void, unknown&gt;</text><ellipse cx="18" cy="703.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="27" y="706.2183">_onChange(callback: Function) : Quaternion</text><!--MD5=[603b5c4369211cc414255b54ba6df74f]
class Orientation--><rect codeLine="61" fill="#FEFECE" filter="url(#f1nws4m7o9gskm)" height="752.2578" id="Orientation" style="stroke:#A80036;stroke-width:1.5;" width="841" x="7" y="773"/><ellipse cx="388.25" cy="789" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M391.2188,794.6406 Q390.6406,794.9375 390,795.0781 Q389.3594,795.2344 388.6563,795.2344 Q386.1563,795.2344 384.8281,793.5938 Q383.5156,791.9375 383.5156,788.8125 Q383.5156,785.6875 384.8281,784.0313 Q386.1563,782.375 388.6563,782.375 Q389.3594,782.375 390,782.5313 Q390.6563,782.6875 391.2188,782.9844 L391.2188,785.7031 Q390.5938,785.125 390,784.8594 Q389.4063,784.5781 388.7813,784.5781 Q387.4375,784.5781 386.75,785.6563 Q386.0625,786.7188 386.0625,788.8125 Q386.0625,790.9063 386.75,791.9844 Q387.4375,793.0469 388.7813,793.0469 Q389.4063,793.0469 390,792.7813 Q390.5938,792.5 391.2188,791.9219 L391.2188,794.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="70" x="408.75" y="793.1543">Orientation</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="805" y2="805"/><ellipse cx="18" cy="816" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="235" x="27" y="819.2104">accuracy : Accuracy&lt;AngleUnit, number&gt;</text><ellipse cx="18" cy="828.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="27" y="832.0151">isQuaternion : true</text><ellipse cx="18" cy="841.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="27" y="844.8198">timestamp : number</text><ellipse cx="18" cy="854.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="857.6245">w : number</text><ellipse cx="18" cy="867.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="870.4292">x : number</text><ellipse cx="18" cy="880.0234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="883.2339">y : number</text><ellipse cx="18" cy="892.8281" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="27" y="896.0386">z : number</text><ellipse cx="18" cy="905.6328" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="27" y="908.8433">_onChangeCallback : Function</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="915.4375" y2="915.4375"/><ellipse cx="18" cy="926.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="929.6479">angleTo(q: Quaternion) : number</text><ellipse cx="18" cy="939.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="27" y="942.4526">clone() : Orientation</text><ellipse cx="18" cy="952.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="955.2573">conjugate() : Quaternion</text><ellipse cx="18" cy="964.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="968.062">copy(q: Quaternion) : Orientation</text><ellipse cx="18" cy="977.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="980.8667">dot(v: Quaternion) : number</text><ellipse cx="18" cy="990.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="27" y="993.6714">equals(v: Quaternion) : boolean</text><ellipse cx="18" cy="1003.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="27" y="1006.4761">fromArray(array: number[] | ArrayLike&lt;number&gt;, offset: number) : Orientation</text><ellipse cx="18" cy="1016.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="27" y="1019.2808">fromAxisAngle&lt;T&gt;(this: T, axis: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1028.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="27" y="1032.0854">fromAxisAngle&lt;T&gt;(this: T, axis: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1041.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="27" y="1044.8901">fromAxisAngle&lt;T&gt;(this: T, axis: AxisAngle) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1054.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="27" y="1057.6948">fromEuler&lt;T&gt;(this: T, euler: Vector3) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1067.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="311" x="27" y="1070.4995">fromEuler&lt;T&gt;(this: T, euler: Euler) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1080.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1083.3042">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1092.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1096.1089">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1105.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="27" y="1108.9136">fromEuler&lt;T&gt;(this: T, euler: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1118.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="344" x="27" y="1121.7183">fromQuaternion(quat: Quaternion | Quaternion) : Orientation</text><ellipse cx="18" cy="1131.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="381" x="27" y="1134.5229">fromRotationMatrix&lt;T&gt;(this: T, matrix: Matrix4) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1144.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="27" y="1147.3276">fromThreeJS&lt;T&gt;(threeQuaternion: Quaternion) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1156.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="27" y="1160.1323">identity() : Quaternion</text><ellipse cx="18" cy="1169.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="27" y="1172.937">inverse() : Quaternion</text><ellipse cx="18" cy="1182.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="27" y="1185.7417">invert() : Quaternion</text><ellipse cx="18" cy="1195.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="99" x="27" y="1198.5464">length() : number</text><ellipse cx="18" cy="1208.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="27" y="1211.3511">lengthSq() : number</text><ellipse cx="18" cy="1220.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="1224.1558">multiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="1233.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="361" x="27" y="1236.9604">multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion</text><ellipse cx="18" cy="1246.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="27" y="1249.7651">multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]</text><ellipse cx="18" cy="1259.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="161" x="27" y="1262.5698">multiplyVector3(v: any) : any</text><ellipse cx="18" cy="1272.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="1275.3745">normalize() : Quaternion</text><ellipse cx="18" cy="1284.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="27" y="1288.1792">premultiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="1297.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="27" y="1300.9839">random() : Quaternion</text><ellipse cx="18" cy="1310.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="27" y="1313.7886">rotateTowards(q: Quaternion, step: number) : Quaternion</text><ellipse cx="18" cy="1323.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="27" y="1326.5933">set(x: number, y: number, z: number, w: number) : Quaternion</text><ellipse cx="18" cy="1336.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="27" y="1339.3979">setFromAxisAngle(axis: Vector3, angle: number) : Quaternion</text><ellipse cx="18" cy="1348.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="27" y="1352.2026">setFromEuler(euler: Euler, update: boolean) : Quaternion</text><ellipse cx="18" cy="1361.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="270" x="27" y="1365.0073">setFromRotationMatrix(m: Matrix4) : Quaternion</text><ellipse cx="18" cy="1374.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="360" x="27" y="1377.812">setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion</text><ellipse cx="18" cy="1387.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="27" y="1390.6167">slerp(qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="1400.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="27" y="1403.4214">slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number</text><ellipse cx="18" cy="1413.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="805" x="27" y="1416.2261">slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion</text><ellipse cx="18" cy="1425.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="27" y="1429.0308">slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="1438.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="1441.8354">toArray(array: number[], offset: number) : number[]</text><ellipse cx="18" cy="1451.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="27" y="1454.6401">toArray(array: ArrayLike&lt;number&gt;, offset: number) : ArrayLike&lt;number&gt;</text><ellipse cx="18" cy="1464.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="27" y="1467.4448">toAxisAngle() : AxisAngle</text><ellipse cx="18" cy="1477.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="27" y="1480.2495">toEuler(order: EulerOrder) : Euler</text><ellipse cx="18" cy="1489.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="152" x="27" y="1493.0542">toRotationMatrix() : Matrix4</text><ellipse cx="18" cy="1502.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="27" y="1505.8589">[iterator]() : Generator&lt;number, void, unknown&gt;</text><ellipse cx="18" cy="1515.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="27" y="1518.6636">_onChange(callback: Function) : Quaternion</text><!--MD5=[afed63d6c5d16767769e47e62ea63651]
reverse link Quaternion to Quaternion--><path codeLine="60" d="M860.67,279.21 C874.89,300.88 883,327.81 883,360 C883,400.59 870.11,432.82 848.31,456.69 " fill="none" id="Quaternion-backto-Quaternion" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="855.05,283.4,848.31,263.31,866.11,274.81,855.05,283.4" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ef94c5dc5d3c3818010c68cc49d50cc2]
reverse link Quaternion to Orientation--><path codeLine="118" d="M427.5,733.11 C427.5,746.34 427.5,759.6 427.5,772.84 " fill="none" id="Quaternion-backto-Orientation" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="420.5,733.07,427.5,713.07,434.5,733.07,420.5,733.07" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9ad3fda9ac71837e973e8d7ffc53aafc]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "Quaternion" {
    +isQuaternion : true
    +w : number
    +x : number
    +y : number
    +z : number
    +_onChangeCallback : Function
    +angleTo(q: Quaternion) : number
    +clone() : Quaternion
    +conjugate() : Quaternion
    +copy(q: Quaternion) : Quaternion
    +dot(v: Quaternion) : number
    +equals(v: Quaternion) : boolean
    +fromArray(array: number[] | ArrayLike<number>, offset: number) : Quaternion
    {static} +fromAxisAngle<T>(this: T, axis: Object) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: number[]) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: AxisAngle) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Vector3) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Euler) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: number[]) : InstanceType<T>
    {static} +fromRotationMatrix<T>(this: T, matrix: Matrix4) : InstanceType<T>
    {static} +fromThreeJS<T>(threeQuaternion: Quaternion) : InstanceType<T>
    +identity() : Quaternion
    +inverse() : Quaternion
    +invert() : Quaternion
    +length() : number
    +lengthSq() : number
    +multiply(q: Quaternion) : Quaternion
    +multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion
    {static} +multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]
    +multiplyVector3(v: any) : any
    +normalize() : Quaternion
    +premultiply(q: Quaternion) : Quaternion
    +random() : Quaternion
    +rotateTowards(q: Quaternion, step: number) : Quaternion
    +set(x: number, y: number, z: number, w: number) : Quaternion
    +setFromAxisAngle(axis: Vector3, angle: number) : Quaternion
    +setFromEuler(euler: Euler, update: boolean) : Quaternion
    +setFromRotationMatrix(m: Matrix4) : Quaternion
    +setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion
    +slerp(qb: Quaternion, t: number) : Quaternion
    {static} +slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number
    {static} +slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion
    +slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion
    +toArray(array: number[], offset: number) : number[]
    +toArray(array: ArrayLike<number>, offset: number) : ArrayLike<number>
    +toAxisAngle() : AxisAngle
    +toEuler(order: EulerOrder) : Euler
    +toRotationMatrix() : Matrix4
    +[iterator]() : Generator<number, void, unknown>
    +_onChange(callback: Function) : Quaternion
}
class "Quaternion"
hide "Quaternion" circle
"Quaternion" <|- - "Quaternion"
class "Orientation" {
    +accuracy : Accuracy<AngleUnit, number>
    +isQuaternion : true
    +timestamp : number
    +w : number
    +x : number
    +y : number
    +z : number
    +_onChangeCallback : Function
    +angleTo(q: Quaternion) : number
    +clone() : Orientation
    +conjugate() : Quaternion
    +copy(q: Quaternion) : Orientation
    +dot(v: Quaternion) : number
    +equals(v: Quaternion) : boolean
    +fromArray(array: number[] | ArrayLike<number>, offset: number) : Orientation
    {static} +fromAxisAngle<T>(this: T, axis: Object) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: number[]) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: AxisAngle) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Vector3) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Euler) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: number[]) : InstanceType<T>
    {static} +fromQuaternion(quat: Quaternion | Quaternion) : Orientation
    {static} +fromRotationMatrix<T>(this: T, matrix: Matrix4) : InstanceType<T>
    {static} +fromThreeJS<T>(threeQuaternion: Quaternion) : InstanceType<T>
    +identity() : Quaternion
    +inverse() : Quaternion
    +invert() : Quaternion
    +length() : number
    +lengthSq() : number
    +multiply(q: Quaternion) : Quaternion
    +multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion
    {static} +multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]
    +multiplyVector3(v: any) : any
    +normalize() : Quaternion
    +premultiply(q: Quaternion) : Quaternion
    +random() : Quaternion
    +rotateTowards(q: Quaternion, step: number) : Quaternion
    +set(x: number, y: number, z: number, w: number) : Quaternion
    +setFromAxisAngle(axis: Vector3, angle: number) : Quaternion
    +setFromEuler(euler: Euler, update: boolean) : Quaternion
    +setFromRotationMatrix(m: Matrix4) : Quaternion
    +setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion
    +slerp(qb: Quaternion, t: number) : Quaternion
    {static} +slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number
    {static} +slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion
    +slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion
    +toArray(array: number[], offset: number) : number[]
    +toArray(array: ArrayLike<number>, offset: number) : ArrayLike<number>
    +toAxisAngle() : AxisAngle
    +toEuler(order: EulerOrder) : Euler
    +toRotationMatrix() : Matrix4
    +[iterator]() : Generator<number, void, unknown>
    +_onChange(callback: Function) : Quaternion
}
"Quaternion" <|- - "Orientation"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>