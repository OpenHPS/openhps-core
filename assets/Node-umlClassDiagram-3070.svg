<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="5574px" preserveAspectRatio="none" style="width:1647px;height:5574px;background:#00000000;" version="1.1" viewBox="0 0 1647 5574" width="1647px" zoomAndPan="magnify"><defs><filter height="300%" id="f41iv9afl0zth" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[1f35e560ec16ab5e3b805489929ed19a]
class Node<In, Out>--><rect codeLine="5" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="368.1172" id="Node&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="205" y="2554.5"/><ellipse cx="495.75" cy="2570.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M498.7188,2576.1406 Q498.1406,2576.4375 497.5,2576.5781 Q496.8594,2576.7344 496.1563,2576.7344 Q493.6563,2576.7344 492.3281,2575.0938 Q491.0156,2573.4375 491.0156,2570.3125 Q491.0156,2567.1875 492.3281,2565.5313 Q493.6563,2563.875 496.1563,2563.875 Q496.8594,2563.875 497.5,2564.0313 Q498.1563,2564.1875 498.7188,2564.4844 L498.7188,2567.2031 Q498.0938,2566.625 497.5,2566.3594 Q496.9063,2566.0781 496.2813,2566.0781 Q494.9375,2566.0781 494.25,2567.1563 Q493.5625,2568.2188 493.5625,2570.3125 Q493.5625,2572.4063 494.25,2573.4844 Q494.9375,2574.5469 496.2813,2574.5469 Q496.9063,2574.5469 497.5,2574.2813 Q498.0938,2574 498.7188,2573.4219 L498.7188,2576.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="94" x="516.25" y="2574.6543">Node&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="206" x2="888" y1="2586.5" y2="2586.5"/><ellipse cx="216" cy="2597.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="225" y="2600.7104">captureRejections : boolean</text><ellipse cx="216" cy="2610.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="225" y="2613.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="216" cy="2623.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="225" y="2626.3198">defaultMaxListeners : number</text><ellipse cx="216" cy="2635.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="225" y="2639.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="216,2643.7188,220,2647.7188,216,2651.7188,212,2647.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="225" y="2651.9292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="206" x2="888" y1="2658.5234" y2="2658.5234"/><ellipse cx="216" cy="2669.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="436" x="225" y="2672.7339">addListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2682.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="225" y="2685.5386">eventNames() : (string | symbol)[]</text><ellipse cx="216" cy="2695.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="225" y="2698.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="216" cy="2707.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="225" y="2711.1479">getMaxListeners() : number</text><ellipse cx="216" cy="2720.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="225" y="2723.9526">getOptions() : NodeOptions</text><ellipse cx="216" cy="2733.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="225" y="2736.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="216" cy="2746.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="225" y="2749.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="216" cy="2759.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="225" y="2762.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="216" cy="2771.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="384" x="225" y="2775.1714">off(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2784.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="225" y="2787.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="216" cy="2797.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="225" y="2800.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="216" cy="2810.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="225" y="2813.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="216" cy="2823.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="225" y="2826.3901">prependListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2835.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="225" y="2839.1948">prependOnceListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2848.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="225" y="2851.9995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="216" cy="2861.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="225" y="2864.8042">removeAllListeners(event: string | symbol) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2874.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="458" x="225" y="2877.6089">removeListener(eventName: string | symbol, listener: Function) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2887.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="257" x="225" y="2890.4136">setMaxListeners(n: number) : Node&lt;In, Out&gt;</text><ellipse cx="216" cy="2900.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="225" y="2903.2183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="216" cy="2912.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="290" x="225" y="2916.0229">setOptions(options: NodeOptions) : Node&lt;In, Out&gt;</text><!--MD5=[170c92654dda4ed4637a63a10e48a1a3]
class GraphNode<In, Out>--><rect codeLine="32" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="23.9688" id="GraphNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="138" x="7" y="2726.5"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="132" x="10" y="2742.6387">GraphNode&lt;In, Out&gt;</text><!--MD5=[03f896312f5a88d7ebc773b69c4c83f6]
class SinkNode<DataFrame>--><rect codeLine="35" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="406.5313" id="SinkNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="7"/><ellipse cx="1212.75" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1212.8594,18.3438 L1211.7031,23.4219 L1214.0313,23.4219 L1212.8594,18.3438 Z M1211.375,16.1094 L1214.3594,16.1094 L1217.7188,28.5 L1215.2656,28.5 L1214.5,25.4375 L1211.2188,25.4375 L1210.4688,28.5 L1208.0313,28.5 L1211.375,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="148" x="1233.25" y="27.1543">SinkNode&lt;DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="39" y2="39"/><ellipse cx="960" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="53.2104">captureRejections : boolean</text><ellipse cx="960" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="78.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,96.2188,964,100.2188,960,104.2188,956,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="969" y="104.4292">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="111.0234" y2="111.0234"/><ellipse cx="960" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="484" x="969" y="125.2339">addListener(eventName: string | symbol, listener: Function) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="163.6479">getMaxListeners() : number</text><ellipse cx="960" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="960" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="969" y="227.6714">off(eventName: string | symbol, listener: Function) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="462" x="969" y="278.8901">onPush(frame: DataFrame | DataFrame[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="960" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="510" x="969" y="291.6948">prependListener(eventName: string | symbol, listener: Function) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="539" x="969" y="304.4995">prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="443" x="969" y="317.3042">push(data: DataFrame | DataFrame[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="960" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="330.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="387" x="969" y="342.9136">removeAllListeners(event: string | symbol) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="506" x="969" y="355.7183">removeListener(eventName: string | symbol, listener: Function) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="305" x="969" y="368.5229">setMaxListeners(n: number) : SinkNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="381.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="338" x="969" y="394.1323">setOptions(options: NodeOptions) : SinkNode&lt;DataFrame&gt;</text><polygon fill="#FFFF44" points="960,398.7266,964,402.7266,960,406.7266,956,402.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="969" y="406.937">persistDataObject(frame: DataFrame) : Promise&lt;void&gt;</text><!--MD5=[e5f875f82b3930ebdc4ff05751a1280a]
class SourceNode<DataFrame>--><rect codeLine="66" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="419.3359" id="SourceNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="449"/><ellipse cx="1203.75" cy="465" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1203.8594,460.3438 L1202.7031,465.4219 L1205.0313,465.4219 L1203.8594,460.3438 Z M1202.375,458.1094 L1205.3594,458.1094 L1208.7188,470.5 L1206.2656,470.5 L1205.5,467.4375 L1202.2188,467.4375 L1201.4688,470.5 L1199.0313,470.5 L1202.375,458.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="166" x="1224.25" y="469.1543">SourceNode&lt;DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="481" y2="481"/><ellipse cx="960" cy="492" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="495.2104">captureRejections : boolean</text><ellipse cx="960" cy="504.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="508.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="517.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="520.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="530.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="533.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,538.2188,964,542.2188,960,546.2188,956,542.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="167" x="969" y="546.4292">options : SourceNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="553.0234" y2="553.0234"/><ellipse cx="960" cy="564.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="500" x="969" y="567.2339">addListener(eventName: string | symbol, listener: Function) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="576.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="580.0386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="589.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="592.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="602.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="605.6479">getMaxListeners() : number</text><ellipse cx="960" cy="615.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="618.4526">getOptions() : NodeOptions</text><ellipse cx="960" cy="628.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="631.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="640.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="644.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="653.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="656.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="666.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="448" x="969" y="669.6714">off(eventName: string | symbol, listener: Function) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="679.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="682.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="692.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="695.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="704.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="708.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="717.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="292" x="969" y="720.8901">onPull(options: PullOptions) : Promise&lt;DataFrame&gt;</text><ellipse cx="960" cy="730.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="526" x="969" y="733.6948">prependListener(eventName: string | symbol, listener: Function) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="743.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="555" x="969" y="746.4995">prependOnceListener(eventName: string | symbol, listener: Function) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="756.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="759.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="768.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="403" x="969" y="772.1089">removeAllListeners(event: string | symbol) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="781.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="522" x="969" y="784.9136">removeListener(eventName: string | symbol, listener: Function) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="794.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="321" x="969" y="797.7183">setMaxListeners(n: number) : SourceNode&lt;DataFrame&gt;</text><ellipse cx="960" cy="807.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="810.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="820.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="354" x="969" y="823.3276">setOptions(options: NodeOptions) : SourceNode&lt;DataFrame&gt;</text><polygon fill="#FFFF44" points="960,827.9219,964,831.9219,960,835.9219,956,831.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="324" x="969" y="836.1323">mergeFrame(frame: DataFrame) : Promise&lt;DataFrame&gt;</text><polygon fill="#FFFF44" points="960,840.7266,964,844.7266,960,848.7266,956,844.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="415" x="969" y="848.937">mergeObject(newObject: DataObject, oldObject: DataObject) : DataObject</text><polygon fill="#FFFF44" points="960,853.5313,964,857.5313,960,861.5313,956,857.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="195" x="969" y="861.7417">registerService() : Promise&lt;void&gt;</text><!--MD5=[a8bb081b5e3ac259779e78b844e55417]
class BalanceNode<InOut>--><rect codeLine="98" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="380.9219" id="BalanceNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="903"/><ellipse cx="1218.75" cy="919" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1221.7188,924.6406 Q1221.1406,924.9375 1220.5,925.0781 Q1219.8594,925.2344 1219.1563,925.2344 Q1216.6563,925.2344 1215.3281,923.5938 Q1214.0156,921.9375 1214.0156,918.8125 Q1214.0156,915.6875 1215.3281,914.0313 Q1216.6563,912.375 1219.1563,912.375 Q1219.8594,912.375 1220.5,912.5313 Q1221.1563,912.6875 1221.7188,912.9844 L1221.7188,915.7031 Q1221.0938,915.125 1220.5,914.8594 Q1219.9063,914.5781 1219.2813,914.5781 Q1217.9375,914.5781 1217.25,915.6563 Q1216.5625,916.7188 1216.5625,918.8125 Q1216.5625,920.9063 1217.25,921.9844 Q1217.9375,923.0469 1219.2813,923.0469 Q1219.9063,923.0469 1220.5,922.7813 Q1221.0938,922.5 1221.7188,921.9219 L1221.7188,924.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="136" x="1239.25" y="923.1543">BalanceNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="935" y2="935"/><ellipse cx="960" cy="946" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="949.2104">captureRejections : boolean</text><ellipse cx="960" cy="958.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="962.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="971.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="974.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="984.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="987.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,992.2188,964,996.2188,960,1000.2188,956,996.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="969" y="1000.4292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="1007.0234" y2="1007.0234"/><ellipse cx="960" cy="1018.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="473" x="969" y="1021.2339">addListener(eventName: string | symbol, listener: Function) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1030.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="1034.0386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="1043.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="1046.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="1056.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="1059.6479">getMaxListeners() : number</text><ellipse cx="960" cy="1069.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="1072.4526">getOptions() : NodeOptions</text><ellipse cx="960" cy="1082.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="1085.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="1094.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="1098.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="1107.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="1110.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="1120.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="421" x="969" y="1123.6714">off(eventName: string | symbol, listener: Function) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1133.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="1136.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="1146.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="1149.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="1158.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="1162.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="1171.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="499" x="969" y="1174.8901">prependListener(eventName: string | symbol, listener: Function) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1184.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="528" x="969" y="1187.6948">prependOnceListener(eventName: string | symbol, listener: Function) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1197.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="258" x="969" y="1200.4995">push(frame: InOut | InOut[]) : Promise&lt;void&gt;</text><ellipse cx="960" cy="1210.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="1213.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="1222.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="376" x="969" y="1226.1089">removeAllListeners(event: string | symbol) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1235.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="495" x="969" y="1238.9136">removeListener(eventName: string | symbol, listener: Function) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1248.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="969" y="1251.7183">setMaxListeners(n: number) : BalanceNode&lt;InOut&gt;</text><ellipse cx="960" cy="1261.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="1264.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="1274.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="327" x="969" y="1277.3276">setOptions(options: NodeOptions) : BalanceNode&lt;InOut&gt;</text><!--MD5=[b4666188cfc8b763e60c6f943dbb6792]
class TimedPullNode<InOut>--><rect codeLine="127" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="393.7266" id="TimedPullNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="1319.5"/><ellipse cx="1214.25" cy="1335.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1217.2188,1341.1406 Q1216.6406,1341.4375 1216,1341.5781 Q1215.3594,1341.7344 1214.6563,1341.7344 Q1212.1563,1341.7344 1210.8281,1340.0938 Q1209.5156,1338.4375 1209.5156,1335.3125 Q1209.5156,1332.1875 1210.8281,1330.5313 Q1212.1563,1328.875 1214.6563,1328.875 Q1215.3594,1328.875 1216,1329.0313 Q1216.6563,1329.1875 1217.2188,1329.4844 L1217.2188,1332.2031 Q1216.5938,1331.625 1216,1331.3594 Q1215.4063,1331.0781 1214.7813,1331.0781 Q1213.4375,1331.0781 1212.75,1332.1563 Q1212.0625,1333.2188 1212.0625,1335.3125 Q1212.0625,1337.4063 1212.75,1338.4844 Q1213.4375,1339.5469 1214.7813,1339.5469 Q1215.4063,1339.5469 1216,1339.2813 Q1216.5938,1339 1217.2188,1338.4219 L1217.2188,1341.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="145" x="1234.75" y="1339.6543">TimedPullNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="1351.5" y2="1351.5"/><ellipse cx="960" cy="1362.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="1365.7104">captureRejections : boolean</text><ellipse cx="960" cy="1375.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="1378.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="1388.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="1391.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="1400.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="1404.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,1408.7188,964,1412.7188,960,1416.7188,956,1412.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="969" y="1416.9292">options : TimedPullOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="1423.5234" y2="1423.5234"/><ellipse cx="960" cy="1434.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="483" x="969" y="1437.7339">addListener(eventName: string | symbol, listener: Function) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1447.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="1450.5386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="1460.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="1463.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="1472.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="1476.1479">getMaxListeners() : number</text><ellipse cx="960" cy="1485.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="1488.9526">getOptions() : NodeOptions</text><ellipse cx="960" cy="1498.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="1501.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="1511.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="1514.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="1524.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="1527.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="1536.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="431" x="969" y="1540.1714">off(eventName: string | symbol, listener: Function) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1549.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="1552.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="1562.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="1565.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="1575.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="1578.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="1588.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="509" x="969" y="1591.3901">prependListener(eventName: string | symbol, listener: Function) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1600.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="538" x="969" y="1604.1948">prependOnceListener(eventName: string | symbol, listener: Function) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1613.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="1616.9995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="1626.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="386" x="969" y="1629.8042">removeAllListeners(event: string | symbol) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1639.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="969" y="1642.6089">removeListener(eventName: string | symbol, listener: Function) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1652.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="304" x="969" y="1655.4136">setMaxListeners(n: number) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1665.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="1668.2183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="1677.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="337" x="969" y="1681.0229">setOptions(options: NodeOptions) : TimedPullNode&lt;InOut&gt;</text><ellipse cx="960" cy="1690.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="969" y="1693.8276">start() : Promise&lt;void&gt;</text><ellipse cx="960" cy="1703.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="68" x="969" y="1706.6323">stop() : void</text><!--MD5=[4d3f355e1cb2a7292a59b88e9dfa8575]
class FrameFlattenNode<InOut>--><rect codeLine="157" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="368.1172" id="FrameFlattenNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="1748.5"/><ellipse cx="1202.25" cy="1764.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1205.2188,1770.1406 Q1204.6406,1770.4375 1204,1770.5781 Q1203.3594,1770.7344 1202.6563,1770.7344 Q1200.1563,1770.7344 1198.8281,1769.0938 Q1197.5156,1767.4375 1197.5156,1764.3125 Q1197.5156,1761.1875 1198.8281,1759.5313 Q1200.1563,1757.875 1202.6563,1757.875 Q1203.3594,1757.875 1204,1758.0313 Q1204.6563,1758.1875 1205.2188,1758.4844 L1205.2188,1761.2031 Q1204.5938,1760.625 1204,1760.3594 Q1203.4063,1760.0781 1202.7813,1760.0781 Q1201.4375,1760.0781 1200.75,1761.1563 Q1200.0625,1762.2188 1200.0625,1764.3125 Q1200.0625,1766.4063 1200.75,1767.4844 Q1201.4375,1768.5469 1202.7813,1768.5469 Q1203.4063,1768.5469 1204,1768.2813 Q1204.5938,1768 1205.2188,1767.4219 L1205.2188,1770.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="169" x="1222.75" y="1768.6543">FrameFlattenNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="1780.5" y2="1780.5"/><ellipse cx="960" cy="1791.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="1794.7104">captureRejections : boolean</text><ellipse cx="960" cy="1804.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="1807.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="1817.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="1820.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="1829.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="1833.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,1837.7188,964,1841.7188,960,1845.7188,956,1841.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="969" y="1845.9292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="1852.5234" y2="1852.5234"/><ellipse cx="960" cy="1863.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="502" x="969" y="1866.7339">addListener(eventName: string | symbol, listener: Function) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="1876.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="1879.5386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="1889.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="1892.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="1901.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="1905.1479">getMaxListeners() : number</text><ellipse cx="960" cy="1914.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="1917.9526">getOptions() : NodeOptions</text><ellipse cx="960" cy="1927.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="1930.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="1940.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="1943.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="1953.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="1956.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="1965.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="450" x="969" y="1969.1714">off(eventName: string | symbol, listener: Function) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="1978.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="1981.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="1991.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="1994.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2004.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="2007.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2017.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="528" x="969" y="2020.3901">prependListener(eventName: string | symbol, listener: Function) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="2029.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="557" x="969" y="2033.1948">prependOnceListener(eventName: string | symbol, listener: Function) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="2042.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="2045.9995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="2055.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="969" y="2058.8042">removeAllListeners(event: string | symbol) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="2068.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="524" x="969" y="2071.6089">removeListener(eventName: string | symbol, listener: Function) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="2081.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="323" x="969" y="2084.4136">setMaxListeners(n: number) : FrameFlattenNode&lt;InOut&gt;</text><ellipse cx="960" cy="2094.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="2097.2183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="2106.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="356" x="969" y="2110.0229">setOptions(options: NodeOptions) : FrameFlattenNode&lt;InOut&gt;</text><!--MD5=[ce78c125914c70c55342f015eed851a8]
class FrameChunkNode<InOut>--><rect codeLine="185" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="368.1172" id="FrameChunkNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="2151.5"/><ellipse cx="1204.75" cy="2167.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1207.7188,2173.1406 Q1207.1406,2173.4375 1206.5,2173.5781 Q1205.8594,2173.7344 1205.1563,2173.7344 Q1202.6563,2173.7344 1201.3281,2172.0938 Q1200.0156,2170.4375 1200.0156,2167.3125 Q1200.0156,2164.1875 1201.3281,2162.5313 Q1202.6563,2160.875 1205.1563,2160.875 Q1205.8594,2160.875 1206.5,2161.0313 Q1207.1563,2161.1875 1207.7188,2161.4844 L1207.7188,2164.2031 Q1207.0938,2163.625 1206.5,2163.3594 Q1205.9063,2163.0781 1205.2813,2163.0781 Q1203.9375,2163.0781 1203.25,2164.1563 Q1202.5625,2165.2188 1202.5625,2167.3125 Q1202.5625,2169.4063 1203.25,2170.4844 Q1203.9375,2171.5469 1205.2813,2171.5469 Q1205.9063,2171.5469 1206.5,2171.2813 Q1207.0938,2171 1207.7188,2170.4219 L1207.7188,2173.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="164" x="1225.25" y="2171.6543">FrameChunkNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="2183.5" y2="2183.5"/><ellipse cx="960" cy="2194.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="2197.7104">captureRejections : boolean</text><ellipse cx="960" cy="2207.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="2210.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="2220.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="2223.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="2232.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="2236.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,2240.7188,964,2244.7188,960,2248.7188,956,2244.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="969" y="2248.9292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="2255.5234" y2="2255.5234"/><ellipse cx="960" cy="2266.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="499" x="969" y="2269.7339">addListener(eventName: string | symbol, listener: Function) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2279.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="2282.5386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="2292.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="2295.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="2304.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="2308.1479">getMaxListeners() : number</text><ellipse cx="960" cy="2317.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="2320.9526">getOptions() : NodeOptions</text><ellipse cx="960" cy="2330.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="2333.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="2343.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="2346.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="2356.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="2359.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="2368.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="447" x="969" y="2372.1714">off(eventName: string | symbol, listener: Function) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2381.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="2384.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="2394.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="2397.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2407.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="2410.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2420.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="525" x="969" y="2423.3901">prependListener(eventName: string | symbol, listener: Function) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2432.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="554" x="969" y="2436.1948">prependOnceListener(eventName: string | symbol, listener: Function) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2445.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="2448.9995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="2458.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="402" x="969" y="2461.8042">removeAllListeners(event: string | symbol) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2471.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="969" y="2474.6089">removeListener(eventName: string | symbol, listener: Function) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2484.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="320" x="969" y="2487.4136">setMaxListeners(n: number) : FrameChunkNode&lt;InOut&gt;</text><ellipse cx="960" cy="2497.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="2500.2183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="2509.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="969" y="2513.0229">setOptions(options: NodeOptions) : FrameChunkNode&lt;InOut&gt;</text><!--MD5=[54733ab05bae8161425106c115541927]
class FrameCloneNode<InOut>--><rect codeLine="213" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="368.1172" id="FrameCloneNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="2554.5"/><ellipse cx="1206.75" cy="2570.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1209.7188,2576.1406 Q1209.1406,2576.4375 1208.5,2576.5781 Q1207.8594,2576.7344 1207.1563,2576.7344 Q1204.6563,2576.7344 1203.3281,2575.0938 Q1202.0156,2573.4375 1202.0156,2570.3125 Q1202.0156,2567.1875 1203.3281,2565.5313 Q1204.6563,2563.875 1207.1563,2563.875 Q1207.8594,2563.875 1208.5,2564.0313 Q1209.1563,2564.1875 1209.7188,2564.4844 L1209.7188,2567.2031 Q1209.0938,2566.625 1208.5,2566.3594 Q1207.9063,2566.0781 1207.2813,2566.0781 Q1205.9375,2566.0781 1205.25,2567.1563 Q1204.5625,2568.2188 1204.5625,2570.3125 Q1204.5625,2572.4063 1205.25,2573.4844 Q1205.9375,2574.5469 1207.2813,2574.5469 Q1207.9063,2574.5469 1208.5,2574.2813 Q1209.0938,2574 1209.7188,2573.4219 L1209.7188,2576.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="160" x="1227.25" y="2574.6543">FrameCloneNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="2586.5" y2="2586.5"/><ellipse cx="960" cy="2597.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="2600.7104">captureRejections : boolean</text><ellipse cx="960" cy="2610.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="2613.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="2623.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="2626.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="2635.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="2639.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,2643.7188,964,2647.7188,960,2651.7188,956,2647.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="166" x="969" y="2651.9292">options : FrameCloneOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="2658.5234" y2="2658.5234"/><ellipse cx="960" cy="2669.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="969" y="2672.7339">addListener(eventName: string | symbol, listener: Function) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2682.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="2685.5386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="2695.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="2698.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="2707.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="2711.1479">getMaxListeners() : number</text><ellipse cx="960" cy="2720.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="2723.9526">getOptions() : NodeOptions</text><ellipse cx="960" cy="2733.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="2736.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="2746.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="2749.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="2759.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="2762.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="2771.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="969" y="2775.1714">off(eventName: string | symbol, listener: Function) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2784.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="2787.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="2797.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="2800.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2810.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="2813.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="2823.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="522" x="969" y="2826.3901">prependListener(eventName: string | symbol, listener: Function) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2835.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="551" x="969" y="2839.1948">prependOnceListener(eventName: string | symbol, listener: Function) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2848.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="2851.9995">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="2861.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="399" x="969" y="2864.8042">removeAllListeners(event: string | symbol) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2874.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="518" x="969" y="2877.6089">removeListener(eventName: string | symbol, listener: Function) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2887.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="969" y="2890.4136">setMaxListeners(n: number) : FrameCloneNode&lt;InOut&gt;</text><ellipse cx="960" cy="2900.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="2903.2183">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="2912.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="350" x="969" y="2916.0229">setOptions(options: NodeOptions) : FrameCloneNode&lt;InOut&gt;</text><!--MD5=[de208f4723c96b89531bbea246460187]
class BufferNode<InOut>--><rect codeLine="241" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="432.1406" id="BufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="2957.5"/><ellipse cx="1225.25" cy="2973.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1228.2188,2979.1406 Q1227.6406,2979.4375 1227,2979.5781 Q1226.3594,2979.7344 1225.6563,2979.7344 Q1223.1563,2979.7344 1221.8281,2978.0938 Q1220.5156,2976.4375 1220.5156,2973.3125 Q1220.5156,2970.1875 1221.8281,2968.5313 Q1223.1563,2966.875 1225.6563,2966.875 Q1226.3594,2966.875 1227,2967.0313 Q1227.6563,2967.1875 1228.2188,2967.4844 L1228.2188,2970.2031 Q1227.5938,2969.625 1227,2969.3594 Q1226.4063,2969.0781 1225.7813,2969.0781 Q1224.4375,2969.0781 1223.75,2970.1563 Q1223.0625,2971.2188 1223.0625,2973.3125 Q1223.0625,2975.4063 1223.75,2976.4844 Q1224.4375,2977.5469 1225.7813,2977.5469 Q1226.4063,2977.5469 1227,2977.2813 Q1227.5938,2977 1228.2188,2976.4219 L1228.2188,2979.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="123" x="1245.75" y="2977.6543">BufferNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="2989.5" y2="2989.5"/><ellipse cx="960" cy="3000.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="3003.7104">captureRejections : boolean</text><ellipse cx="960" cy="3013.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="3016.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="3026.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="3029.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="3038.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="3042.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,3046.7188,964,3050.7188,960,3054.7188,956,3050.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="969" y="3054.9292">options : BufferOptions</text><polygon fill="none" points="960,3059.5234,964,3063.5234,960,3067.5234,956,3063.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="969" y="3067.7339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="3074.3281" y2="3074.3281"/><ellipse cx="960" cy="3085.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="463" x="969" y="3088.5386">addListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3098.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="3101.3433">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="3110.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="3114.1479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="3123.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="3126.9526">getMaxListeners() : number</text><ellipse cx="960" cy="3136.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="3139.7573">getOptions() : NodeOptions</text><ellipse cx="960" cy="3149.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="3152.562">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="3162.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="3165.3667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="3174.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="3178.1714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="3187.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="969" y="3190.9761">off(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3200.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="3203.7808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="3213.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="3216.5854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="3226.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="3229.3901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="3238.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="969" y="3242.1948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="960" cy="3251.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="969" y="3254.9995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="960" cy="3264.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="489" x="969" y="3267.8042">prependListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3277.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="518" x="969" y="3280.6089">prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3290.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="3293.4136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="3303.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="366" x="969" y="3306.2183">removeAllListeners(event: string | symbol) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3315.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="969" y="3319.0229">removeListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3328.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="969" y="3331.8276">setMaxListeners(n: number) : BufferNode&lt;InOut&gt;</text><ellipse cx="960" cy="3341.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="3344.6323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="3354.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="969" y="3357.437">setOptions(options: NodeOptions) : BufferNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="960,3362.0313,964,3366.0313,960,3370.0313,956,3366.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="969" y="3370.2417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="960,3374.8359,964,3378.8359,960,3382.8359,956,3378.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="969" y="3383.0464">shift() : Promise&lt;InOut&gt;</text><!--MD5=[494678b2b121b2444c97971288cf2a66]
class ProcessingNode<DataFrame, DataFrame>--><rect codeLine="274" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="419.3359" id="ProcessingNode&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="3425"/><ellipse cx="1154.25" cy="3441" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1154.3594,3436.3438 L1153.2031,3441.4219 L1155.5313,3441.4219 L1154.3594,3436.3438 Z M1152.875,3434.1094 L1155.8594,3434.1094 L1159.2188,3446.5 L1156.7656,3446.5 L1156,3443.4375 L1152.7188,3443.4375 L1151.9688,3446.5 L1149.5313,3446.5 L1152.875,3434.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="265" x="1174.75" y="3445.1543">ProcessingNode&lt;DataFrame, DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="3457" y2="3457"/><ellipse cx="960" cy="3468" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="3471.2104">captureRejections : boolean</text><ellipse cx="960" cy="3480.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="3484.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="3493.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="3496.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="3506.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="3509.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,3514.2188,964,3518.2188,960,3522.2188,956,3518.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="969" y="3522.4292">options : ProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="3529.0234" y2="3529.0234"/><ellipse cx="960" cy="3540.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="593" x="969" y="3543.2339">addListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3552.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="3556.0386">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="3565.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="3568.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="3578.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="3581.6479">getMaxListeners() : number</text><ellipse cx="960" cy="3591.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="3594.4526">getOptions() : NodeOptions</text><ellipse cx="960" cy="3604.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="3607.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="3616.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="3620.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="3629.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="3632.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="3642.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="541" x="969" y="3645.6714">off(eventName: string | symbol, listener: Function) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3655.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="3658.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="3668.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="3671.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="3680.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="3684.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="3693.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="619" x="969" y="3696.8901">prependListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3706.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="648" x="969" y="3709.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3719.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="421" x="969" y="3722.4995">process(frame: DataFrame, options: PushOptions) : Promise&lt;DataFrame&gt;</text><ellipse cx="960" cy="3732.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="3735.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="3744.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="969" y="3748.1089">removeAllListeners(event: string | symbol) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3757.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="615" x="969" y="3760.9136">removeListener(eventName: string | symbol, listener: Function) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3770.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="414" x="969" y="3773.7183">setMaxListeners(n: number) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="3783.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="3786.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="3796.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="447" x="969" y="3799.3276">setOptions(options: NodeOptions) : ProcessingNode&lt;DataFrame, DataFrame&gt;</text><polygon fill="#FFFF44" points="960,3803.9219,964,3807.9219,960,3811.9219,956,3807.9219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="969" y="3812.1323">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="960,3816.7266,964,3820.7266,960,3824.7266,956,3820.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="969" y="3824.937">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="960,3829.5313,964,3833.5313,960,3837.5313,956,3833.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="969" y="3837.7417">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[1b1ddfcaee985bb106ae4ceba1d1dace]
class WorkerNode<In, Out>--><rect codeLine="306" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="393.7266" id="WorkerNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="3879.5"/><ellipse cx="1217.75" cy="3895.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1220.7188,3901.1406 Q1220.1406,3901.4375 1219.5,3901.5781 Q1218.8594,3901.7344 1218.1563,3901.7344 Q1215.6563,3901.7344 1214.3281,3900.0938 Q1213.0156,3898.4375 1213.0156,3895.3125 Q1213.0156,3892.1875 1214.3281,3890.5313 Q1215.6563,3888.875 1218.1563,3888.875 Q1218.8594,3888.875 1219.5,3889.0313 Q1220.1563,3889.1875 1220.7188,3889.4844 L1220.7188,3892.2031 Q1220.0938,3891.625 1219.5,3891.3594 Q1218.9063,3891.0781 1218.2813,3891.0781 Q1216.9375,3891.0781 1216.25,3892.1563 Q1215.5625,3893.2188 1215.5625,3895.3125 Q1215.5625,3897.4063 1216.25,3898.4844 Q1216.9375,3899.5469 1218.2813,3899.5469 Q1218.9063,3899.5469 1219.5,3899.2813 Q1220.0938,3899 1220.7188,3898.4219 L1220.7188,3901.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="138" x="1238.25" y="3899.6543">WorkerNode&lt;In, Out&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="3911.5" y2="3911.5"/><ellipse cx="960" cy="3922.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="3925.7104">captureRejections : boolean</text><ellipse cx="960" cy="3935.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="3938.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="3948.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="3951.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="3960.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="3964.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,3968.7188,964,3972.7188,960,3976.7188,956,3972.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="66" x="969" y="3976.9292">config : any</text><polygon fill="none" points="960,3981.5234,964,3985.5234,960,3989.5234,956,3985.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="969" y="3989.7339">handler : WorkerHandler</text><polygon fill="none" points="960,3994.3281,964,3998.3281,960,4002.3281,956,3998.3281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="166" x="969" y="4002.5386">options : WorkerNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="4009.1328" y2="4009.1328"/><ellipse cx="960" cy="4020.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="969" y="4023.3433">addListener(eventName: string | symbol, listener: Function) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4032.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="4036.1479">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="4045.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="4048.9526">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="4058.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="4061.7573">getMaxListeners() : number</text><ellipse cx="960" cy="4071.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="4074.562">getOptions() : NodeOptions</text><ellipse cx="960" cy="4084.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="4087.3667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="4096.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="4100.1714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="4109.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="4112.9761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="4122.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="423" x="969" y="4125.7808">off(eventName: string | symbol, listener: Function) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4135.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="4138.5854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="4148.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="4151.3901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="4160.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="4164.1948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="4173.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="969" y="4176.9995">prependListener(eventName: string | symbol, listener: Function) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4186.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="530" x="969" y="4189.8042">prependOnceListener(eventName: string | symbol, listener: Function) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4199.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="4202.6089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="4212.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="969" y="4215.4136">removeAllListeners(event: string | symbol) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4225.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="969" y="4228.2183">removeListener(eventName: string | symbol, listener: Function) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4237.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="969" y="4241.0229">setMaxListeners(n: number) : WorkerNode&lt;In, Out&gt;</text><ellipse cx="960" cy="4250.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="4253.8276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="4263.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="969" y="4266.6323">setOptions(options: NodeOptions) : WorkerNode&lt;In, Out&gt;</text><!--MD5=[0f2a77721e99c940ad3627d52b42bd63]
class CallbackNode<InOut>--><rect codeLine="336" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="393.7266" id="CallbackNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="4308.5"/><ellipse cx="1217.75" cy="4324.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1220.7188,4330.1406 Q1220.1406,4330.4375 1219.5,4330.5781 Q1218.8594,4330.7344 1218.1563,4330.7344 Q1215.6563,4330.7344 1214.3281,4329.0938 Q1213.0156,4327.4375 1213.0156,4324.3125 Q1213.0156,4321.1875 1214.3281,4319.5313 Q1215.6563,4317.875 1218.1563,4317.875 Q1218.8594,4317.875 1219.5,4318.0313 Q1220.1563,4318.1875 1220.7188,4318.4844 L1220.7188,4321.2031 Q1220.0938,4320.625 1219.5,4320.3594 Q1218.9063,4320.0781 1218.2813,4320.0781 Q1216.9375,4320.0781 1216.25,4321.1563 Q1215.5625,4322.2188 1215.5625,4324.3125 Q1215.5625,4326.4063 1216.25,4327.4844 Q1216.9375,4328.5469 1218.2813,4328.5469 Q1218.9063,4328.5469 1219.5,4328.2813 Q1220.0938,4328 1220.7188,4327.4219 L1220.7188,4330.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="138" x="1238.25" y="4328.6543">CallbackNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="4340.5" y2="4340.5"/><ellipse cx="960" cy="4351.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="4354.7104">captureRejections : boolean</text><ellipse cx="960" cy="4364.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="4367.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="4377.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="4380.3198">defaultMaxListeners : number</text><ellipse cx="960" cy="4389.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="4393.1245">errorMonitor : typeof errorMonitor</text><ellipse cx="960" cy="4402.7188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="969" y="4405.9292">pullCallback : Function</text><ellipse cx="960" cy="4415.5234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="969" y="4418.7339">pushCallback : Function</text><polygon fill="none" points="960,4423.3281,964,4427.3281,960,4431.3281,956,4427.3281" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="969" y="4431.5386">options : CallbackNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="4438.1328" y2="4438.1328"/><ellipse cx="960" cy="4449.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="969" y="4452.3433">addListener(eventName: string | symbol, listener: Function) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4461.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="4465.1479">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="4474.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="4477.9526">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="4487.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="4490.7573">getMaxListeners() : number</text><ellipse cx="960" cy="4500.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="4503.562">getOptions() : NodeOptions</text><ellipse cx="960" cy="4513.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="4516.3667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="4525.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="4529.1714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="4538.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="4541.9761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="4551.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="423" x="969" y="4554.7808">off(eventName: string | symbol, listener: Function) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4564.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="4567.5854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="4577.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="4580.3901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="4589.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="4593.1948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="4602.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="969" y="4605.9995">prependListener(eventName: string | symbol, listener: Function) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4615.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="530" x="969" y="4618.8042">prependOnceListener(eventName: string | symbol, listener: Function) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4628.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="4631.6089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="4641.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="969" y="4644.4136">removeAllListeners(event: string | symbol) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4654.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="969" y="4657.2183">removeListener(eventName: string | symbol, listener: Function) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4666.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="969" y="4670.0229">setMaxListeners(n: number) : CallbackNode&lt;InOut&gt;</text><ellipse cx="960" cy="4679.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="4682.8276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="4692.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="969" y="4695.6323">setOptions(options: NodeOptions) : CallbackNode&lt;InOut&gt;</text><!--MD5=[737a787b3dad17050287ad26261bc383]
class RemoteNode<In, Out, S>--><rect codeLine="366" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="380.9219" id="RemoteNode&lt;In, Out, S&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="4738"/><ellipse cx="1207.75" cy="4754" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1210.7188,4759.6406 Q1210.1406,4759.9375 1209.5,4760.0781 Q1208.8594,4760.2344 1208.1563,4760.2344 Q1205.6563,4760.2344 1204.3281,4758.5938 Q1203.0156,4756.9375 1203.0156,4753.8125 Q1203.0156,4750.6875 1204.3281,4749.0313 Q1205.6563,4747.375 1208.1563,4747.375 Q1208.8594,4747.375 1209.5,4747.5313 Q1210.1563,4747.6875 1210.7188,4747.9844 L1210.7188,4750.7031 Q1210.0938,4750.125 1209.5,4749.8594 Q1208.9063,4749.5781 1208.2813,4749.5781 Q1206.9375,4749.5781 1206.25,4750.6563 Q1205.5625,4751.7188 1205.5625,4753.8125 Q1205.5625,4755.9063 1206.25,4756.9844 Q1206.9375,4758.0469 1208.2813,4758.0469 Q1208.9063,4758.0469 1209.5,4757.7813 Q1210.0938,4757.5 1210.7188,4756.9219 L1210.7188,4759.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="158" x="1228.25" y="4758.1543">RemoteNode&lt;In, Out, S&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="4770" y2="4770"/><ellipse cx="960" cy="4781" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="4784.2104">captureRejections : boolean</text><ellipse cx="960" cy="4793.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="4797.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="4806.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="4809.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="4819.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="4822.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,4827.2188,964,4831.2188,960,4835.2188,956,4831.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="196" x="969" y="4835.4292">options : RemoteNodeOptions&lt;S&gt;</text><polygon fill="none" points="960,4840.0234,964,4844.0234,960,4848.0234,956,4844.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="969" y="4848.2339">service : S</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="4854.8281" y2="4854.8281"/><ellipse cx="960" cy="4865.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="495" x="969" y="4869.0386">addListener(eventName: string | symbol, listener: Function) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="4878.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="4881.8433">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="4891.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="4894.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="4904.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="4907.4526">getMaxListeners() : number</text><ellipse cx="960" cy="4917.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="4920.2573">getOptions() : NodeOptions</text><ellipse cx="960" cy="4929.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="4933.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="4942.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="4945.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="4955.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="4958.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="4968.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="443" x="969" y="4971.4761">off(eventName: string | symbol, listener: Function) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="4981.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="4984.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="4993.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="4997.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="5006.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="5009.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="5019.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="969" y="5022.6948">prependListener(eventName: string | symbol, listener: Function) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="5032.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="550" x="969" y="5035.4995">prependOnceListener(eventName: string | symbol, listener: Function) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="5045.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="5048.3042">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="5057.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="398" x="969" y="5061.1089">removeAllListeners(event: string | symbol) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="5070.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="517" x="969" y="5073.9136">removeListener(eventName: string | symbol, listener: Function) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="5083.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="316" x="969" y="5086.7183">setMaxListeners(n: number) : RemoteNode&lt;In, Out, S&gt;</text><ellipse cx="960" cy="5096.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="5099.5229">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="5109.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="969" y="5112.3276">setOptions(options: NodeOptions) : RemoteNode&lt;In, Out, S&gt;</text><!--MD5=[c5fdfad0b8def12e58f090f4783bf65d]
class GraphShapeNode<DataFrame, DataFrame>--><rect codeLine="395" fill="#FEFECE" filter="url(#f41iv9afl0zth)" height="406.5313" id="GraphShapeNode&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="949" y="5154"/><ellipse cx="1148.25" cy="5170" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1148.3594,5165.3438 L1147.2031,5170.4219 L1149.5313,5170.4219 L1148.3594,5165.3438 Z M1146.875,5163.1094 L1149.8594,5163.1094 L1153.2188,5175.5 L1150.7656,5175.5 L1150,5172.4375 L1146.7188,5172.4375 L1145.9688,5175.5 L1143.5313,5175.5 L1146.875,5163.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="277" x="1168.75" y="5174.1543">GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="5186" y2="5186"/><ellipse cx="960" cy="5197" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="969" y="5200.2104">captureRejections : boolean</text><ellipse cx="960" cy="5209.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="969" y="5213.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="960" cy="5222.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="969" y="5225.8198">defaultMaxListeners : number</text><ellipse cx="960" cy="5235.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="969" y="5238.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="960,5243.2188,964,5247.2188,960,5251.2188,956,5247.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="969" y="5251.4292">options : NodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="950" x2="1632" y1="5258.0234" y2="5258.0234"/><ellipse cx="960" cy="5269.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="601" x="969" y="5272.2339">addListener(eventName: string | symbol, listener: Function) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5281.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="569" x="969" y="5285.0386">construct(builder: GraphBuilder&lt;DataFrame, DataFrame&gt;) : GraphBuilder&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5294.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="969" y="5297.8433">eventNames() : (string | symbol)[]</text><ellipse cx="960" cy="5307.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="969" y="5310.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="960" cy="5320.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="969" y="5323.4526">getMaxListeners() : number</text><ellipse cx="960" cy="5333.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="969" y="5336.2573">getOptions() : NodeOptions</text><ellipse cx="960" cy="5345.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="969" y="5349.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="960" cy="5358.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="969" y="5361.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="960" cy="5371.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="969" y="5374.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="5384.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="549" x="969" y="5387.4761">off(eventName: string | symbol, listener: Function) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5397.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="969" y="5400.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="960" cy="5409.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="969" y="5413.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="5422.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="969" y="5425.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="960" cy="5435.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="627" x="969" y="5438.6948">prependListener(eventName: string | symbol, listener: Function) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5448.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="656" x="969" y="5451.4995">prependOnceListener(eventName: string | symbol, listener: Function) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5461.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="242" x="969" y="5464.3042">pull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="960" cy="5473.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="443" x="969" y="5477.1089">push(data: DataFrame | DataFrame[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="960" cy="5486.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="969" y="5489.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="960" cy="5499.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="504" x="969" y="5502.7183">removeAllListeners(event: string | symbol) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5512.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="623" x="969" y="5515.5229">removeListener(eventName: string | symbol, listener: Function) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5525.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="969" y="5528.3276">setMaxListeners(n: number) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><ellipse cx="960" cy="5537.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="969" y="5541.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="960" cy="5550.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="455" x="969" y="5553.937">setOptions(options: NodeOptions) : GraphShapeNode&lt;DataFrame, DataFrame&gt;</text><!--MD5=[cb478422dbd1c66cebb18434837c2350]
reverse link GraphNode<In, Out> to Node<In, Out>--><path codeLine="34" d="M165.64,2738.5 C177.93,2738.5 191.11,2738.5 204.91,2738.5 " fill="none" id="GraphNode&lt;In, Out&gt;-backto-Node&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="165.2,2745.5,145.2,2738.5,165.2,2731.5,165.2,2745.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d209b161df1f2b967621a214677e0544]
reverse link Node<In, Out> to SinkNode<DataFrame>--><path codeLine="65" d="M562.66,2533.87 C601.58,2036.06 720.48,777.32 949,431.5 C952.89,425.61 957,419.85 961.29,414.21 " fill="none" id="Node&lt;In, Out&gt;-backto-SinkNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="569.62,2534.73,561.09,2554.13,555.66,2533.65,569.62,2534.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[87e8ac3b6c929d438ae53c4fc7bb588f]
reverse link Node<In, Out> to SourceNode<DataFrame>--><path codeLine="97" d="M572.62,2534.13 C626.74,2110.56 765.98,1153.99 949,885.5 C953.01,879.62 957.22,873.86 961.62,868.21 " fill="none" id="Node&lt;In, Out&gt;-backto-SourceNode&lt;DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="579.53,2535.24,570.07,2554.2,565.65,2533.48,579.53,2535.24" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d3449f1d74362a5d83e0a5cf55028e6a]
reverse link Node<In, Out> to BalanceNode<InOut>--><path codeLine="126" d="M558.5,2534.14 C583.37,2235.29 667.09,1674.19 949,1301.5 C953.5,1295.55 958.22,1289.74 963.14,1284.06 " fill="none" id="Node&lt;In, Out&gt;-backto-BalanceNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="565.46,2534.94,556.88,2554.32,551.51,2533.82,565.46,2534.94" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a2e0e2a19816198d6b8f0f217a108963]
reverse link Node<In, Out> to TimedPullNode<InOut>--><path codeLine="156" d="M589.35,2534.31 C642.07,2315.65 751.07,1968.14 949,1730.5 C953.81,1724.73 958.81,1719.06 963.99,1713.5 " fill="none" id="Node&lt;In, Out&gt;-backto-TimedPullNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="596.09,2536.24,584.66,2554.08,582.47,2533,596.09,2536.24" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[13d6106f5cce1656d1a4efcd09462e5b]
reverse link Node<In, Out> to FrameFlattenNode<InOut>--><path codeLine="184" d="M650.84,2536.63 C722.26,2410.19 826.43,2249.77 949,2133.5 C954.98,2127.82 961.15,2122.24 967.48,2116.75 " fill="none" id="Node&lt;In, Out&gt;-backto-FrameFlattenNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="656.86,2540.21,640.98,2554.24,644.64,2533.37,656.86,2540.21" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[bdd2270da11dce3d8725da1c0da3428a]
reverse link Node<In, Out> to FrameChunkNode<InOut>--><path codeLine="212" d="M904.71,2544.76 C920.14,2536.38 935.6,2527.98 950.99,2519.63 " fill="none" id="Node&lt;In, Out&gt;-backto-FrameChunkNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="907.89,2551,886.97,2554.4,901.21,2538.7,907.89,2551" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[fa8c254744769420e5a0e8ca210377ce]
reverse link Node<In, Out> to FrameCloneNode<InOut>--><path codeLine="240" d="M909.21,2738.5 C922.46,2738.5 935.71,2738.5 948.92,2738.5 " fill="none" id="Node&lt;In, Out&gt;-backto-FrameCloneNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="909.14,2745.5,889.14,2738.5,909.14,2731.5,909.14,2745.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ad4e0d6da1daff60ce166bc86e632602]
reverse link Node<In, Out> to BufferNode<InOut>--><path codeLine="273" d="M879.45,2932.81 C902.5,2946.33 925.76,2959.96 948.86,2973.5 " fill="none" id="Node&lt;In, Out&gt;-backto-BufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="875.58,2938.66,861.87,2922.51,882.66,2926.58,875.58,2938.66" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[de7185d8b0206985bb037e3ad0abcada]
reverse link Node<In, Out> to ProcessingNode<DataFrame, DataFrame>--><path codeLine="305" d="M639.45,2940.9 C710.15,3082.48 817.95,3270.09 949,3407.5 C954.52,3413.29 960.22,3419.01 966.06,3424.65 " fill="none" id="Node&lt;In, Out&gt;-backto-ProcessingNode&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="632.97,2943.59,630.37,2922.56,645.51,2937.38,632.97,2943.59" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[86fb9cc9f9f5ae738d284d10f59d580b]
reverse link Node<In, Out> to WorkerNode<In, Out>--><path codeLine="335" d="M579.21,2942.51 C624.85,3183.93 729.5,3587.61 949,3861.5 C953.81,3867.51 958.84,3873.4 964.06,3879.16 " fill="none" id="Node&lt;In, Out&gt;-backto-WorkerNode&lt;In, Out&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="572.27,2943.49,575.5,2922.54,586.03,2940.93,572.27,2943.49" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0f6bbc6b7afa79f1dba084fa2c1a6b5c]
reverse link Node<In, Out> to CallbackNode<InOut>--><path codeLine="365" d="M553.7,2942.69 C572.15,3260.37 647.43,3879.21 949,4291.5 C953.23,4297.28 957.67,4302.94 962.29,4308.49 " fill="none" id="Node&lt;In, Out&gt;-backto-CallbackNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="546.71,2943.03,552.59,2922.68,560.69,2942.26,546.71,2943.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[cb641fd8c96077eb4b918ba4d584317f]
reverse link Node<In, Out> to RemoteNode<In, Out, S>--><path codeLine="394" d="M568.52,2942.81 C616.59,3389 747.88,4433.57 949,4720.5 C953.18,4726.46 957.59,4732.29 962.2,4737.97 " fill="none" id="Node&lt;In, Out&gt;-backto-RemoteNode&lt;In, Out, S&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="561.53,2943.3,566.36,2922.66,575.45,2941.8,561.53,2943.3" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0317c4b2a52ab74c0b80503167ef4e72]
reverse link Node<In, Out> to GraphShapeNode<DataFrame, DataFrame>--><path codeLine="425" d="M561.14,2942.94 C597.27,3454.51 711.62,4774.75 949,5136.5 C952.87,5142.4 956.96,5148.17 961.24,5153.82 " fill="none" id="Node&lt;In, Out&gt;-backto-GraphShapeNode&lt;DataFrame, DataFrame&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="554.15,2943.32,559.73,2922.88,568.11,2942.34,554.15,2943.32" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a2b1724e2b1a6c5e2aa34f1b1bd8c7a2]
@startuml
skinparam BackgroundColor transparent
left to right direction
hide empty methods
hide empty fields
class "Node<In, Out>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Node<In, Out>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Node<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : Node<In, Out>
    +setMaxListeners(n: number) : Node<In, Out>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : Node<In, Out>
}
class "GraphNode<In, Out>"
hide "GraphNode<In, Out>" circle
"GraphNode<In, Out>" <|- - "Node<In, Out>"
abstract class "SinkNode<DataFrame>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : SinkNode<DataFrame>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : SinkNode<DataFrame>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    {abstract} +onPush(frame: DataFrame | DataFrame[], options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : SinkNode<DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : SinkNode<DataFrame>
    +push(data: DataFrame | DataFrame[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : SinkNode<DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : SinkNode<DataFrame>
    +setMaxListeners(n: number) : SinkNode<DataFrame>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : SinkNode<DataFrame>
    #persistDataObject(frame: DataFrame) : Promise<void>
}
"Node<In, Out>" <|- - "SinkNode<DataFrame>"
abstract class "SourceNode<DataFrame>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SourceNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : SourceNode<DataFrame>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : SourceNode<DataFrame>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    {abstract} +onPull(options: PullOptions) : Promise<DataFrame>
    +prependListener(eventName: string | symbol, listener: Function) : SourceNode<DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : SourceNode<DataFrame>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : SourceNode<DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : SourceNode<DataFrame>
    +setMaxListeners(n: number) : SourceNode<DataFrame>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : SourceNode<DataFrame>
    #mergeFrame(frame: DataFrame) : Promise<DataFrame>
    #mergeObject(newObject: DataObject, oldObject: DataObject) : DataObject
    #registerService() : Promise<void>
}
"Node<In, Out>" <|- - "SourceNode<DataFrame>"
class "BalanceNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : BalanceNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : BalanceNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : BalanceNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : BalanceNode<InOut>
    +push(frame: InOut | InOut[]) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : BalanceNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : BalanceNode<InOut>
    +setMaxListeners(n: number) : BalanceNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : BalanceNode<InOut>
}
"Node<In, Out>" <|- - "BalanceNode<InOut>"
class "TimedPullNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : TimedPullOptions
    +addListener(eventName: string | symbol, listener: Function) : TimedPullNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : TimedPullNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : TimedPullNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : TimedPullNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : TimedPullNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : TimedPullNode<InOut>
    +setMaxListeners(n: number) : TimedPullNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : TimedPullNode<InOut>
    +start() : Promise<void>
    +stop() : void
}
"Node<In, Out>" <|- - "TimedPullNode<InOut>"
class "FrameFlattenNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : FrameFlattenNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FrameFlattenNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FrameFlattenNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FrameFlattenNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FrameFlattenNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FrameFlattenNode<InOut>
    +setMaxListeners(n: number) : FrameFlattenNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FrameFlattenNode<InOut>
}
"Node<In, Out>" <|- - "FrameFlattenNode<InOut>"
class "FrameChunkNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : FrameChunkNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FrameChunkNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FrameChunkNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FrameChunkNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FrameChunkNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FrameChunkNode<InOut>
    +setMaxListeners(n: number) : FrameChunkNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FrameChunkNode<InOut>
}
"Node<In, Out>" <|- - "FrameChunkNode<InOut>"
class "FrameCloneNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : FrameCloneOptions
    +addListener(eventName: string | symbol, listener: Function) : FrameCloneNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : FrameCloneNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : FrameCloneNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : FrameCloneNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : FrameCloneNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : FrameCloneNode<InOut>
    +setMaxListeners(n: number) : FrameCloneNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : FrameCloneNode<InOut>
}
"Node<In, Out>" <|- - "FrameCloneNode<InOut>"
class "BufferNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : BufferNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +setMaxListeners(n: number) : BufferNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : BufferNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
"Node<In, Out>" <|- - "BufferNode<InOut>"
abstract class "ProcessingNode<DataFrame, DataFrame>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ProcessingNode<DataFrame, DataFrame>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ProcessingNode<DataFrame, DataFrame>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ProcessingNode<DataFrame, DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ProcessingNode<DataFrame, DataFrame>
    {abstract} +process(frame: DataFrame, options: PushOptions) : Promise<DataFrame>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ProcessingNode<DataFrame, DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : ProcessingNode<DataFrame, DataFrame>
    +setMaxListeners(n: number) : ProcessingNode<DataFrame, DataFrame>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ProcessingNode<DataFrame, DataFrame>
    #findNodeDataService() : NodeDataService<NodeData>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"Node<In, Out>" <|- - "ProcessingNode<DataFrame, DataFrame>"
class "WorkerNode<In, Out>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #config : any
    #handler : WorkerHandler
    #options : WorkerNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : WorkerNode<In, Out>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : WorkerNode<In, Out>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : WorkerNode<In, Out>
    +prependOnceListener(eventName: string | symbol, listener: Function) : WorkerNode<In, Out>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : WorkerNode<In, Out>
    +removeListener(eventName: string | symbol, listener: Function) : WorkerNode<In, Out>
    +setMaxListeners(n: number) : WorkerNode<In, Out>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : WorkerNode<In, Out>
}
"Node<In, Out>" <|- - "WorkerNode<In, Out>"
class "CallbackNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    +pullCallback : Function
    +pushCallback : Function
    #options : CallbackNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : CallbackNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : CallbackNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : CallbackNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : CallbackNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : CallbackNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : CallbackNode<InOut>
    +setMaxListeners(n: number) : CallbackNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : CallbackNode<InOut>
}
"Node<In, Out>" <|- - "CallbackNode<InOut>"
class "RemoteNode<In, Out, S>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : RemoteNodeOptions<S>
    #service : S
    +addListener(eventName: string | symbol, listener: Function) : RemoteNode<In, Out, S>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : RemoteNode<In, Out, S>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : RemoteNode<In, Out, S>
    +prependOnceListener(eventName: string | symbol, listener: Function) : RemoteNode<In, Out, S>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : RemoteNode<In, Out, S>
    +removeListener(eventName: string | symbol, listener: Function) : RemoteNode<In, Out, S>
    +setMaxListeners(n: number) : RemoteNode<In, Out, S>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : RemoteNode<In, Out, S>
}
"Node<In, Out>" <|- - "RemoteNode<In, Out, S>"
abstract class "GraphShapeNode<DataFrame, DataFrame>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : NodeOptions
    +addListener(eventName: string | symbol, listener: Function) : GraphShapeNode<DataFrame, DataFrame>
    {abstract} +construct(builder: GraphBuilder<DataFrame, DataFrame>) : GraphBuilder<DataFrame, DataFrame>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : GraphShapeNode<DataFrame, DataFrame>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : GraphShapeNode<DataFrame, DataFrame>
    +prependOnceListener(eventName: string | symbol, listener: Function) : GraphShapeNode<DataFrame, DataFrame>
    +pull(options: PullOptions) : Promise<void>
    +push(data: DataFrame | DataFrame[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : GraphShapeNode<DataFrame, DataFrame>
    +removeListener(eventName: string | symbol, listener: Function) : GraphShapeNode<DataFrame, DataFrame>
    +setMaxListeners(n: number) : GraphShapeNode<DataFrame, DataFrame>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : GraphShapeNode<DataFrame, DataFrame>
}
"Node<In, Out>" <|- - "GraphShapeNode<DataFrame, DataFrame>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>