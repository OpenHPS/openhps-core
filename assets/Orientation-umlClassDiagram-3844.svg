<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1547px" preserveAspectRatio="none" style="width:862px;height:1547px;background:#00000000;" version="1.1" viewBox="0 0 862 1547" width="862px" zoomAndPan="magnify"><defs><filter height="300%" id="fsj2p0rsff51n" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[603b5c4369211cc414255b54ba6df74f]
class Orientation--><rect codeLine="4" fill="#FEFECE" filter="url(#fsj2p0rsff51n)" height="752.2578" id="Orientation" style="stroke:#A80036;stroke-width:1.5;" width="841" x="7" y="781"/><ellipse cx="388.25" cy="797" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M391.2188,802.6406 Q390.6406,802.9375 390,803.0781 Q389.3594,803.2344 388.6563,803.2344 Q386.1563,803.2344 384.8281,801.5938 Q383.5156,799.9375 383.5156,796.8125 Q383.5156,793.6875 384.8281,792.0313 Q386.1563,790.375 388.6563,790.375 Q389.3594,790.375 390,790.5313 Q390.6563,790.6875 391.2188,790.9844 L391.2188,793.7031 Q390.5938,793.125 390,792.8594 Q389.4063,792.5781 388.7813,792.5781 Q387.4375,792.5781 386.75,793.6563 Q386.0625,794.7188 386.0625,796.8125 Q386.0625,798.9063 386.75,799.9844 Q387.4375,801.0469 388.7813,801.0469 Q389.4063,801.0469 390,800.7813 Q390.5938,800.5 391.2188,799.9219 L391.2188,802.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="70" x="408.75" y="801.1543">Orientation</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="813" y2="813"/><ellipse cx="18" cy="824" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="235" x="27" y="827.2104">accuracy : Accuracy&lt;AngleUnit, number&gt;</text><ellipse cx="18" cy="836.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="27" y="840.0151">isQuaternion : true</text><ellipse cx="18" cy="849.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="27" y="852.8198">timestamp : number</text><ellipse cx="18" cy="862.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="865.6245">w : number</text><ellipse cx="18" cy="875.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="878.4292">x : number</text><ellipse cx="18" cy="888.0234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="891.2339">y : number</text><ellipse cx="18" cy="900.8281" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="27" y="904.0386">z : number</text><ellipse cx="18" cy="913.6328" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="27" y="916.8433">_onChangeCallback : Function</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="923.4375" y2="923.4375"/><ellipse cx="18" cy="934.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="937.6479">angleTo(q: Quaternion) : number</text><ellipse cx="18" cy="947.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="27" y="950.4526">clone() : Orientation</text><ellipse cx="18" cy="960.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="963.2573">conjugate() : Quaternion</text><ellipse cx="18" cy="972.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="976.062">copy(q: Quaternion) : Orientation</text><ellipse cx="18" cy="985.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="988.8667">dot(v: Quaternion) : number</text><ellipse cx="18" cy="998.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="27" y="1001.6714">equals(v: Quaternion) : boolean</text><ellipse cx="18" cy="1011.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="27" y="1014.4761">fromArray(array: number[] | ArrayLike&lt;number&gt;, offset: number) : Orientation</text><ellipse cx="18" cy="1024.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="27" y="1027.2808">fromAxisAngle&lt;T&gt;(this: T, axis: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1036.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="27" y="1040.0854">fromAxisAngle&lt;T&gt;(this: T, axis: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1049.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="27" y="1052.8901">fromAxisAngle&lt;T&gt;(this: T, axis: AxisAngle) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1062.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="27" y="1065.6948">fromEuler&lt;T&gt;(this: T, euler: Vector3) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1075.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="311" x="27" y="1078.4995">fromEuler&lt;T&gt;(this: T, euler: Euler) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1088.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1091.3042">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1100.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="1104.1089">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1113.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="27" y="1116.9136">fromEuler&lt;T&gt;(this: T, euler: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1126.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="344" x="27" y="1129.7183">fromQuaternion(quat: Quaternion | Quaternion) : Orientation</text><ellipse cx="18" cy="1139.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="381" x="27" y="1142.5229">fromRotationMatrix&lt;T&gt;(this: T, matrix: Matrix4) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1152.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="27" y="1155.3276">fromThreeJS&lt;T&gt;(threeQuaternion: Quaternion) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="1164.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="27" y="1168.1323">identity() : Quaternion</text><ellipse cx="18" cy="1177.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="27" y="1180.937">inverse() : Quaternion</text><ellipse cx="18" cy="1190.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="27" y="1193.7417">invert() : Quaternion</text><ellipse cx="18" cy="1203.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="99" x="27" y="1206.5464">length() : number</text><ellipse cx="18" cy="1216.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="27" y="1219.3511">lengthSq() : number</text><ellipse cx="18" cy="1228.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="1232.1558">multiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="1241.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="361" x="27" y="1244.9604">multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion</text><ellipse cx="18" cy="1254.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="27" y="1257.7651">multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]</text><ellipse cx="18" cy="1267.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="161" x="27" y="1270.5698">multiplyVector3(v: any) : any</text><ellipse cx="18" cy="1280.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="1283.3745">normalize() : Quaternion</text><ellipse cx="18" cy="1292.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="27" y="1296.1792">premultiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="1305.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="27" y="1308.9839">random() : Quaternion</text><ellipse cx="18" cy="1318.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="27" y="1321.7886">rotateTowards(q: Quaternion, step: number) : Quaternion</text><ellipse cx="18" cy="1331.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="27" y="1334.5933">set(x: number, y: number, z: number, w: number) : Quaternion</text><ellipse cx="18" cy="1344.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="27" y="1347.3979">setFromAxisAngle(axis: Vector3, angle: number) : Quaternion</text><ellipse cx="18" cy="1356.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="27" y="1360.2026">setFromEuler(euler: Euler, update: boolean) : Quaternion</text><ellipse cx="18" cy="1369.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="270" x="27" y="1373.0073">setFromRotationMatrix(m: Matrix4) : Quaternion</text><ellipse cx="18" cy="1382.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="360" x="27" y="1385.812">setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion</text><ellipse cx="18" cy="1395.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="27" y="1398.6167">slerp(qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="1408.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="27" y="1411.4214">slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number</text><ellipse cx="18" cy="1421.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="805" x="27" y="1424.2261">slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion</text><ellipse cx="18" cy="1433.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="27" y="1437.0308">slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="1446.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="1449.8354">toArray(array: number[], offset: number) : number[]</text><ellipse cx="18" cy="1459.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="27" y="1462.6401">toArray(array: ArrayLike&lt;number&gt;, offset: number) : ArrayLike&lt;number&gt;</text><ellipse cx="18" cy="1472.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="27" y="1475.4448">toAxisAngle() : AxisAngle</text><ellipse cx="18" cy="1485.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="27" y="1488.2495">toEuler(order: EulerOrder) : Euler</text><ellipse cx="18" cy="1497.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="152" x="27" y="1501.0542">toRotationMatrix() : Matrix4</text><ellipse cx="18" cy="1510.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="27" y="1513.8589">[iterator]() : Generator&lt;number, void, unknown&gt;</text><ellipse cx="18" cy="1523.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="27" y="1526.6636">_onChange(callback: Function) : Quaternion</text><!--MD5=[4c7b140fed10e9877852f4b8dc88c33d]
class Quaternion--><rect codeLine="61" fill="#FEFECE" filter="url(#fsj2p0rsff51n)" height="713.8438" id="Quaternion" style="stroke:#A80036;stroke-width:1.5;" width="841" x="7" y="7"/><ellipse cx="388.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M391.2188,28.6406 Q390.6406,28.9375 390,29.0781 Q389.3594,29.2344 388.6563,29.2344 Q386.1563,29.2344 384.8281,27.5938 Q383.5156,25.9375 383.5156,22.8125 Q383.5156,19.6875 384.8281,18.0313 Q386.1563,16.375 388.6563,16.375 Q389.3594,16.375 390,16.5313 Q390.6563,16.6875 391.2188,16.9844 L391.2188,19.7031 Q390.5938,19.125 390,18.8594 Q389.4063,18.5781 388.7813,18.5781 Q387.4375,18.5781 386.75,19.6563 Q386.0625,20.7188 386.0625,22.8125 Q386.0625,24.9063 386.75,25.9844 Q387.4375,27.0469 388.7813,27.0469 Q389.4063,27.0469 390,26.7813 Q390.5938,26.5 391.2188,25.9219 L391.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="70" x="408.75" y="27.1543">Quaternion</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="39" y2="39"/><ellipse cx="18" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="27" y="53.2104">isQuaternion : true</text><ellipse cx="18" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="66.0151">w : number</text><ellipse cx="18" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="78.8198">x : number</text><ellipse cx="18" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="62" x="27" y="91.6245">y : number</text><ellipse cx="18" cy="101.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="27" y="104.4292">z : number</text><ellipse cx="18" cy="114.0234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="27" y="117.2339">_onChangeCallback : Function</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="847" y1="123.8281" y2="123.8281"/><ellipse cx="18" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="138.0386">angleTo(q: Quaternion) : number</text><ellipse cx="18" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="27" y="150.8433">clone() : Quaternion</text><ellipse cx="18" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="163.6479">conjugate() : Quaternion</text><ellipse cx="18" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="27" y="176.4526">copy(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="189.2573">dot(v: Quaternion) : number</text><ellipse cx="18" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="27" y="202.062">equals(v: Quaternion) : boolean</text><ellipse cx="18" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="27" y="214.8667">fromArray(array: number[] | ArrayLike&lt;number&gt;, offset: number) : Quaternion</text><ellipse cx="18" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="27" y="227.6714">fromAxisAngle&lt;T&gt;(this: T, axis: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="27" y="240.4761">fromAxisAngle&lt;T&gt;(this: T, axis: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="27" y="253.2808">fromAxisAngle&lt;T&gt;(this: T, axis: AxisAngle) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="27" y="266.0854">fromEuler&lt;T&gt;(this: T, euler: Vector3) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="311" x="27" y="278.8901">fromEuler&lt;T&gt;(this: T, euler: Euler) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="291.6948">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="318" x="27" y="304.4995">fromEuler&lt;T&gt;(this: T, euler: Object) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="27" y="317.3042">fromEuler&lt;T&gt;(this: T, euler: number[]) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="381" x="27" y="330.1089">fromRotationMatrix&lt;T&gt;(this: T, matrix: Matrix4) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="27" y="342.9136">fromThreeJS&lt;T&gt;(threeQuaternion: Quaternion) : InstanceType&lt;T&gt;</text><ellipse cx="18" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="27" y="355.7183">identity() : Quaternion</text><ellipse cx="18" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="27" y="368.5229">inverse() : Quaternion</text><ellipse cx="18" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="27" y="381.3276">invert() : Quaternion</text><ellipse cx="18" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="99" x="27" y="394.1323">length() : number</text><ellipse cx="18" cy="403.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="27" y="406.937">lengthSq() : number</text><ellipse cx="18" cy="416.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="419.7417">multiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="429.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="361" x="27" y="432.5464">multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion</text><ellipse cx="18" cy="442.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="27" y="445.3511">multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]</text><ellipse cx="18" cy="454.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="161" x="27" y="458.1558">multiplyVector3(v: any) : any</text><ellipse cx="18" cy="467.75" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="27" y="470.9604">normalize() : Quaternion</text><ellipse cx="18" cy="480.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="27" y="483.7651">premultiply(q: Quaternion) : Quaternion</text><ellipse cx="18" cy="493.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="27" y="496.5698">random() : Quaternion</text><ellipse cx="18" cy="506.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="27" y="509.3745">rotateTowards(q: Quaternion, step: number) : Quaternion</text><ellipse cx="18" cy="518.9688" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="27" y="522.1792">set(x: number, y: number, z: number, w: number) : Quaternion</text><ellipse cx="18" cy="531.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="27" y="534.9839">setFromAxisAngle(axis: Vector3, angle: number) : Quaternion</text><ellipse cx="18" cy="544.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="27" y="547.7886">setFromEuler(euler: Euler, update: boolean) : Quaternion</text><ellipse cx="18" cy="557.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="270" x="27" y="560.5933">setFromRotationMatrix(m: Matrix4) : Quaternion</text><ellipse cx="18" cy="570.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="360" x="27" y="573.3979">setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion</text><ellipse cx="18" cy="582.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="27" y="586.2026">slerp(qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="595.7969" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="27" y="599.0073">slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number</text><ellipse cx="18" cy="608.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="805" x="27" y="611.812">slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion</text><ellipse cx="18" cy="621.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="27" y="624.6167">slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion</text><ellipse cx="18" cy="634.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="637.4214">toArray(array: number[], offset: number) : number[]</text><ellipse cx="18" cy="647.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="27" y="650.2261">toArray(array: ArrayLike&lt;number&gt;, offset: number) : ArrayLike&lt;number&gt;</text><ellipse cx="18" cy="659.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="27" y="663.0308">toAxisAngle() : AxisAngle</text><ellipse cx="18" cy="672.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="27" y="675.8354">toEuler(order: EulerOrder) : Euler</text><ellipse cx="18" cy="685.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="152" x="27" y="688.6401">toRotationMatrix() : Matrix4</text><ellipse cx="18" cy="698.2344" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="27" y="701.4448">[iterator]() : Generator&lt;number, void, unknown&gt;</text><ellipse cx="18" cy="711.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="27" y="714.2495">_onChange(callback: Function) : Quaternion</text><!--MD5=[ef94c5dc5d3c3818010c68cc49d50cc2]
reverse link Quaternion to Orientation--><path codeLine="115" d="M427.5,741.61 C427.5,754.63 427.5,767.69 427.5,780.72 " fill="none" id="Quaternion-backto-Orientation" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="420.5,741.16,427.5,721.16,434.5,741.16,420.5,741.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c87a075ba78005d3d49dab7c68b3b547]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "Orientation" {
    +accuracy : Accuracy<AngleUnit, number>
    +isQuaternion : true
    +timestamp : number
    +w : number
    +x : number
    +y : number
    +z : number
    +_onChangeCallback : Function
    +angleTo(q: Quaternion) : number
    +clone() : Orientation
    +conjugate() : Quaternion
    +copy(q: Quaternion) : Orientation
    +dot(v: Quaternion) : number
    +equals(v: Quaternion) : boolean
    +fromArray(array: number[] | ArrayLike<number>, offset: number) : Orientation
    {static} +fromAxisAngle<T>(this: T, axis: Object) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: number[]) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: AxisAngle) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Vector3) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Euler) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: number[]) : InstanceType<T>
    {static} +fromQuaternion(quat: Quaternion | Quaternion) : Orientation
    {static} +fromRotationMatrix<T>(this: T, matrix: Matrix4) : InstanceType<T>
    {static} +fromThreeJS<T>(threeQuaternion: Quaternion) : InstanceType<T>
    +identity() : Quaternion
    +inverse() : Quaternion
    +invert() : Quaternion
    +length() : number
    +lengthSq() : number
    +multiply(q: Quaternion) : Quaternion
    +multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion
    {static} +multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]
    +multiplyVector3(v: any) : any
    +normalize() : Quaternion
    +premultiply(q: Quaternion) : Quaternion
    +random() : Quaternion
    +rotateTowards(q: Quaternion, step: number) : Quaternion
    +set(x: number, y: number, z: number, w: number) : Quaternion
    +setFromAxisAngle(axis: Vector3, angle: number) : Quaternion
    +setFromEuler(euler: Euler, update: boolean) : Quaternion
    +setFromRotationMatrix(m: Matrix4) : Quaternion
    +setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion
    +slerp(qb: Quaternion, t: number) : Quaternion
    {static} +slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number
    {static} +slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion
    +slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion
    +toArray(array: number[], offset: number) : number[]
    +toArray(array: ArrayLike<number>, offset: number) : ArrayLike<number>
    +toAxisAngle() : AxisAngle
    +toEuler(order: EulerOrder) : Euler
    +toRotationMatrix() : Matrix4
    +[iterator]() : Generator<number, void, unknown>
    +_onChange(callback: Function) : Quaternion
}
class "Quaternion" {
    +isQuaternion : true
    +w : number
    +x : number
    +y : number
    +z : number
    +_onChangeCallback : Function
    +angleTo(q: Quaternion) : number
    +clone() : Quaternion
    +conjugate() : Quaternion
    +copy(q: Quaternion) : Quaternion
    +dot(v: Quaternion) : number
    +equals(v: Quaternion) : boolean
    +fromArray(array: number[] | ArrayLike<number>, offset: number) : Quaternion
    {static} +fromAxisAngle<T>(this: T, axis: Object) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: number[]) : InstanceType<T>
    {static} +fromAxisAngle<T>(this: T, axis: AxisAngle) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Vector3) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Euler) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: Object) : InstanceType<T>
    {static} +fromEuler<T>(this: T, euler: number[]) : InstanceType<T>
    {static} +fromRotationMatrix<T>(this: T, matrix: Matrix4) : InstanceType<T>
    {static} +fromThreeJS<T>(threeQuaternion: Quaternion) : InstanceType<T>
    +identity() : Quaternion
    +inverse() : Quaternion
    +invert() : Quaternion
    +length() : number
    +lengthSq() : number
    +multiply(q: Quaternion) : Quaternion
    +multiplyQuaternions(a: Quaternion, b: Quaternion) : Quaternion
    {static} +multiplyQuaternionsFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number) : number[]
    +multiplyVector3(v: any) : any
    +normalize() : Quaternion
    +premultiply(q: Quaternion) : Quaternion
    +random() : Quaternion
    +rotateTowards(q: Quaternion, step: number) : Quaternion
    +set(x: number, y: number, z: number, w: number) : Quaternion
    +setFromAxisAngle(axis: Vector3, angle: number) : Quaternion
    +setFromEuler(euler: Euler, update: boolean) : Quaternion
    +setFromRotationMatrix(m: Matrix4) : Quaternion
    +setFromUnitVectors(vFrom: Vector3, vTo: Vector3) : Quaternion
    +slerp(qb: Quaternion, t: number) : Quaternion
    {static} +slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number) : number
    {static} +slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset: number, src1: number[], stcOffset1: number, t: number) : Quaternion
    +slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number) : Quaternion
    +toArray(array: number[], offset: number) : number[]
    +toArray(array: ArrayLike<number>, offset: number) : ArrayLike<number>
    +toAxisAngle() : AxisAngle
    +toEuler(order: EulerOrder) : Euler
    +toRotationMatrix() : Matrix4
    +[iterator]() : Generator<number, void, unknown>
    +_onChange(callback: Function) : Quaternion
}
"Quaternion" <|- - "Orientation"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>