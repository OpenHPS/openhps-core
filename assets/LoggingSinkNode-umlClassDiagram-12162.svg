<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="919px" preserveAspectRatio="none" style="width:707px;height:919px;background:#00000000;" version="1.1" viewBox="0 0 707 919" width="707px" zoomAndPan="magnify"><defs><filter height="300%" id="f7yo3t0xacqk4" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[e7f1040352c1dc2a694a3dab34171633]
class LoggingSinkNode<In>--><rect codeLine="4" fill="#FEFECE" filter="url(#f7yo3t0xacqk4)" height="419.3359" id="LoggingSinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="486"/><ellipse cx="277.25" cy="502" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M280.2188,507.6406 Q279.6406,507.9375 279,508.0781 Q278.3594,508.2344 277.6563,508.2344 Q275.1563,508.2344 273.8281,506.5938 Q272.5156,504.9375 272.5156,501.8125 Q272.5156,498.6875 273.8281,497.0313 Q275.1563,495.375 277.6563,495.375 Q278.3594,495.375 279,495.5313 Q279.6563,495.6875 280.2188,495.9844 L280.2188,498.7031 Q279.5938,498.125 279,497.8594 Q278.4063,497.5781 277.7813,497.5781 Q276.4375,497.5781 275.75,498.6563 Q275.0625,499.7188 275.0625,501.8125 Q275.0625,503.9063 275.75,504.9844 Q276.4375,506.0469 277.7813,506.0469 Q278.4063,506.0469 279,505.7813 Q279.5938,505.5 280.2188,504.9219 L280.2188,507.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="139" x="297.75" y="506.1543">LoggingSinkNode&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="518" y2="518"/><ellipse cx="20" cy="529" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="104" x="29" y="532.2104">callback : Function</text><ellipse cx="20" cy="541.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="545.0151">captureRejections : boolean</text><ellipse cx="20" cy="554.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="557.8198">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="567.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="570.6245">defaultMaxListeners : number</text><ellipse cx="20" cy="580.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="583.4292">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,588.0234,24,592.0234,20,596.0234,16,592.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="29" y="596.2339">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="602.8281" y2="602.8281"/><ellipse cx="20" cy="613.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="476" x="29" y="617.0386">addListener(eventName: string | symbol, listener: Function) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="626.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="629.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="639.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="642.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="652.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="655.4526">getMaxListeners() : number</text><ellipse cx="20" cy="665.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="668.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="677.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="681.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="690.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="693.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="703.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="706.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="716.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="29" y="719.4761">off(eventName: string | symbol, listener: Function) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="729.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="732.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="741.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="745.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="754.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="757.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="767.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="332" x="29" y="770.6948">onPush(frame: In, options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="780.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="502" x="29" y="783.4995">prependListener(eventName: string | symbol, listener: Function) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="793.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="531" x="29" y="796.3042">prependOnceListener(eventName: string | symbol, listener: Function) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="805.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="29" y="809.1089">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="818.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="821.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="831.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="379" x="29" y="834.7183">removeAllListeners(event: string | symbol) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="844.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="498" x="29" y="847.5229">removeListener(eventName: string | symbol, listener: Function) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="857.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="297" x="29" y="860.3276">setMaxListeners(n: number) : LoggingSinkNode&lt;In&gt;</text><ellipse cx="20" cy="869.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="873.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="882.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="330" x="29" y="885.937">setOptions(options: NodeOptions) : LoggingSinkNode&lt;In&gt;</text><polygon fill="#FFFF44" points="20,890.5313,24,894.5313,20,898.5313,16,894.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="29" y="898.7417">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[cc12a55b7b1d4c7f3ffb9787ecda070f]
class CallbackSinkNode<In>--><rect codeLine="35" fill="#FEFECE" filter="url(#f7yo3t0xacqk4)" height="419.3359" id="CallbackSinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="7"/><ellipse cx="275.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M278.7188,28.6406 Q278.1406,28.9375 277.5,29.0781 Q276.8594,29.2344 276.1563,29.2344 Q273.6563,29.2344 272.3281,27.5938 Q271.0156,25.9375 271.0156,22.8125 Q271.0156,19.6875 272.3281,18.0313 Q273.6563,16.375 276.1563,16.375 Q276.8594,16.375 277.5,16.5313 Q278.1563,16.6875 278.7188,16.9844 L278.7188,19.7031 Q278.0938,19.125 277.5,18.8594 Q276.9063,18.5781 276.2813,18.5781 Q274.9375,18.5781 274.25,19.6563 Q273.5625,20.7188 273.5625,22.8125 Q273.5625,24.9063 274.25,25.9844 Q274.9375,27.0469 276.2813,27.0469 Q276.9063,27.0469 277.5,26.7813 Q278.0938,26.5 278.7188,25.9219 L278.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="142" x="296.25" y="27.1543">CallbackSinkNode&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="39" y2="39"/><ellipse cx="20" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="104" x="29" y="53.2104">callback : Function</text><ellipse cx="20" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="66.0151">captureRejections : boolean</text><ellipse cx="20" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="78.8198">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="91.6245">defaultMaxListeners : number</text><ellipse cx="20" cy="101.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="104.4292">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,109.0234,24,113.0234,20,117.0234,16,113.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="29" y="117.2339">options : SinkNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="123.8281" y2="123.8281"/><ellipse cx="20" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="479" x="29" y="138.0386">addListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="150.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="163.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="176.4526">getMaxListeners() : number</text><ellipse cx="20" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="189.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="202.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="214.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="227.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="427" x="29" y="240.4761">off(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="253.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="266.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="278.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="332" x="29" y="291.6948">onPush(frame: In, options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="29" y="304.4995">prependListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="29" y="317.3042">prependOnceListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="29" y="330.1089">push(data: In | In[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="342.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="382" x="29" y="355.7183">removeAllListeners(event: string | symbol) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="29" y="368.5229">removeListener(eventName: string | symbol, listener: Function) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="300" x="29" y="381.3276">setMaxListeners(n: number) : CallbackSinkNode&lt;In&gt;</text><ellipse cx="20" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="394.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="403.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="29" y="406.937">setOptions(options: NodeOptions) : CallbackSinkNode&lt;In&gt;</text><polygon fill="#FFFF44" points="20,411.5313,24,415.5313,20,419.5313,16,415.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="29" y="419.7417">persistDataObject(frame: In) : Promise&lt;void&gt;</text><!--MD5=[d6df32a212f5814fe78d96939b5d9b9d]
reverse link CallbackSinkNode<In> to LoggingSinkNode<In>--><path codeLine="66" d="M351,446.06 C351,459.29 351,472.57 351,485.72 " fill="none" id="CallbackSinkNode&lt;In&gt;-backto-LoggingSinkNode&lt;In&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="344,446.03,351,426.03,358,446.03,344,446.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[dd1b4998562cc1f833f94c321475a7b4]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "LoggingSinkNode<In>" {
    +callback : Function
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : LoggingSinkNode<In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : LoggingSinkNode<In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPush(frame: In, options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : LoggingSinkNode<In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : LoggingSinkNode<In>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : LoggingSinkNode<In>
    +removeListener(eventName: string | symbol, listener: Function) : LoggingSinkNode<In>
    +setMaxListeners(n: number) : LoggingSinkNode<In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : LoggingSinkNode<In>
    #persistDataObject(frame: In) : Promise<void>
}
class "CallbackSinkNode<In>" {
    +callback : Function
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : SinkNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPush(frame: In, options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +prependOnceListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +push(data: In | In[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : CallbackSinkNode<In>
    +removeListener(eventName: string | symbol, listener: Function) : CallbackSinkNode<In>
    +setMaxListeners(n: number) : CallbackSinkNode<In>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : CallbackSinkNode<In>
    #persistDataObject(frame: In) : Promise<void>
}
"CallbackSinkNode<In>" <|- - "LoggingSinkNode<In>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>