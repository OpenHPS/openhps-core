<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1449px" preserveAspectRatio="none" style="width:1426px;height:1449px;background:#00000000;" version="1.1" viewBox="0 0 1426 1449" width="1426px" zoomAndPan="magnify"><defs><filter height="300%" id="f1r2ody80szg3k" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[cbfe4adf4cb417016e13f6623ce80221]
class MemoryBufferNode<InOut>--><rect codeLine="4" fill="#FEFECE" filter="url(#f1r2ody80szg3k)" height="432.1406" id="MemoryBufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="368" y="499"/><ellipse cx="620.25" cy="515" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M623.2188,520.6406 Q622.6406,520.9375 622,521.0781 Q621.3594,521.2344 620.6563,521.2344 Q618.1563,521.2344 616.8281,519.5938 Q615.5156,517.9375 615.5156,514.8125 Q615.5156,511.6875 616.8281,510.0313 Q618.1563,508.375 620.6563,508.375 Q621.3594,508.375 622,508.5313 Q622.6563,508.6875 623.2188,508.9844 L623.2188,511.7031 Q622.5938,511.125 622,510.8594 Q621.4063,510.5781 620.7813,510.5781 Q619.4375,510.5781 618.75,511.6563 Q618.0625,512.7188 618.0625,514.8125 Q618.0625,516.9063 618.75,517.9844 Q619.4375,519.0469 620.7813,519.0469 Q621.4063,519.0469 622,518.7813 Q622.5938,518.5 623.2188,517.9219 L623.2188,520.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="171" x="640.75" y="519.1543">MemoryBufferNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="531" y2="531"/><ellipse cx="379" cy="542" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="388" y="545.2104">captureRejections : boolean</text><ellipse cx="379" cy="554.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="388" y="558.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="379" cy="567.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="388" y="570.8198">defaultMaxListeners : number</text><ellipse cx="379" cy="580.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="388" y="583.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="379,588.2188,383,592.2188,379,596.2188,375,592.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="388" y="596.4292">options : BufferOptions</text><polygon fill="none" points="379,601.0234,383,605.0234,379,609.0234,375,605.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="388" y="609.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="615.8281" y2="615.8281"/><ellipse cx="379" cy="626.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="508" x="388" y="630.0386">addListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="639.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="388" y="642.8433">eventNames() : (string | symbol)[]</text><ellipse cx="379" cy="652.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="388" y="655.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="379" cy="665.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="388" y="668.4526">getMaxListeners() : number</text><ellipse cx="379" cy="678.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="388" y="681.2573">getOptions() : NodeOptions</text><ellipse cx="379" cy="690.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="388" y="694.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="379" cy="703.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="388" y="706.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="379" cy="716.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="388" y="719.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="729.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="456" x="388" y="732.4761">off(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="742.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="388" y="745.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="379" cy="754.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="388" y="758.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="767.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="388" y="770.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="780.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="388" y="783.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="379" cy="793.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="388" y="796.4995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="379" cy="806.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="388" y="809.3042">prependListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="818.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="563" x="388" y="822.1089">prependOnceListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="831.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="388" y="834.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="844.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="388" y="847.7183">removeAllListeners(event: string | symbol) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="857.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="530" x="388" y="860.5229">removeListener(eventName: string | symbol, listener: Function) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="870.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="388" y="873.3276">setMaxListeners(n: number) : MemoryBufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="882.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="388" y="886.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="379" cy="895.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="362" x="388" y="898.937">setOptions(options: NodeOptions) : MemoryBufferNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="379,903.5313,383,907.5313,379,911.5313,375,907.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="388" y="911.7417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="379,916.3359,383,920.3359,379,924.3359,375,920.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="388" y="924.5464">shift() : Promise&lt;InOut&gt;</text><!--MD5=[de208f4723c96b89531bbea246460187]
class BufferNode<InOut>--><rect codeLine="36" fill="#FEFECE" filter="url(#f1r2ody80szg3k)" height="432.1406" id="BufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="368" y="7"/><ellipse cx="644.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M647.2188,28.6406 Q646.6406,28.9375 646,29.0781 Q645.3594,29.2344 644.6563,29.2344 Q642.1563,29.2344 640.8281,27.5938 Q639.5156,25.9375 639.5156,22.8125 Q639.5156,19.6875 640.8281,18.0313 Q642.1563,16.375 644.6563,16.375 Q645.3594,16.375 646,16.5313 Q646.6563,16.6875 647.2188,16.9844 L647.2188,19.7031 Q646.5938,19.125 646,18.8594 Q645.4063,18.5781 644.7813,18.5781 Q643.4375,18.5781 642.75,19.6563 Q642.0625,20.7188 642.0625,22.8125 Q642.0625,24.9063 642.75,25.9844 Q643.4375,27.0469 644.7813,27.0469 Q645.4063,27.0469 646,26.7813 Q646.5938,26.5 647.2188,25.9219 L647.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="123" x="664.75" y="27.1543">BufferNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="39" y2="39"/><ellipse cx="379" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="388" y="53.2104">captureRejections : boolean</text><ellipse cx="379" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="388" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="379" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="388" y="78.8198">defaultMaxListeners : number</text><ellipse cx="379" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="388" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="379,96.2188,383,100.2188,379,104.2188,375,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="388" y="104.4292">options : BufferOptions</text><polygon fill="none" points="379,109.0234,383,113.0234,379,117.0234,375,113.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="388" y="117.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="369" x2="1051" y1="123.8281" y2="123.8281"/><ellipse cx="379" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="463" x="388" y="138.0386">addListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="388" y="150.8433">eventNames() : (string | symbol)[]</text><ellipse cx="379" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="388" y="163.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="379" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="388" y="176.4526">getMaxListeners() : number</text><ellipse cx="379" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="388" y="189.2573">getOptions() : NodeOptions</text><ellipse cx="379" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="388" y="202.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="379" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="388" y="214.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="379" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="388" y="227.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="388" y="240.4761">off(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="388" y="253.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="379" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="388" y="266.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="388" y="278.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="379" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="388" y="291.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="379" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="388" y="304.4995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="379" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="489" x="388" y="317.3042">prependListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="518" x="388" y="330.1089">prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="388" y="342.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="379" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="366" x="388" y="355.7183">removeAllListeners(event: string | symbol) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="388" y="368.5229">removeListener(eventName: string | symbol, listener: Function) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="388" y="381.3276">setMaxListeners(n: number) : BufferNode&lt;InOut&gt;</text><ellipse cx="379" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="388" y="394.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="379" cy="403.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="388" y="406.937">setOptions(options: NodeOptions) : BufferNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="379,411.5313,383,415.5313,379,419.5313,375,415.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="388" y="419.7417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="379,424.3359,383,428.3359,379,432.3359,375,428.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="388" y="432.5464">shift() : Promise&lt;InOut&gt;</text><!--MD5=[09dc82c2c4dbd5d3bd1cc86770b2526d]
class ThrottleNode<InOut>--><rect codeLine="69" fill="#FEFECE" filter="url(#f1r2ody80szg3k)" height="444.9453" id="ThrottleNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="991"/><ellipse cx="279.25" cy="1007" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M282.2188,1012.6406 Q281.6406,1012.9375 281,1013.0781 Q280.3594,1013.2344 279.6563,1013.2344 Q277.1563,1013.2344 275.8281,1011.5938 Q274.5156,1009.9375 274.5156,1006.8125 Q274.5156,1003.6875 275.8281,1002.0313 Q277.1563,1000.375 279.6563,1000.375 Q280.3594,1000.375 281,1000.5313 Q281.6563,1000.6875 282.2188,1000.9844 L282.2188,1003.7031 Q281.5938,1003.125 281,1002.8594 Q280.4063,1002.5781 279.7813,1002.5781 Q278.4375,1002.5781 277.75,1003.6563 Q277.0625,1004.7188 277.0625,1006.8125 Q277.0625,1008.9063 277.75,1009.9844 Q278.4375,1011.0469 279.7813,1011.0469 Q280.4063,1011.0469 281,1010.7813 Q281.5938,1010.5 282.2188,1009.9219 L282.2188,1012.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="135" x="299.75" y="1011.1543">ThrottleNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1023" y2="1023"/><ellipse cx="20" cy="1034" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="1037.2104">captureRejections : boolean</text><ellipse cx="20" cy="1046.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="1050.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="1059.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="1062.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="1072.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1075.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1080.2188,24,1084.2188,20,1088.2188,16,1084.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="29" y="1088.4292">options : BufferOptions</text><polygon fill="none" points="20,1093.0234,24,1097.0234,20,1101.0234,16,1097.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="29" y="1101.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1107.8281" y2="1107.8281"/><ellipse cx="20" cy="1118.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="472" x="29" y="1122.0386">addListener(eventName: string | symbol, listener: Function) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1131.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1134.8433">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1144.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1147.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1157.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1160.4526">getMaxListeners() : number</text><ellipse cx="20" cy="1170.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1173.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="1182.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1186.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1195.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1198.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1208.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1211.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1221.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="29" y="1224.4761">off(eventName: string | symbol, listener: Function) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1234.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1237.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1246.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1250.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1259.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1262.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1272.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="29" y="1275.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1285.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="29" y="1288.4995">onPush(frame: InOut) : Promise&lt;void&gt;</text><ellipse cx="20" cy="1298.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="29" y="1301.3042">onThrottlePush() : Promise&lt;void&gt;</text><ellipse cx="20" cy="1310.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="498" x="29" y="1314.1089">prependListener(eventName: string | symbol, listener: Function) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1323.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="527" x="29" y="1326.9136">prependOnceListener(eventName: string | symbol, listener: Function) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1336.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1339.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1349.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="29" y="1352.5229">removeAllListeners(event: string | symbol) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1362.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="494" x="29" y="1365.3276">removeListener(eventName: string | symbol, listener: Function) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1374.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="293" x="29" y="1378.1323">setMaxListeners(n: number) : ThrottleNode&lt;InOut&gt;</text><ellipse cx="20" cy="1387.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1390.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1400.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="326" x="29" y="1403.7417">setOptions(options: NodeOptions) : ThrottleNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1408.3359,24,1412.3359,20,1416.3359,16,1412.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="29" y="1416.5464">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1421.1406,24,1425.1406,20,1429.1406,16,1425.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="29" y="1429.3511">shift() : Promise&lt;InOut&gt;</text><!--MD5=[fa8c5d5c8201bf7c8c2892d0149b49db]
class TimeSyncNode<InOut>--><rect codeLine="103" fill="#FEFECE" filter="url(#f1r2ody80szg3k)" height="444.9453" id="TimeSyncNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="728" y="991"/><ellipse cx="993.75" cy="1007" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M996.7188,1012.6406 Q996.1406,1012.9375 995.5,1013.0781 Q994.8594,1013.2344 994.1563,1013.2344 Q991.6563,1013.2344 990.3281,1011.5938 Q989.0156,1009.9375 989.0156,1006.8125 Q989.0156,1003.6875 990.3281,1002.0313 Q991.6563,1000.375 994.1563,1000.375 Q994.8594,1000.375 995.5,1000.5313 Q996.1563,1000.6875 996.7188,1000.9844 L996.7188,1003.7031 Q996.0938,1003.125 995.5,1002.8594 Q994.9063,1002.5781 994.2813,1002.5781 Q992.9375,1002.5781 992.25,1003.6563 Q991.5625,1004.7188 991.5625,1006.8125 Q991.5625,1008.9063 992.25,1009.9844 Q992.9375,1011.0469 994.2813,1011.0469 Q994.9063,1011.0469 995.5,1010.7813 Q996.0938,1010.5 996.7188,1009.9219 L996.7188,1012.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="144" x="1014.25" y="1011.1543">TimeSyncNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1023" y2="1023"/><ellipse cx="739" cy="1034" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="748" y="1037.2104">captureRejections : boolean</text><ellipse cx="739" cy="1046.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="748" y="1050.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="739" cy="1059.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="748" y="1062.8198">defaultMaxListeners : number</text><ellipse cx="739" cy="1072.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="748" y="1075.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="739,1080.2188,743,1084.2188,739,1088.2188,735,1084.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="748" y="1088.4292">options : TimeSyncOptions</text><polygon fill="none" points="739,1093.0234,743,1097.0234,739,1101.0234,735,1097.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="748" y="1101.2339">service : DataFrameService&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1107.8281" y2="1107.8281"/><ellipse cx="739" cy="1118.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="483" x="748" y="1122.0386">addListener(eventName: string | symbol, listener: Function) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1131.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="748" y="1134.8433">eventNames() : (string | symbol)[]</text><ellipse cx="739" cy="1144.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="748" y="1147.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="739" cy="1157.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="748" y="1160.4526">getMaxListeners() : number</text><ellipse cx="739" cy="1170.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="748" y="1173.2573">getOptions() : NodeOptions</text><ellipse cx="739" cy="1182.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="748" y="1186.062">listenerCount(eventName: string | symbol) : number</text><ellipse cx="739" cy="1195.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="748" y="1198.8667">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="739" cy="1208.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="748" y="1211.6714">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1221.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="431" x="748" y="1224.4761">off(eventName: string | symbol, listener: Function) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1234.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="748" y="1237.2808">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="739" cy="1246.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="748" y="1250.0854">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1259.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="748" y="1262.8901">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1272.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="748" y="1275.6948">onPull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="739" cy="1285.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="352" x="748" y="1288.4995">onPush(frame: InOut, options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="739" cy="1298.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="509" x="748" y="1301.3042">prependListener(eventName: string | symbol, listener: Function) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1310.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="538" x="748" y="1314.1089">prependOnceListener(eventName: string | symbol, listener: Function) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1323.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="748" y="1326.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1336.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="386" x="748" y="1339.7183">removeAllListeners(event: string | symbol) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1349.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="748" y="1352.5229">removeListener(eventName: string | symbol, listener: Function) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1362.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="304" x="748" y="1365.3276">setMaxListeners(n: number) : TimeSyncNode&lt;InOut&gt;</text><ellipse cx="739" cy="1374.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="748" y="1378.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="739" cy="1387.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="337" x="748" y="1390.937">setOptions(options: NodeOptions) : TimeSyncNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1395.5313,743,1399.5313,739,1403.5313,735,1399.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="748" y="1403.7417">next() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1408.3359,743,1412.3359,739,1416.3359,735,1412.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="748" y="1416.5464">shift() : Promise&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1421.1406,743,1425.1406,739,1429.1406,735,1425.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="186" x="748" y="1429.3511">triggerUpdate() : Promise&lt;void&gt;</text><!--MD5=[b42b280cf03fc9fd4fcf3fcc0a3c2d34]
reverse link BufferNode<InOut> to MemoryBufferNode<InOut>--><path codeLine="68" d="M710,459.29 C710,472.5 710,485.76 710,498.89 " fill="none" id="BufferNode&lt;InOut&gt;-backto-MemoryBufferNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="703,459.28,710,439.28,717,459.28,703,459.28" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0e4e84f10b423da36be043577420d528]
reverse link MemoryBufferNode<InOut> to ThrottleNode<InOut>--><path codeLine="102" d="M542.6,947.52 C532.15,961.97 521.64,976.5 511.23,990.9 " fill="none" id="MemoryBufferNode&lt;InOut&gt;-backto-ThrottleNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="536.97,943.35,554.36,931.25,548.32,951.55,536.97,943.35" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[dc4b89fa804d938fa578ab134fd86d77]
reverse link MemoryBufferNode<InOut> to TimeSyncNode<InOut>--><path codeLine="136" d="M877.87,947.52 C888.35,961.97 898.88,976.5 909.33,990.9 " fill="none" id="MemoryBufferNode&lt;InOut&gt;-backto-TimeSyncNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="872.14,951.55,866.07,931.25,883.48,943.33,872.14,951.55" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[42a652c173a431e529acc1c1dfcff2dc]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "MemoryBufferNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : MemoryBufferNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : MemoryBufferNode<InOut>
    +setMaxListeners(n: number) : MemoryBufferNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : MemoryBufferNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
class "BufferNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : BufferNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : BufferNode<InOut>
    +setMaxListeners(n: number) : BufferNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : BufferNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
"BufferNode<InOut>" <|- - "MemoryBufferNode<InOut>"
class "ThrottleNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : BufferOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : ThrottleNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ThrottleNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut) : Promise<void>
    +onThrottlePush() : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : ThrottleNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ThrottleNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ThrottleNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ThrottleNode<InOut>
    +setMaxListeners(n: number) : ThrottleNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ThrottleNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
}
"MemoryBufferNode<InOut>" <|- - "ThrottleNode<InOut>"
class "TimeSyncNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : TimeSyncOptions
    #service : DataFrameService<InOut>
    +addListener(eventName: string | symbol, listener: Function) : TimeSyncNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : TimeSyncNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +onPull(options: PullOptions) : Promise<void>
    +onPush(frame: InOut, options: PushOptions) : Promise<void>
    +prependListener(eventName: string | symbol, listener: Function) : TimeSyncNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : TimeSyncNode<InOut>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : TimeSyncNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : TimeSyncNode<InOut>
    +setMaxListeners(n: number) : TimeSyncNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : TimeSyncNode<InOut>
    #next() : Promise<InOut>
    #shift() : Promise<InOut>
    #triggerUpdate() : Promise<void>
}
"MemoryBufferNode<InOut>" <|- - "TimeSyncNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>