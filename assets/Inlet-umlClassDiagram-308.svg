<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="629px" preserveAspectRatio="none" style="width:705px;height:629px;background:#00000000;" version="1.1" viewBox="0 0 705 629" width="705px" zoomAndPan="magnify"><defs><filter height="300%" id="f8zv3pq12tbxx" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[004996c0f94de40576fa34e00d851ce7]
class Inlet<In>--><rect codeLine="4" fill="#FEFECE" filter="url(#f8zv3pq12tbxx)" height="104.0234" id="Inlet&lt;In&gt;" style="stroke:#A80036;stroke-width:1.5;" width="392" x="153" y="7"/><ellipse cx="314.75" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M310.6719,18.7656 L310.6719,16.6094 L318.0625,16.6094 L318.0625,18.7656 L315.5938,18.7656 L315.5938,26.8438 L318.0625,26.8438 L318.0625,29 L310.6719,29 L310.6719,26.8438 L313.1406,26.8438 L313.1406,18.7656 L310.6719,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="60" x="335.25" y="27.1543">Inlet&lt;In&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="154" x2="544" y1="39" y2="39"/><ellipse cx="164" cy="50" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="173" y="53.2104">emit(name: string, arg: any) : boolean</text><ellipse cx="164" cy="62.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="366" x="173" y="66.0151">emit(name: "completed", event: PushCompletedEvent) : boolean</text><ellipse cx="164" cy="75.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="173" y="78.8198">emit(name: "error", event: PushError) : boolean</text><ellipse cx="164" cy="88.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="270" x="173" y="91.6245">on(name: "push", listener: Function) : Inlet&lt;In&gt;</text><ellipse cx="164" cy="101.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="242" x="173" y="104.4292">pull(options: PullOptions) : Promise&lt;void&gt;</text><!--MD5=[1c41f27d2036472a314a798b2ee18c6a]
class Edge<InOut>--><rect codeLine="11" fill="#FEFECE" filter="url(#f8zv3pq12tbxx)" height="444.9453" id="Edge&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="7" y="171"/><ellipse cx="302.25" cy="187" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M305.2188,192.6406 Q304.6406,192.9375 304,193.0781 Q303.3594,193.2344 302.6563,193.2344 Q300.1563,193.2344 298.8281,191.5938 Q297.5156,189.9375 297.5156,186.8125 Q297.5156,183.6875 298.8281,182.0313 Q300.1563,180.375 302.6563,180.375 Q303.3594,180.375 304,180.5313 Q304.6563,180.6875 305.2188,180.9844 L305.2188,183.7031 Q304.5938,183.125 304,182.8594 Q303.4063,182.5781 302.7813,182.5781 Q301.4375,182.5781 300.75,183.6563 Q300.0625,184.7188 300.0625,186.8125 Q300.0625,188.9063 300.75,189.9844 Q301.4375,191.0469 302.7813,191.0469 Q303.4063,191.0469 304,190.7813 Q304.5938,190.5 305.2188,189.9219 L305.2188,192.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="85" x="322.75" y="191.1543">Edge&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="690" y1="203" y2="203"/><ellipse cx="18" cy="214" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="27" y="217.2104">captureRejections : boolean</text><ellipse cx="18" cy="226.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="27" y="230.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="18" cy="239.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="27" y="242.8198">defaultMaxListeners : number</text><ellipse cx="18" cy="252.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="27" y="255.6245">errorMonitor : typeof errorMonitor</text><ellipse cx="18" cy="265.2188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="27" y="268.4292">inputNode : GraphNode&lt;any, InOut&gt;</text><ellipse cx="18" cy="278.0234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="217" x="27" y="281.2339">outputNode : GraphNode&lt;InOut, any&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="690" y1="287.8281" y2="287.8281"/><ellipse cx="18" cy="298.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="427" x="27" y="302.0386">addListener(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="311.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="366" x="27" y="314.8433">emit(name: "completed", event: PushCompletedEvent) : boolean</text><ellipse cx="18" cy="324.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="27" y="327.6479">emit(name: "error", event: PushError) : boolean</text><ellipse cx="18" cy="337.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="27" y="340.4526">eventNames() : (string | symbol)[]</text><ellipse cx="18" cy="350.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="27" y="353.2573">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="18" cy="362.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="27" y="366.062">getMaxListeners() : number</text><ellipse cx="18" cy="375.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="27" y="378.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="18" cy="388.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="27" y="391.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="18" cy="401.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="27" y="404.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="414.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="27" y="417.2808">off(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="426.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="430.0854">on(name: "pull", listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="439.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="27" y="442.8901">on(name: "push", listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="452.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="27" y="455.6948">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="18" cy="465.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="387" x="27" y="468.4995">once(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="478.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="27" y="481.3042">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="18" cy="490.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="27" y="494.1089">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="18" cy="503.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="453" x="27" y="506.9136">prependListener(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="516.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="482" x="27" y="519.7183">prependOnceListener(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="529.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="242" x="27" y="532.5229">pull(options: PullOptions) : Promise&lt;void&gt;</text><ellipse cx="18" cy="542.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="379" x="27" y="545.3276">push(data: InOut | InOut[], options: PushOptions) : Promise&lt;void&gt;</text><ellipse cx="18" cy="554.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="27" y="558.1323">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="18" cy="567.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="330" x="27" y="570.937">removeAllListeners(event: string | symbol) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="580.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="27" y="583.7417">removeListener(eventName: string | symbol, listener: Function) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="593.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="248" x="27" y="596.5464">setMaxListeners(n: number) : Edge&lt;InOut&gt;</text><ellipse cx="18" cy="606.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="27" y="609.3511">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><!--MD5=[e81f10a538f69d734ae61da47d8f3163]
reverse link Inlet<In> to Edge<InOut>--><path codeLine="44" d="M349,131.4 C349,143.65 349,156.92 349,170.77 " fill="none" id="Inlet&lt;In&gt;-backto-Edge&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="342,131.22,349,111.22,356,131.22,342,131.22" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a040a041970402f25c6dddf98ed9a94b]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "Inlet<In>" {
    +emit(name: string, arg: any) : boolean
    +emit(name: "completed", event: PushCompletedEvent) : boolean
    +emit(name: "error", event: PushError) : boolean
    +on(name: "push", listener: Function) : Inlet<In>
    +pull(options: PullOptions) : Promise<void>
}
class "Edge<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    +inputNode : GraphNode<any, InOut>
    +outputNode : GraphNode<InOut, any>
    +addListener(eventName: string | symbol, listener: Function) : Edge<InOut>
    +emit(name: "completed", event: PushCompletedEvent) : boolean
    +emit(name: "error", event: PushError) : boolean
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : Edge<InOut>
    +on(name: "pull", listener: Function) : Edge<InOut>
    +on(name: "push", listener: Function) : Edge<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    +once(eventName: string | symbol, listener: Function) : Edge<InOut>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : Edge<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : Edge<InOut>
    +pull(options: PullOptions) : Promise<void>
    +push(data: InOut | InOut[], options: PushOptions) : Promise<void>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : Edge<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : Edge<InOut>
    +setMaxListeners(n: number) : Edge<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
}
"Inlet<In>" <|.. "Edge<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>