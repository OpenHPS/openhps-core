<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1552px" preserveAspectRatio="none" style="width:3583px;height:1552px;background:#00000000;" version="1.1" viewBox="0 0 3583 1552" width="3583px" zoomAndPan="magnify"><defs><filter height="300%" id="fnvasi9ynhpyu" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[5c1e6fce4365e56468cf60e0107291cc]
class PropertyFilterProcessingNode<InOut>--><rect codeLine="4" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="PropertyFilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1447" y="512"/><ellipse cx="1666.75" cy="528" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1666.8594,523.3438 L1665.7031,528.4219 L1668.0313,528.4219 L1666.8594,523.3438 Z M1665.375,521.1094 L1668.3594,521.1094 L1671.7188,533.5 L1669.2656,533.5 L1668.5,530.4375 L1665.2188,530.4375 L1664.4688,533.5 L1662.0313,533.5 L1665.375,521.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="236" x="1687.25" y="532.1543">PropertyFilterProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="544" y2="544"/><ellipse cx="1458" cy="555" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1467" y="558.2104">captureRejections : boolean</text><ellipse cx="1458" cy="567.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1467" y="571.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1458" cy="580.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1467" y="583.8198">defaultMaxListeners : number</text><ellipse cx="1458" cy="593.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1467" y="596.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1458,601.2188,1462,605.2188,1458,609.2188,1454,605.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1467" y="609.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="616.0234" y2="616.0234"/><ellipse cx="1458" cy="627.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="567" x="1467" y="630.2339">addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="639.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1467" y="643.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1458" cy="652.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="552" x="1467" y="655.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise&lt;T&gt;</text><ellipse cx="1458" cy="665.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1467" y="668.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1458" cy="678.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1467" y="681.4526">getMaxListeners() : number</text><ellipse cx="1458" cy="691.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1467" y="694.2573">getOptions() : NodeOptions</text><ellipse cx="1458" cy="703.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="522" x="1467" y="707.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: FilterProcessingOptions) : Promise&lt;any&gt;</text><ellipse cx="1458" cy="716.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1467" y="719.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1458" cy="729.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1467" y="732.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1458" cy="742.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1467" y="745.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="755.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="515" x="1467" y="758.2808">off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="767.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1467" y="771.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1458" cy="780.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1467" y="783.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="793.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1467" y="796.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="806.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="593" x="1467" y="809.4995">prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="819.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="622" x="1467" y="822.3042">prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="831.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1467" y="835.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1458" cy="844.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="1467" y="847.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1458" cy="857.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1467" y="860.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="870.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="470" x="1467" y="873.5229">removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="883.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="589" x="1467" y="886.3276">removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="895.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="1467" y="899.1323">setMaxListeners(n: number) : PropertyFilterProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="908.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1467" y="911.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1458" cy="921.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="421" x="1467" y="924.7417">setOptions(options: NodeOptions) : PropertyFilterProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1458,929.3359,1462,933.3359,1458,937.3359,1454,933.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="1467" y="937.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="1458,942.1406,1462,946.1406,1458,950.1406,1454,946.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1467" y="950.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1458,954.9453,1462,958.9453,1458,962.9453,1454,958.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1467" y="963.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1458,967.75,1462,971.75,1458,975.75,1454,971.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="975.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1458,980.5547,1462,984.5547,1458,988.5547,1454,984.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1467" y="988.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[9ac6b26c9c0951042fc71ef94bb46580]
class ObjectProcessingNode<InOut>--><rect codeLine="40" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="444.9453" id="ObjectProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1447" y="7"/><ellipse cx="1689.25" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1689.3594,18.3438 L1688.2031,23.4219 L1690.5313,23.4219 L1689.3594,18.3438 Z M1687.875,16.1094 L1690.8594,16.1094 L1694.2188,28.5 L1691.7656,28.5 L1691,25.4375 L1687.7188,25.4375 L1686.9688,28.5 L1684.5313,28.5 L1687.875,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="191" x="1709.75" y="27.1543">ObjectProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="39" y2="39"/><ellipse cx="1458" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1467" y="53.2104">captureRejections : boolean</text><ellipse cx="1458" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1467" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1458" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1467" y="78.8198">defaultMaxListeners : number</text><ellipse cx="1458" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1467" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1458,96.2188,1462,100.2188,1458,104.2188,1454,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1467" y="104.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="111.0234" y2="111.0234"/><ellipse cx="1458" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="527" x="1467" y="125.2339">addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1467" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1458" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1467" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1458" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1467" y="163.6479">getMaxListeners() : number</text><ellipse cx="1458" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1467" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="1458" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1467" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1458" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1467" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1458" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1467" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1467" y="227.6714">off(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1467" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1458" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1467" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1467" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="553" x="1467" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="582" x="1467" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1467" y="304.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1458" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="599" x="1467" y="317.3042">processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise&lt;DataObject&gt;</text><ellipse cx="1458" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1467" y="330.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="430" x="1467" y="342.9136">removeAllListeners(event: string | symbol) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="549" x="1467" y="355.7183">removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="348" x="1467" y="368.5229">setMaxListeners(n: number) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1458" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1467" y="381.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1458" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="381" x="1467" y="394.1323">setOptions(options: NodeOptions) : ObjectProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1458,398.7266,1462,402.7266,1458,406.7266,1454,402.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1467" y="406.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1458,411.5313,1462,415.5313,1458,419.5313,1454,415.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1467" y="419.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1458,424.3359,1462,428.3359,1458,432.3359,1454,428.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="432.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1458,437.1406,1462,441.1406,1458,445.1406,1454,441.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1467" y="445.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[04136766ff0befd35071916e913a5e97]
class BKFilterNode<InOut>--><rect codeLine="74" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="BKFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="9" y="1055"/><ellipse cx="280.75" cy="1071" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M283.7188,1076.6406 Q283.1406,1076.9375 282.5,1077.0781 Q281.8594,1077.2344 281.1563,1077.2344 Q278.6563,1077.2344 277.3281,1075.5938 Q276.0156,1073.9375 276.0156,1070.8125 Q276.0156,1067.6875 277.3281,1066.0313 Q278.6563,1064.375 281.1563,1064.375 Q281.8594,1064.375 282.5,1064.5313 Q283.1563,1064.6875 283.7188,1064.9844 L283.7188,1067.7031 Q283.0938,1067.125 282.5,1066.8594 Q281.9063,1066.5781 281.2813,1066.5781 Q279.9375,1066.5781 279.25,1067.6563 Q278.5625,1068.7188 278.5625,1070.8125 Q278.5625,1072.9063 279.25,1073.9844 Q279.9375,1075.0469 281.2813,1075.0469 Q281.9063,1075.0469 282.5,1074.7813 Q283.0938,1074.5 283.7188,1073.9219 L283.7188,1076.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="132" x="301.25" y="1075.1543">BKFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1087" y2="1087"/><ellipse cx="20" cy="1098" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="1101.2104">captureRejections : boolean</text><ellipse cx="20" cy="1110.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="1114.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="1123.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="1126.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="1136.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1139.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1144.2188,24,1148.2188,20,1152.2188,16,1148.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="29" y="1152.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="692" y1="1159.0234" y2="1159.0234"/><ellipse cx="20" cy="1170.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="471" x="29" y="1173.2339">addListener(eventName: string | symbol, listener: Function) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1182.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1186.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1195.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="362" x="29" y="1198.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: any) : Promise&lt;T&gt;</text><ellipse cx="20" cy="1208.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1211.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1221.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1224.4526">getMaxListeners() : number</text><ellipse cx="20" cy="1234.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1237.2573">getOptions() : NodeOptions</text><ellipse cx="20" cy="1246.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="504" x="29" y="1250.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: KalmanFilterOptions) : Promise&lt;any&gt;</text><ellipse cx="20" cy="1259.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1262.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1272.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1275.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1285.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1288.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1298.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="419" x="29" y="1301.2808">off(eventName: string | symbol, listener: Function) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1310.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1314.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1323.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1326.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1336.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1339.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1349.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="29" y="1352.4995">prependListener(eventName: string | symbol, listener: Function) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1362.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="526" x="29" y="1365.3042">prependOnceListener(eventName: string | symbol, listener: Function) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1374.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="29" y="1378.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="1387.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="29" y="1390.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="1400.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1403.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1413.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="374" x="29" y="1416.5229">removeAllListeners(event: string | symbol) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1426.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="29" y="1429.3276">removeListener(eventName: string | symbol, listener: Function) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1438.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="29" y="1442.1323">setMaxListeners(n: number) : BKFilterNode&lt;InOut&gt;</text><ellipse cx="20" cy="1451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1454.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1464.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="29" y="1467.7417">setOptions(options: NodeOptions) : BKFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1472.3359,24,1476.3359,20,1480.3359,16,1476.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="29" y="1480.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="20,1485.1406,24,1489.1406,20,1493.1406,16,1489.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="1493.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,1497.9453,24,1501.9453,20,1505.9453,16,1501.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="29" y="1506.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="20,1510.75,24,1514.75,20,1518.75,16,1514.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="1518.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,1523.5547,24,1527.5547,20,1531.5547,16,1527.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="1531.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[86f71cb2f02daa485184d203f554166a]
class LPFilterNode<InOut>--><rect codeLine="111" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="LPFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="728" y="1055"/><ellipse cx="1000.25" cy="1071" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1003.2188,1076.6406 Q1002.6406,1076.9375 1002,1077.0781 Q1001.3594,1077.2344 1000.6563,1077.2344 Q998.1563,1077.2344 996.8281,1075.5938 Q995.5156,1073.9375 995.5156,1070.8125 Q995.5156,1067.6875 996.8281,1066.0313 Q998.1563,1064.375 1000.6563,1064.375 Q1001.3594,1064.375 1002,1064.5313 Q1002.6563,1064.6875 1003.2188,1064.9844 L1003.2188,1067.7031 Q1002.5938,1067.125 1002,1066.8594 Q1001.4063,1066.5781 1000.7813,1066.5781 Q999.4375,1066.5781 998.75,1067.6563 Q998.0625,1068.7188 998.0625,1070.8125 Q998.0625,1072.9063 998.75,1073.9844 Q999.4375,1075.0469 1000.7813,1075.0469 Q1001.4063,1075.0469 1002,1074.7813 Q1002.5938,1074.5 1003.2188,1073.9219 L1003.2188,1076.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="131" x="1020.75" y="1075.1543">LPFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1087" y2="1087"/><ellipse cx="739" cy="1098" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="748" y="1101.2104">captureRejections : boolean</text><ellipse cx="739" cy="1110.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="748" y="1114.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="739" cy="1123.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="748" y="1126.8198">defaultMaxListeners : number</text><ellipse cx="739" cy="1136.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="748" y="1139.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="739,1144.2188,743,1148.2188,739,1152.2188,735,1148.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="748" y="1152.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="729" x2="1411" y1="1159.0234" y2="1159.0234"/><ellipse cx="739" cy="1170.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="469" x="748" y="1173.2339">addListener(eventName: string | symbol, listener: Function) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1182.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="748" y="1186.0386">eventNames() : (string | symbol)[]</text><ellipse cx="739" cy="1195.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="748" y="1198.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: Object) : Promise&lt;T&gt;</text><ellipse cx="739" cy="1208.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="748" y="1211.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="739" cy="1221.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="748" y="1224.4526">getMaxListeners() : number</text><ellipse cx="739" cy="1234.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="748" y="1237.2573">getOptions() : NodeOptions</text><ellipse cx="739" cy="1246.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="748" y="1250.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: LPFilterOptions) : Promise&lt;any&gt;</text><ellipse cx="739" cy="1259.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="748" y="1262.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="739" cy="1272.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="748" y="1275.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="739" cy="1285.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="748" y="1288.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1298.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="748" y="1301.2808">off(eventName: string | symbol, listener: Function) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1310.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="748" y="1314.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="739" cy="1323.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="748" y="1326.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1336.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="748" y="1339.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="739" cy="1349.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="495" x="748" y="1352.4995">prependListener(eventName: string | symbol, listener: Function) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1362.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="524" x="748" y="1365.3042">prependOnceListener(eventName: string | symbol, listener: Function) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1374.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="748" y="1378.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="739" cy="1387.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="748" y="1390.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="739" cy="1400.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="748" y="1403.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="739" cy="1413.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="372" x="748" y="1416.5229">removeAllListeners(event: string | symbol) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1426.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="748" y="1429.3276">removeListener(eventName: string | symbol, listener: Function) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1438.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="290" x="748" y="1442.1323">setMaxListeners(n: number) : LPFilterNode&lt;InOut&gt;</text><ellipse cx="739" cy="1451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="748" y="1454.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="739" cy="1464.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="323" x="748" y="1467.7417">setOptions(options: NodeOptions) : LPFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="739,1472.3359,743,1476.3359,739,1480.3359,735,1476.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="748" y="1480.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="739,1485.1406,743,1489.1406,739,1493.1406,735,1489.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="748" y="1493.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="739,1497.9453,743,1501.9453,739,1505.9453,735,1501.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="748" y="1506.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="739,1510.75,743,1514.75,739,1518.75,735,1514.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="748" y="1518.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="739,1523.5547,743,1527.5547,739,1531.5547,735,1527.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="748" y="1531.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[f9383396bd36b10a2a3661231da535e8]
class HPFilterNode<InOut>--><rect codeLine="148" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="HPFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1447" y="1055"/><ellipse cx="1717.75" cy="1071" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1720.7188,1076.6406 Q1720.1406,1076.9375 1719.5,1077.0781 Q1718.8594,1077.2344 1718.1563,1077.2344 Q1715.6563,1077.2344 1714.3281,1075.5938 Q1713.0156,1073.9375 1713.0156,1070.8125 Q1713.0156,1067.6875 1714.3281,1066.0313 Q1715.6563,1064.375 1718.1563,1064.375 Q1718.8594,1064.375 1719.5,1064.5313 Q1720.1563,1064.6875 1720.7188,1064.9844 L1720.7188,1067.7031 Q1720.0938,1067.125 1719.5,1066.8594 Q1718.9063,1066.5781 1718.2813,1066.5781 Q1716.9375,1066.5781 1716.25,1067.6563 Q1715.5625,1068.7188 1715.5625,1070.8125 Q1715.5625,1072.9063 1716.25,1073.9844 Q1716.9375,1075.0469 1718.2813,1075.0469 Q1718.9063,1075.0469 1719.5,1074.7813 Q1720.0938,1074.5 1720.7188,1073.9219 L1720.7188,1076.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="134" x="1738.25" y="1075.1543">HPFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="1087" y2="1087"/><ellipse cx="1458" cy="1098" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1467" y="1101.2104">captureRejections : boolean</text><ellipse cx="1458" cy="1110.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1467" y="1114.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1458" cy="1123.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1467" y="1126.8198">defaultMaxListeners : number</text><ellipse cx="1458" cy="1136.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1467" y="1139.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1458,1144.2188,1462,1148.2188,1458,1152.2188,1454,1148.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1467" y="1152.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1448" x2="2130" y1="1159.0234" y2="1159.0234"/><ellipse cx="1458" cy="1170.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="471" x="1467" y="1173.2339">addListener(eventName: string | symbol, listener: Function) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1182.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1467" y="1186.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1458" cy="1195.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="1467" y="1198.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: Object) : Promise&lt;T&gt;</text><ellipse cx="1458" cy="1208.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1467" y="1211.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1458" cy="1221.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1467" y="1224.4526">getMaxListeners() : number</text><ellipse cx="1458" cy="1234.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1467" y="1237.2573">getOptions() : NodeOptions</text><ellipse cx="1458" cy="1246.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="1467" y="1250.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: HPFilterOptions) : Promise&lt;Object&gt;</text><ellipse cx="1458" cy="1259.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1467" y="1262.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1458" cy="1272.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1467" y="1275.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1458" cy="1285.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1467" y="1288.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1298.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="419" x="1467" y="1301.2808">off(eventName: string | symbol, listener: Function) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1310.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1467" y="1314.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1458" cy="1323.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1467" y="1326.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1336.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1467" y="1339.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1458" cy="1349.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="497" x="1467" y="1352.4995">prependListener(eventName: string | symbol, listener: Function) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1362.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="526" x="1467" y="1365.3042">prependOnceListener(eventName: string | symbol, listener: Function) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1374.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1467" y="1378.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1458" cy="1387.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="1467" y="1390.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1458" cy="1400.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1467" y="1403.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1458" cy="1413.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="374" x="1467" y="1416.5229">removeAllListeners(event: string | symbol) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1426.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="1467" y="1429.3276">removeListener(eventName: string | symbol, listener: Function) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1438.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="1467" y="1442.1323">setMaxListeners(n: number) : HPFilterNode&lt;InOut&gt;</text><ellipse cx="1458" cy="1451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1467" y="1454.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1458" cy="1464.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="325" x="1467" y="1467.7417">setOptions(options: NodeOptions) : HPFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1458,1472.3359,1462,1476.3359,1458,1480.3359,1454,1476.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="1467" y="1480.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="1458,1485.1406,1462,1489.1406,1458,1493.1406,1454,1489.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1467" y="1493.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1458,1497.9453,1462,1501.9453,1458,1505.9453,1454,1501.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1467" y="1506.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1458,1510.75,1462,1514.75,1458,1518.75,1454,1514.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1467" y="1518.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1458,1523.5547,1462,1527.5547,1458,1531.5547,1454,1527.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1467" y="1531.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[45f43e91f53a759b1024bda2528f1dfb]
class SMAFilterNode<InOut>--><rect codeLine="185" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="SMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="2166" y="1055"/><ellipse cx="2432.25" cy="1071" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2435.2188,1076.6406 Q2434.6406,1076.9375 2434,1077.0781 Q2433.3594,1077.2344 2432.6563,1077.2344 Q2430.1563,1077.2344 2428.8281,1075.5938 Q2427.5156,1073.9375 2427.5156,1070.8125 Q2427.5156,1067.6875 2428.8281,1066.0313 Q2430.1563,1064.375 2432.6563,1064.375 Q2433.3594,1064.375 2434,1064.5313 Q2434.6563,1064.6875 2435.2188,1064.9844 L2435.2188,1067.7031 Q2434.5938,1067.125 2434,1066.8594 Q2433.4063,1066.5781 2432.7813,1066.5781 Q2431.4375,1066.5781 2430.75,1067.6563 Q2430.0625,1068.7188 2430.0625,1070.8125 Q2430.0625,1072.9063 2430.75,1073.9844 Q2431.4375,1075.0469 2432.7813,1075.0469 Q2433.4063,1075.0469 2434,1074.7813 Q2434.5938,1074.5 2435.2188,1073.9219 L2435.2188,1076.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="143" x="2452.75" y="1075.1543">SMAFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="1087" y2="1087"/><ellipse cx="2177" cy="1098" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="2186" y="1101.2104">captureRejections : boolean</text><ellipse cx="2177" cy="1110.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="2186" y="1114.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="2177" cy="1123.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="2186" y="1126.8198">defaultMaxListeners : number</text><ellipse cx="2177" cy="1136.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2186" y="1139.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="2177,1144.2188,2181,1148.2188,2177,1152.2188,2173,1148.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2186" y="1152.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2167" x2="2849" y1="1159.0234" y2="1159.0234"/><ellipse cx="2177" cy="1170.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="480" x="2186" y="1173.2339">addListener(eventName: string | symbol, listener: Function) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1182.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="2186" y="1186.0386">eventNames() : (string | symbol)[]</text><ellipse cx="2177" cy="1195.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="532" x="2186" y="1198.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: Object, options: SMAFilterOptions) : Promise&lt;T&gt;</text><ellipse cx="2177" cy="1208.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="2186" y="1211.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="2177" cy="1221.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2186" y="1224.4526">getMaxListeners() : number</text><ellipse cx="2177" cy="1234.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="2186" y="1237.2573">getOptions() : NodeOptions</text><ellipse cx="2177" cy="1246.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="546" x="2186" y="1250.062">initFilter(object: DataObject, value: number | Vector, options: SMAFilterOptions) : Promise&lt;any&gt;</text><ellipse cx="2177" cy="1259.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2186" y="1262.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="2177" cy="1272.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="2186" y="1275.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="2177" cy="1285.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2186" y="1288.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1298.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="428" x="2186" y="1301.2808">off(eventName: string | symbol, listener: Function) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1310.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="2186" y="1314.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="2177" cy="1323.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="2186" y="1326.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1336.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="2186" y="1339.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2177" cy="1349.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="506" x="2186" y="1352.4995">prependListener(eventName: string | symbol, listener: Function) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1362.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="535" x="2186" y="1365.3042">prependOnceListener(eventName: string | symbol, listener: Function) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1374.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="2186" y="1378.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="2177" cy="1387.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="2186" y="1390.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="2177" cy="1400.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2186" y="1403.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="2177" cy="1413.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="2186" y="1416.5229">removeAllListeners(event: string | symbol) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1426.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="502" x="2186" y="1429.3276">removeListener(eventName: string | symbol, listener: Function) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1438.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="301" x="2186" y="1442.1323">setMaxListeners(n: number) : SMAFilterNode&lt;InOut&gt;</text><ellipse cx="2177" cy="1451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2186" y="1454.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="2177" cy="1464.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="334" x="2186" y="1467.7417">setOptions(options: NodeOptions) : SMAFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="2177,1472.3359,2181,1476.3359,2177,1480.3359,2173,1476.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="2186" y="1480.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="2177,1485.1406,2181,1489.1406,2177,1493.1406,2173,1489.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2186" y="1493.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="2177,1497.9453,2181,1501.9453,2177,1505.9453,2173,1501.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="2186" y="1506.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="2177,1510.75,2181,1514.75,2177,1518.75,2173,1514.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="2186" y="1518.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="2177,1523.5547,2181,1527.5547,2177,1531.5547,2173,1527.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="2186" y="1531.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[e0499c8a5a139b56877d613ac551220a]
class EMAFilterNode<InOut>--><rect codeLine="222" fill="#FEFECE" filter="url(#fnvasi9ynhpyu)" height="483.3594" id="EMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="2885" y="1055"/><ellipse cx="3151.25" cy="1071" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3154.2188,1076.6406 Q3153.6406,1076.9375 3153,1077.0781 Q3152.3594,1077.2344 3151.6563,1077.2344 Q3149.1563,1077.2344 3147.8281,1075.5938 Q3146.5156,1073.9375 3146.5156,1070.8125 Q3146.5156,1067.6875 3147.8281,1066.0313 Q3149.1563,1064.375 3151.6563,1064.375 Q3152.3594,1064.375 3153,1064.5313 Q3153.6563,1064.6875 3154.2188,1064.9844 L3154.2188,1067.7031 Q3153.5938,1067.125 3153,1066.8594 Q3152.4063,1066.5781 3151.7813,1066.5781 Q3150.4375,1066.5781 3149.75,1067.6563 Q3149.0625,1068.7188 3149.0625,1070.8125 Q3149.0625,1072.9063 3149.75,1073.9844 Q3150.4375,1075.0469 3151.7813,1075.0469 Q3152.4063,1075.0469 3153,1074.7813 Q3153.5938,1074.5 3154.2188,1073.9219 L3154.2188,1076.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="143" x="3171.75" y="1075.1543">EMAFilterNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2886" x2="3568" y1="1087" y2="1087"/><ellipse cx="2896" cy="1098" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="2905" y="1101.2104">captureRejections : boolean</text><ellipse cx="2896" cy="1110.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="2905" y="1114.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="2896" cy="1123.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="2905" y="1126.8198">defaultMaxListeners : number</text><ellipse cx="2896" cy="1136.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="2905" y="1139.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="2896,1144.2188,2900,1148.2188,2896,1152.2188,2892,1148.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2905" y="1152.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2886" x2="3568" y1="1159.0234" y2="1159.0234"/><ellipse cx="2896" cy="1170.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="479" x="2905" y="1173.2339">addListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1182.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="2905" y="1186.0386">eventNames() : (string | symbol)[]</text><ellipse cx="2896" cy="1195.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="378" x="2905" y="1198.8433">filter&lt;T&gt;(object: DataObject, value: T, filter: Object) : Promise&lt;T&gt;</text><ellipse cx="2896" cy="1208.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="2905" y="1211.6479">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="2896" cy="1221.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2905" y="1224.4526">getMaxListeners() : number</text><ellipse cx="2896" cy="1234.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="2905" y="1237.2573">getOptions() : NodeOptions</text><ellipse cx="2896" cy="1246.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="2905" y="1250.062">initFilter&lt;T&gt;(object: DataObject, value: T, options: EMAFilterOptions) : Promise&lt;any&gt;</text><ellipse cx="2896" cy="1259.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2905" y="1262.8667">listenerCount(eventName: string | symbol) : number</text><ellipse cx="2896" cy="1272.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="2905" y="1275.6714">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="2896" cy="1285.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2905" y="1288.4761">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="2896" cy="1298.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="427" x="2905" y="1301.2808">off(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1310.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="2905" y="1314.0854">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="2896" cy="1323.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="2905" y="1326.8901">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2896" cy="1336.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="2905" y="1339.6948">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="2896" cy="1349.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="505" x="2905" y="1352.4995">prependListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1362.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="2905" y="1365.3042">prependOnceListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1374.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="2905" y="1378.1089">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="2896" cy="1387.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="413" x="2905" y="1390.9136">processObject(object: DataObject, frame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="2896" cy="1400.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2905" y="1403.7183">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="2896" cy="1413.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="382" x="2905" y="1416.5229">removeAllListeners(event: string | symbol) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1426.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="2905" y="1429.3276">removeListener(eventName: string | symbol, listener: Function) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1438.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="300" x="2905" y="1442.1323">setMaxListeners(n: number) : EMAFilterNode&lt;InOut&gt;</text><ellipse cx="2896" cy="1451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="2905" y="1454.937">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="2896" cy="1464.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="2905" y="1467.7417">setOptions(options: NodeOptions) : EMAFilterNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="2896,1472.3359,2900,1476.3359,2896,1480.3359,2892,1476.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="523" x="2905" y="1480.5464">filterValue&lt;T&gt;(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise&lt;[any, T]&gt;</text><polygon fill="#FFFF44" points="2896,1485.1406,2900,1489.1406,2896,1493.1406,2892,1489.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2905" y="1493.3511">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="2896,1497.9453,2900,1501.9453,2896,1505.9453,2892,1501.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="2905" y="1506.1558">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="2896,1510.75,2900,1514.75,2896,1518.75,2892,1514.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="2905" y="1518.9604">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="2896,1523.5547,2900,1527.5547,2896,1531.5547,2892,1527.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="2905" y="1531.7651">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[a2bfc0801b07b258266f079173d6a1a0]
reverse link ObjectProcessingNode<InOut> to PropertyFilterProcessingNode<InOut>--><path codeLine="73" d="M1789,472.67 C1789,485.71 1789,498.82 1789,511.85 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-PropertyFilterProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1782,472.25,1789,452.25,1796,472.25,1782,472.25" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[53d5aee9eb855f924fa3196a138aab70]
reverse link PropertyFilterProcessingNode<InOut> to BKFilterNode<InOut>--><path codeLine="110" d="M1427.3,824.89 C1212.84,873.98 939.05,949.69 710,1055 C704.38,1057.59 698.74,1060.25 693.11,1063 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-BKFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1425.83,818.05,1446.88,820.44,1428.93,831.7,1425.83,818.05" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3980218a9996c7d611d31124d6bb0003]
reverse link PropertyFilterProcessingNode<InOut> to LPFilterNode<InOut>--><path codeLine="147" d="M1453.11,1007.24 C1432.05,1023.08 1410.87,1039.01 1389.89,1054.81 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-LPFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1449,1001.57,1469.19,995.14,1457.41,1012.76,1449,1001.57" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[df71bc5f09bee4309ab74605dc8dce0f]
reverse link PropertyFilterProcessingNode<InOut> to HPFilterNode<InOut>--><path codeLine="184" d="M1789,1015.75 C1789,1028.77 1789,1041.81 1789,1054.76 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-HPFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1782,1015.34,1789,995.34,1796,1015.34,1782,1015.34" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[69dda514f194b40aa66cd3c4ef63f9e5]
reverse link PropertyFilterProcessingNode<InOut> to SMAFilterNode<InOut>--><path codeLine="221" d="M2124.89,1007.24 C2145.95,1023.08 2167.13,1039.01 2188.11,1054.81 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-SMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2120.59,1012.76,2108.81,995.14,2129,1001.57,2120.59,1012.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[df01c51bd2cbc1d688585763a5ff8bd8]
reverse link PropertyFilterProcessingNode<InOut> to EMAFilterNode<InOut>--><path codeLine="258" d="M2150.7,824.89 C2365.16,873.98 2638.95,949.69 2868,1055 C2873.62,1057.59 2879.26,1060.25 2884.89,1063 " fill="none" id="PropertyFilterProcessingNode&lt;InOut&gt;-backto-EMAFilterNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2149.07,831.7,2131.12,820.44,2152.17,818.05,2149.07,831.7" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[55a6616135edb15bcc9ead853c7971d0]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
abstract class "PropertyFilterProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {abstract} +filter<T>(object: DataObject, value: T, filter: any, options: FilterProcessingOptions) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    {abstract} +initFilter<T>(object: DataObject, value: T, options: FilterProcessingOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : PropertyFilterProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : PropertyFilterProcessingNode<InOut>
    +setMaxListeners(n: number) : PropertyFilterProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : PropertyFilterProcessingNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
abstract class "ObjectProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    {abstract} +processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ObjectProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +setMaxListeners(n: number) : ObjectProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ObjectProcessingNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "PropertyFilterProcessingNode<InOut>"
class "BKFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : BKFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: any) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter<T>(object: DataObject, value: T, options: KalmanFilterOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : BKFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : BKFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : BKFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : BKFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : BKFilterNode<InOut>
    +setMaxListeners(n: number) : BKFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : BKFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "BKFilterNode<InOut>"
class "LPFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : LPFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: Object) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter<T>(object: DataObject, value: T, options: LPFilterOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : LPFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : LPFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : LPFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : LPFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : LPFilterNode<InOut>
    +setMaxListeners(n: number) : LPFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : LPFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "LPFilterNode<InOut>"
class "HPFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : HPFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: Object) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter<T>(object: DataObject, value: T, options: HPFilterOptions) : Promise<Object>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : HPFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : HPFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : HPFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : HPFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : HPFilterNode<InOut>
    +setMaxListeners(n: number) : HPFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : HPFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "HPFilterNode<InOut>"
class "SMAFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : SMAFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: Object, options: SMAFilterOptions) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter(object: DataObject, value: number | Vector, options: SMAFilterOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : SMAFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : SMAFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : SMAFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : SMAFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : SMAFilterNode<InOut>
    +setMaxListeners(n: number) : SMAFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : SMAFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "SMAFilterNode<InOut>"
class "EMAFilterNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +eventNames() : (string | symbol)[]
    +filter<T>(object: DataObject, value: T, filter: Object) : Promise<T>
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +initFilter<T>(object: DataObject, value: T, options: EMAFilterOptions) : Promise<any>
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(object: DataObject, frame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : EMAFilterNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : EMAFilterNode<InOut>
    +setMaxListeners(n: number) : EMAFilterNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : EMAFilterNode<InOut>
    #filterValue<T>(object: DataObject, obj: any, key: PropertyKey, value: T) : Promise<[any, T]>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"PropertyFilterProcessingNode<InOut>" <|- - "EMAFilterNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>