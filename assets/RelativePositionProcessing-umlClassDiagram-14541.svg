<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1552px" preserveAspectRatio="none" style="width:2847px;height:1552px;background:#00000000;" version="1.1" viewBox="0 0 2847 1552" width="2847px" zoomAndPan="magnify"><defs><filter height="300%" id="fs8pjnpxsx2lf" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[7ffd5ac383842b25700f3e4bbd162597]
class RelativePositionProcessing<InOut, R>--><rect codeLine="4" fill="#FEFECE" filter="url(#fs8pjnpxsx2lf)" height="457.75" id="RelativePositionProcessing&lt;InOut, R&gt;" style="stroke:#A80036;stroke-width:1.5;" width="778" x="1032" y="512"/><ellipse cx="1300.75" cy="528" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1300.8594,523.3438 L1299.7031,528.4219 L1302.0313,528.4219 L1300.8594,523.3438 Z M1299.375,521.1094 L1302.3594,521.1094 L1305.7188,533.5 L1303.2656,533.5 L1302.5,530.4375 L1299.2188,530.4375 L1298.4688,533.5 L1296.0313,533.5 L1299.375,521.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="232" x="1321.25" y="532.1543">RelativePositionProcessing&lt;InOut, R&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1033" x2="1809" y1="544" y2="544"/><ellipse cx="1043" cy="555" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1052" y="558.2104">captureRejections : boolean</text><ellipse cx="1043" cy="567.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1052" y="571.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1043" cy="580.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1052" y="583.8198">defaultMaxListeners : number</text><ellipse cx="1043" cy="593.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1052" y="596.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1043,601.2188,1047,605.2188,1043,609.2188,1039,605.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1052" y="609.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1033" x2="1809" y1="616.0234" y2="616.0234"/><ellipse cx="1043" cy="627.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="566" x="1052" y="630.2339">addListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="639.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1052" y="643.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1043" cy="652.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1052" y="655.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1043" cy="665.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1052" y="668.6479">getMaxListeners() : number</text><ellipse cx="1043" cy="678.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1052" y="681.4526">getOptions() : NodeOptions</text><ellipse cx="1043" cy="691.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1052" y="694.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1043" cy="703.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1052" y="707.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1043" cy="716.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1052" y="719.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1043" cy="729.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="514" x="1052" y="732.6714">off(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="742.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1052" y="745.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1043" cy="755.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1052" y="758.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1043" cy="767.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1052" y="771.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1043" cy="780.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="592" x="1052" y="783.8901">prependListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="793.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="621" x="1052" y="796.6948">prependOnceListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="806.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1052" y="809.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1043" cy="819.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="1052" y="822.3042">processObject(dataObject: DataObject, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1043" cy="831.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="752" x="1052" y="835.1089">processRelativePositions(dataObject: DataObject, relativePositions: Map&lt;R, DataObject&gt;, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1043" cy="844.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1052" y="847.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1043" cy="857.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="469" x="1052" y="860.7183">removeAllListeners(event: string | symbol) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="870.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="588" x="1052" y="873.5229">removeListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="883.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="387" x="1052" y="886.3276">setMaxListeners(n: number) : RelativePositionProcessing&lt;InOut, R&gt;</text><ellipse cx="1043" cy="895.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1052" y="899.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1043" cy="908.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="1052" y="911.937">setOptions(options: NodeOptions) : RelativePositionProcessing&lt;InOut, R&gt;</text><polygon fill="#FFFF44" points="1043,916.5313,1047,920.5313,1043,924.5313,1039,920.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1052" y="924.7417">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1043,929.3359,1047,933.3359,1043,937.3359,1039,933.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1052" y="937.5464">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1043,942.1406,1047,946.1406,1043,950.1406,1039,946.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1052" y="950.3511">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1043,954.9453,1047,958.9453,1043,962.9453,1039,958.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1052" y="963.1558">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[9ac6b26c9c0951042fc71ef94bb46580]
class ObjectProcessingNode<InOut>--><rect codeLine="38" fill="#FEFECE" filter="url(#fs8pjnpxsx2lf)" height="444.9453" id="ObjectProcessingNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="684" x="1079" y="7"/><ellipse cx="1321.25" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1321.3594,18.3438 L1320.2031,23.4219 L1322.5313,23.4219 L1321.3594,18.3438 Z M1319.875,16.1094 L1322.8594,16.1094 L1326.2188,28.5 L1323.7656,28.5 L1323,25.4375 L1319.7188,25.4375 L1318.9688,28.5 L1316.5313,28.5 L1319.875,16.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="191" x="1341.75" y="27.1543">ObjectProcessingNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1080" x2="1762" y1="39" y2="39"/><ellipse cx="1090" cy="50" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1099" y="53.2104">captureRejections : boolean</text><ellipse cx="1090" cy="62.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1099" y="66.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1090" cy="75.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1099" y="78.8198">defaultMaxListeners : number</text><ellipse cx="1090" cy="88.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1099" y="91.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1090,96.2188,1094,100.2188,1090,104.2188,1086,100.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="1099" y="104.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1080" x2="1762" y1="111.0234" y2="111.0234"/><ellipse cx="1090" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="527" x="1099" y="125.2339">addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1099" y="138.0386">eventNames() : (string | symbol)[]</text><ellipse cx="1090" cy="147.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1099" y="150.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1090" cy="160.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1099" y="163.6479">getMaxListeners() : number</text><ellipse cx="1090" cy="173.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1099" y="176.4526">getOptions() : NodeOptions</text><ellipse cx="1090" cy="186.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1099" y="189.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1090" cy="198.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1099" y="202.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1090" cy="211.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1099" y="214.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1090" cy="224.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1099" y="227.6714">off(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="237.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1099" y="240.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1090" cy="250.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1099" y="253.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1090" cy="262.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1099" y="266.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1090" cy="275.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="553" x="1099" y="278.8901">prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="288.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="582" x="1099" y="291.6948">prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="301.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1099" y="304.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1090" cy="314.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="599" x="1099" y="317.3042">processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise&lt;DataObject&gt;</text><ellipse cx="1090" cy="326.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1099" y="330.1089">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1090" cy="339.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="430" x="1099" y="342.9136">removeAllListeners(event: string | symbol) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="352.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="549" x="1099" y="355.7183">removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="365.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="348" x="1099" y="368.5229">setMaxListeners(n: number) : ObjectProcessingNode&lt;InOut&gt;</text><ellipse cx="1090" cy="378.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1099" y="381.3276">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1090" cy="390.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="381" x="1099" y="394.1323">setOptions(options: NodeOptions) : ObjectProcessingNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1090,398.7266,1094,402.7266,1090,406.7266,1086,402.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1099" y="406.937">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1090,411.5313,1094,415.5313,1090,419.5313,1086,415.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1099" y="419.7417">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1090,424.3359,1094,428.3359,1090,432.3359,1086,428.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1099" y="432.5464">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1090,437.1406,1094,441.1406,1090,445.1406,1086,441.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1099" y="445.3511">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[ea0196c07330cea4578b4760011abaa5]
class MultilaterationNode<InOut>--><rect codeLine="72" fill="#FEFECE" filter="url(#fs8pjnpxsx2lf)" height="508.9688" id="MultilaterationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="924" x="9" y="1030"/><ellipse cx="378.75" cy="1046" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M381.7188,1051.6406 Q381.1406,1051.9375 380.5,1052.0781 Q379.8594,1052.2344 379.1563,1052.2344 Q376.6563,1052.2344 375.3281,1050.5938 Q374.0156,1048.9375 374.0156,1045.8125 Q374.0156,1042.6875 375.3281,1041.0313 Q376.6563,1039.375 379.1563,1039.375 Q379.8594,1039.375 380.5,1039.5313 Q381.1563,1039.6875 381.7188,1039.9844 L381.7188,1042.7031 Q381.0938,1042.125 380.5,1041.8594 Q379.9063,1041.5781 379.2813,1041.5781 Q377.9375,1041.5781 377.25,1042.6563 Q376.5625,1043.7188 376.5625,1045.8125 Q376.5625,1047.9063 377.25,1048.9844 Q377.9375,1050.0469 379.2813,1050.0469 Q379.9063,1050.0469 380.5,1049.7813 Q381.0938,1049.5 381.7188,1048.9219 L381.7188,1051.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="176" x="399.25" y="1050.1543">MultilaterationNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="932" y1="1062" y2="1062"/><ellipse cx="20" cy="1073" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="29" y="1076.2104">captureRejections : boolean</text><ellipse cx="20" cy="1085.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="29" y="1089.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="20" cy="1098.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="29" y="1101.8198">defaultMaxListeners : number</text><ellipse cx="20" cy="1111.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="29" y="1114.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="20,1119.2188,24,1123.2188,20,1127.2188,16,1123.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="178" x="29" y="1127.4292">options : MultilaterationOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10" x2="932" y1="1134.0234" y2="1134.0234"/><ellipse cx="20" cy="1145.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="508" x="29" y="1148.2339">addListener(eventName: string | symbol, listener: Function) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1157.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="29" y="1161.0386">eventNames() : (string | symbol)[]</text><ellipse cx="20" cy="1170.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="29" y="1173.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="20" cy="1183.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="29" y="1186.6479">getMaxListeners() : number</text><ellipse cx="20" cy="1196.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="29" y="1199.4526">getOptions() : NodeOptions</text><ellipse cx="20" cy="1209.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="29" y="1212.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="20" cy="1221.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="1225.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="20" cy="1234.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="29" y="1237.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1247.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="456" x="29" y="1250.6714">off(eventName: string | symbol, listener: Function) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1260.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="29" y="1263.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="20" cy="1273.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="29" y="1276.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1285.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="29" y="1289.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="20" cy="1298.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="534" x="29" y="1301.8901">prependListener(eventName: string | symbol, listener: Function) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1311.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="563" x="29" y="1314.6948">prependOnceListener(eventName: string | symbol, listener: Function) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1324.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="29" y="1327.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="20" cy="1337.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="29" y="1340.3042">processObject(dataObject: DataObject, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="1349.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="898" x="29" y="1353.1089">processRelativePositions&lt;P&gt;(dataObject: DataObject, relativePositions: Map&lt;RelativeDistance, DataObject&gt;, dataFrame: DataFrame) : Promise&lt;DataObject&gt;</text><ellipse cx="20" cy="1362.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="29" y="1365.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="20" cy="1375.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="29" y="1378.7183">removeAllListeners(event: string | symbol) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1388.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="530" x="29" y="1391.5229">removeListener(eventName: string | symbol, listener: Function) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1401.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="29" y="1404.3276">setMaxListeners(n: number) : MultilaterationNode&lt;InOut&gt;</text><ellipse cx="20" cy="1413.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="29" y="1417.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="20" cy="1426.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="362" x="29" y="1429.937">setOptions(options: NodeOptions) : MultilaterationNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="20,1434.5313,24,1438.5313,20,1442.5313,16,1438.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="29" y="1442.7417">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,1447.3359,24,1451.3359,20,1455.3359,16,1451.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="29" y="1455.5464">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="20,1460.1406,24,1464.1406,20,1468.1406,16,1464.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="29" y="1468.3511">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="20,1472.9453,24,1476.9453,20,1480.9453,16,1476.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="352" x="29" y="1481.1558">midpoint&lt;P&gt;(sphereA: Sphere&lt;P&gt;, sphereB: Sphere&lt;P&gt;) : P</text><polygon fill="#FFFF44" points="20,1485.75,24,1489.75,20,1493.75,16,1489.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="741" x="29" y="1493.9604">midpointGeographical(sphereA: Sphere&lt;GeographicalPosition&gt;, sphereB: Sphere&lt;GeographicalPosition&gt;) : GeographicalPosition</text><polygon fill="#FFFF44" points="20,1498.5547,24,1502.5547,20,1506.5547,16,1502.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="29" y="1506.7651">nls(spheres: Sphere&lt;any&gt;[]) : AbsolutePosition</text><polygon fill="#FFFF44" points="20,1511.3594,24,1515.3594,20,1519.3594,16,1515.3594" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="29" y="1519.5698">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="20,1524.1641,24,1528.1641,20,1532.1641,16,1528.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="302" x="29" y="1532.3745">trilaterate&lt;P&gt;(spheres: Sphere&lt;P&gt;[]) : Promise&lt;P&gt;</text><!--MD5=[6b2eaa6776b773f83c782814e1d0e6e8]
class TriangulationNode<InOut>--><rect codeLine="111" fill="#FEFECE" filter="url(#fs8pjnpxsx2lf)" height="470.5547" id="TriangulationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="906" x="968" y="1049"/><ellipse cx="1332.75" cy="1065" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1335.7188,1070.6406 Q1335.1406,1070.9375 1334.5,1071.0781 Q1333.8594,1071.2344 1333.1563,1071.2344 Q1330.6563,1071.2344 1329.3281,1069.5938 Q1328.0156,1067.9375 1328.0156,1064.8125 Q1328.0156,1061.6875 1329.3281,1060.0313 Q1330.6563,1058.375 1333.1563,1058.375 Q1333.8594,1058.375 1334.5,1058.5313 Q1335.1563,1058.6875 1335.7188,1058.9844 L1335.7188,1061.7031 Q1335.0938,1061.125 1334.5,1060.8594 Q1333.9063,1060.5781 1333.2813,1060.5781 Q1331.9375,1060.5781 1331.25,1061.6563 Q1330.5625,1062.7188 1330.5625,1064.8125 Q1330.5625,1066.9063 1331.25,1067.9844 Q1331.9375,1069.0469 1333.2813,1069.0469 Q1333.9063,1069.0469 1334.5,1068.7813 Q1335.0938,1068.5 1335.7188,1067.9219 L1335.7188,1070.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="168" x="1353.25" y="1069.1543">TriangulationNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="969" x2="1873" y1="1081" y2="1081"/><ellipse cx="979" cy="1092" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="988" y="1095.2104">captureRejections : boolean</text><ellipse cx="979" cy="1104.8047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="988" y="1108.0151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="979" cy="1117.6094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="988" y="1120.8198">defaultMaxListeners : number</text><ellipse cx="979" cy="1130.4141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="988" y="1133.6245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="979,1138.2188,983,1142.2188,979,1146.2188,975,1142.2188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="988" y="1146.4292">options : ObjectProcessingNodeOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="969" x2="1873" y1="1153.0234" y2="1153.0234"/><ellipse cx="979" cy="1164.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="502" x="988" y="1167.2339">addListener(eventName: string | symbol, listener: Function) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1176.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="988" y="1180.0386">eventNames() : (string | symbol)[]</text><ellipse cx="979" cy="1189.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="988" y="1192.8433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="979" cy="1202.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="988" y="1205.6479">getMaxListeners() : number</text><ellipse cx="979" cy="1215.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="988" y="1218.4526">getOptions() : NodeOptions</text><ellipse cx="979" cy="1228.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="988" y="1231.2573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="979" cy="1240.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="988" y="1244.062">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="979" cy="1253.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="988" y="1256.8667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="979" cy="1266.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="450" x="988" y="1269.6714">off(eventName: string | symbol, listener: Function) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1279.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="988" y="1282.4761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="979" cy="1292.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="988" y="1295.2808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="979" cy="1304.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="988" y="1308.0854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="979" cy="1317.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="528" x="988" y="1320.8901">prependListener(eventName: string | symbol, listener: Function) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1330.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="557" x="988" y="1333.6948">prependOnceListener(eventName: string | symbol, listener: Function) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1343.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="988" y="1346.4995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="979" cy="1356.0938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="988" y="1359.3042">processObject(dataObject: DataObject, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="979" cy="1368.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="880" x="988" y="1372.1089">processRelativePositions&lt;P&gt;(dataObject: DataObject, relativePositions: Map&lt;RelativeAngle, DataObject&gt;, dataFrame: DataFrame) : Promise&lt;DataObject&gt;</text><ellipse cx="979" cy="1381.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="988" y="1384.9136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="979" cy="1394.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="988" y="1397.7183">removeAllListeners(event: string | symbol) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1407.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="524" x="988" y="1410.5229">removeListener(eventName: string | symbol, listener: Function) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1420.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="323" x="988" y="1423.3276">setMaxListeners(n: number) : TriangulationNode&lt;InOut&gt;</text><ellipse cx="979" cy="1432.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="988" y="1436.1323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="979" cy="1445.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="356" x="988" y="1448.937">setOptions(options: NodeOptions) : TriangulationNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="979,1453.5313,983,1457.5313,979,1461.5313,975,1457.5313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="988" y="1461.7417">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="979,1466.3359,983,1470.3359,979,1474.3359,975,1470.3359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="988" y="1474.5464">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="979,1479.1406,983,1483.1406,979,1487.1406,975,1483.1406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="988" y="1487.3511">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="979,1491.9453,983,1495.9453,979,1499.9453,975,1495.9453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="988" y="1500.1558">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="979,1504.75,983,1508.75,979,1512.75,975,1508.75" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="342" x="988" y="1512.9604">triangulate&lt;P&gt;(points: P[], angles: number[]) : Promise&lt;P&gt;</text><!--MD5=[6ca7ed68d11791e77b122335e816879c]
class CellIdentificationNode<InOut>--><rect codeLine="147" fill="#FEFECE" filter="url(#fs8pjnpxsx2lf)" height="457.75" id="CellIdentificationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.5;" width="924" x="1909" y="1055.5"/><ellipse cx="2272.25" cy="1071.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2275.2188,1077.1406 Q2274.6406,1077.4375 2274,1077.5781 Q2273.3594,1077.7344 2272.6563,1077.7344 Q2270.1563,1077.7344 2268.8281,1076.0938 Q2267.5156,1074.4375 2267.5156,1071.3125 Q2267.5156,1068.1875 2268.8281,1066.5313 Q2270.1563,1064.875 2272.6563,1064.875 Q2273.3594,1064.875 2274,1065.0313 Q2274.6563,1065.1875 2275.2188,1065.4844 L2275.2188,1068.2031 Q2274.5938,1067.625 2274,1067.3594 Q2273.4063,1067.0781 2272.7813,1067.0781 Q2271.4375,1067.0781 2270.75,1068.1563 Q2270.0625,1069.2188 2270.0625,1071.3125 Q2270.0625,1073.4063 2270.75,1074.4844 Q2271.4375,1075.5469 2272.7813,1075.5469 Q2273.4063,1075.5469 2274,1075.2813 Q2274.5938,1075 2275.2188,1074.4219 L2275.2188,1077.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="189" x="2292.75" y="1075.6543">CellIdentificationNode&lt;InOut&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1910" x2="2832" y1="1087.5" y2="1087.5"/><ellipse cx="1920" cy="1098.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="158" x="1929" y="1101.7104">captureRejections : boolean</text><ellipse cx="1920" cy="1111.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="323" x="1929" y="1114.5151">captureRejectionSymbol : typeof captureRejectionSymbol</text><ellipse cx="1920" cy="1124.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1929" y="1127.3198">defaultMaxListeners : number</text><ellipse cx="1920" cy="1136.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="1929" y="1140.1245">errorMonitor : typeof errorMonitor</text><polygon fill="none" points="1920,1144.7188,1924,1148.7188,1920,1152.7188,1916,1148.7188" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="1929" y="1152.9292">options : CellIdentificationOptions</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1910" x2="2832" y1="1159.5234" y2="1159.5234"/><ellipse cx="1920" cy="1170.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="521" x="1929" y="1173.7339">addListener(eventName: string | symbol, listener: Function) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1183.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="1929" y="1186.5386">eventNames() : (string | symbol)[]</text><ellipse cx="1920" cy="1196.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="538" x="1929" y="1199.3433">getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]</text><ellipse cx="1920" cy="1208.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1929" y="1212.1479">getMaxListeners() : number</text><ellipse cx="1920" cy="1221.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="1929" y="1224.9526">getOptions() : NodeOptions</text><ellipse cx="1920" cy="1234.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="1929" y="1237.7573">listenerCount(eventName: string | symbol) : number</text><ellipse cx="1920" cy="1247.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="1929" y="1250.562">listenerCount(emitter: EventEmitter, eventName: string | symbol) : number</text><ellipse cx="1920" cy="1260.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="1929" y="1263.3667">listeners(eventName: string | symbol) : Function[]</text><ellipse cx="1920" cy="1272.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="469" x="1929" y="1276.1714">off(eventName: string | symbol, listener: Function) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1285.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="630" x="1929" y="1288.9761">on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator&lt;any&gt;</text><ellipse cx="1920" cy="1298.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="658" x="1929" y="1301.7808">once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1920" cy="1311.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="602" x="1929" y="1314.5854">once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise&lt;any[]&gt;</text><ellipse cx="1920" cy="1324.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="547" x="1929" y="1327.3901">prependListener(eventName: string | symbol, listener: Function) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1336.9844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="576" x="1929" y="1340.1948">prependOnceListener(eventName: string | symbol, listener: Function) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1349.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="1929" y="1352.9995">process(frame: InOut, options: GraphOptions) : Promise&lt;InOut&gt;</text><ellipse cx="1920" cy="1362.5938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="1929" y="1365.8042">processObject(dataObject: DataObject, dataFrame: InOut) : Promise&lt;DataObject&gt;</text><ellipse cx="1920" cy="1375.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="898" x="1929" y="1378.6089">processRelativePositions&lt;P&gt;(dataObject: DataObject, relativePositions: Map&lt;RelativeDistance, DataObject&gt;, dataFrame: DataFrame) : Promise&lt;DataObject&gt;</text><ellipse cx="1920" cy="1388.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="1929" y="1391.4136">rawListeners(eventName: string | symbol) : Function[]</text><ellipse cx="1920" cy="1401.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="424" x="1929" y="1404.2183">removeAllListeners(event: string | symbol) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1413.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="543" x="1929" y="1417.0229">removeListener(eventName: string | symbol, listener: Function) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1426.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="342" x="1929" y="1429.8276">setMaxListeners(n: number) : CellIdentificationNode&lt;InOut&gt;</text><ellipse cx="1920" cy="1439.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="480" x="1929" y="1442.6323">setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void</text><ellipse cx="1920" cy="1452.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="1929" y="1455.437">setOptions(options: NodeOptions) : CellIdentificationNode&lt;InOut&gt;</text><polygon fill="#FFFF44" points="1920,1460.0313,1924,1464.0313,1920,1468.0313,1916,1464.0313" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1929" y="1468.2417">findNodeDataService() : NodeDataService&lt;NodeData&gt;</text><polygon fill="#FFFF44" points="1920,1472.8359,1924,1476.8359,1920,1480.8359,1916,1476.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1929" y="1481.0464">findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise&lt;DataObject&gt;</text><polygon fill="#FFFF44" points="1920,1485.6406,1924,1489.6406,1920,1493.6406,1916,1489.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="422" x="1929" y="1493.8511">getNodeData&lt;T&gt;(dataObject: DataObject, defaultData: T) : Promise&lt;any&gt;</text><polygon fill="#FFFF44" points="1920,1498.4453,1924,1502.4453,1920,1506.4453,1916,1502.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="1929" y="1506.6558">setNodeData(dataObject: DataObject, data: any) : Promise&lt;NodeData&gt;</text><!--MD5=[20102bd41880321f3b990d95b08f0268]
reverse link ObjectProcessingNode<InOut> to RelativePositionProcessing<InOut, R>--><path codeLine="71" d="M1421,472.54 C1421,485.57 1421,498.64 1421,511.62 " fill="none" id="ObjectProcessingNode&lt;InOut&gt;-backto-RelativePositionProcessing&lt;InOut, R&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1414,472.12,1421,452.12,1428,472.12,1414,472.12" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[81e313ec03b7bacdf985f7986c85807b]
reverse link RelativePositionProcessing<InOut, R> to MultilaterationNode<InOut>--><path codeLine="110" d="M1014.36,973.78 C981.82,992.33 948.85,1011.12 916.07,1029.81 " fill="none" id="RelativePositionProcessing&lt;InOut, R&gt;-backto-MultilaterationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1011.02,967.63,1031.86,963.81,1017.95,979.8,1011.02,967.63" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7e0572fb422cfb0a69b99c77dad7c8ac]
reverse link RelativePositionProcessing<InOut, R> to TriangulationNode<InOut>--><path codeLine="146" d="M1421,990.29 C1421,1009.75 1421,1029.37 1421,1048.74 " fill="none" id="RelativePositionProcessing&lt;InOut, R&gt;-backto-TriangulationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1414,990.08,1421,970.08,1428,990.08,1414,990.08" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[bd1e4c97de894634c02a8a4c4082a323]
reverse link RelativePositionProcessing<InOut, R> to CellIdentificationNode<InOut>--><path codeLine="181" d="M1827.59,973.76 C1875.09,1000.83 1923.51,1028.43 1970.91,1055.45 " fill="none" id="RelativePositionProcessing&lt;InOut, R&gt;-backto-CellIdentificationNode&lt;InOut&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1824.05,979.8,1810.14,963.81,1830.98,967.63,1824.05,979.8" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[81586cfda91b3e050ebef2de072176b7]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
abstract class "RelativePositionProcessing<InOut, R>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +prependOnceListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(dataObject: DataObject, dataFrame: InOut) : Promise<DataObject>
    {abstract} +processRelativePositions(dataObject: DataObject, relativePositions: Map<R, DataObject>, dataFrame: InOut) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : RelativePositionProcessing<InOut, R>
    +removeListener(eventName: string | symbol, listener: Function) : RelativePositionProcessing<InOut, R>
    +setMaxListeners(n: number) : RelativePositionProcessing<InOut, R>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : RelativePositionProcessing<InOut, R>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
abstract class "ObjectProcessingNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    {abstract} +processObject(dataObject: DataObject, dataFrame: InOut, options: GraphOptions) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : ObjectProcessingNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : ObjectProcessingNode<InOut>
    +setMaxListeners(n: number) : ObjectProcessingNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : ObjectProcessingNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"ObjectProcessingNode<InOut>" <|- - "RelativePositionProcessing<InOut, R>"
class "MultilaterationNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : MultilaterationOptions
    +addListener(eventName: string | symbol, listener: Function) : MultilaterationNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : MultilaterationNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : MultilaterationNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : MultilaterationNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(dataObject: DataObject, dataFrame: InOut) : Promise<DataObject>
    +processRelativePositions<P>(dataObject: DataObject, relativePositions: Map<RelativeDistance, DataObject>, dataFrame: DataFrame) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : MultilaterationNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : MultilaterationNode<InOut>
    +setMaxListeners(n: number) : MultilaterationNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : MultilaterationNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #midpoint<P>(sphereA: Sphere<P>, sphereB: Sphere<P>) : P
    #midpointGeographical(sphereA: Sphere<GeographicalPosition>, sphereB: Sphere<GeographicalPosition>) : GeographicalPosition
    #nls(spheres: Sphere<any>[]) : AbsolutePosition
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
    #trilaterate<P>(spheres: Sphere<P>[]) : Promise<P>
}
"RelativePositionProcessing<InOut, R>" <|- - "MultilaterationNode<InOut>"
class "TriangulationNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : ObjectProcessingNodeOptions
    +addListener(eventName: string | symbol, listener: Function) : TriangulationNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : TriangulationNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : TriangulationNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : TriangulationNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(dataObject: DataObject, dataFrame: InOut) : Promise<DataObject>
    +processRelativePositions<P>(dataObject: DataObject, relativePositions: Map<RelativeAngle, DataObject>, dataFrame: DataFrame) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : TriangulationNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : TriangulationNode<InOut>
    +setMaxListeners(n: number) : TriangulationNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : TriangulationNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
    #triangulate<P>(points: P[], angles: number[]) : Promise<P>
}
"RelativePositionProcessing<InOut, R>" <|- - "TriangulationNode<InOut>"
class "CellIdentificationNode<InOut>" {
    {static} +captureRejections : boolean
    {static} +captureRejectionSymbol : typeof captureRejectionSymbol
    {static} +defaultMaxListeners : number
    {static} +errorMonitor : typeof errorMonitor
    #options : CellIdentificationOptions
    +addListener(eventName: string | symbol, listener: Function) : CellIdentificationNode<InOut>
    +eventNames() : (string | symbol)[]
    {static} +getEventListeners(emitter: EventEmitter | DOMEventTarget, name: string | symbol) : Function[]
    +getMaxListeners() : number
    +getOptions() : NodeOptions
    +listenerCount(eventName: string | symbol) : number
    {static} +listenerCount(emitter: EventEmitter, eventName: string | symbol) : number
    +listeners(eventName: string | symbol) : Function[]
    +off(eventName: string | symbol, listener: Function) : CellIdentificationNode<InOut>
    {static} +on(emitter: EventEmitter, eventName: string, options: StaticEventEmitterOptions) : AsyncIterableIterator<any>
    {static} +once(emitter: NodeEventTarget, eventName: string | symbol, options: StaticEventEmitterOptions) : Promise<any[]>
    {static} +once(emitter: DOMEventTarget, eventName: string, options: StaticEventEmitterOptions) : Promise<any[]>
    +prependListener(eventName: string | symbol, listener: Function) : CellIdentificationNode<InOut>
    +prependOnceListener(eventName: string | symbol, listener: Function) : CellIdentificationNode<InOut>
    +process(frame: InOut, options: GraphOptions) : Promise<InOut>
    +processObject(dataObject: DataObject, dataFrame: InOut) : Promise<DataObject>
    +processRelativePositions<P>(dataObject: DataObject, relativePositions: Map<RelativeDistance, DataObject>, dataFrame: DataFrame) : Promise<DataObject>
    +rawListeners(eventName: string | symbol) : Function[]
    +removeAllListeners(event: string | symbol) : CellIdentificationNode<InOut>
    +removeListener(eventName: string | symbol, listener: Function) : CellIdentificationNode<InOut>
    +setMaxListeners(n: number) : CellIdentificationNode<InOut>
    {static} +setMaxListeners(n: number, eventTargets: (EventEmitter | DOMEventTarget)[]) : void
    +setOptions(options: NodeOptions) : CellIdentificationNode<InOut>
    #findNodeDataService() : NodeDataService<NodeData>
    #findObjectByUID(uid: string, dataFrame: InOut, type: string) : Promise<DataObject>
    #getNodeData<T>(dataObject: DataObject, defaultData: T) : Promise<any>
    #setNodeData(dataObject: DataObject, data: any) : Promise<NodeData>
}
"RelativePositionProcessing<InOut, R>" <|- - "CellIdentificationNode<InOut>"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 16:46:50 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>